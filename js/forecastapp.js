define("forecast/adapters/application",
  ["forecast/utils/ajax","forecast/utils/config"],
  function(__dependency1__, Config) {
    "use strict";
    var RequestStatus = __dependency1__.RequestStatus;

    var ApplicationAdapter = DS.RESTAdapter.extend({
      host: Config.SERVER_URL,

      shouldReloadAll: function() {
        return true;
      },

      shouldBackgroundReloadRecord: function() {
        return false;
      },

      ajax: function(url, type, hash) {
        if (RequestStatus.get('disabled')) {
          return Ember.RSVP.Promise.reject('All requests are disabled');
        }

        RequestStatus.startRequest();
        return this._super(url, type, hash).finally(function() {
          RequestStatus.finishRequest();
        });
      }
    });


    return ApplicationAdapter;
  });
define("forecast/adapters/current_user",
  ["forecast/adapters/singleton"],
  function(SingletonAdapter) {
    "use strict";

    var CurrentUserAdapter = SingletonAdapter.extend({
      pathForType: function() {
        return 'whoami';
      }
    });


    return CurrentUserAdapter;
  });
define("forecast/adapters/harvest_client",
  ["forecast/adapters/application"],
  function(ApplicationAdapter) {
    "use strict";

    var HarvestClientAdapter = ApplicationAdapter.extend({
      pathForType: function(type) {
        return 'harvest/client_project_imports/new';
      }
    });



    return HarvestClientAdapter;
  });
define("forecast/adapters/harvest_person",
  ["forecast/adapters/application"],
  function(ApplicationAdapter) {
    "use strict";

    var HarvestPersonAdapter = ApplicationAdapter.extend({
      pathForType: function(type) {
        return 'harvest/person_imports/new';
      }
    });



    return HarvestPersonAdapter;
  });
define("forecast/adapters/repeated_assignment_set",
  ["forecast/adapters/application"],
  function(ApplicationAdapter) {
    "use strict";

    var RepeatedAssignmentSetAdapter = ApplicationAdapter.extend({
      pathForType: function(type) {
        return 'repeated_assignment_sets';
      }
    });


    return RepeatedAssignmentSetAdapter;
  });
define("forecast/adapters/singleton",
  ["forecast/adapters/application"],
  function(ApplicationAdapter) {
    "use strict";

    var SingletonAdapter = ApplicationAdapter.extend({
      buildURL: function(type, id) {
        return this._super(type);
      }
    });


    return SingletonAdapter;
  });
define("forecast/adapters/subscription",
  ["forecast/adapters/singleton"],
  function(SingletonAdapter) {
    "use strict";

    var SubscriptionAdapter = SingletonAdapter.extend({
      pathForType: function() {
        return 'billing/subscription';
      }
    });


    return SubscriptionAdapter;
  });
define("forecast/adapters/user_connection",
  ["forecast/adapters/application"],
  function(ApplicationAdapter) {
    "use strict";

    var UserConnectionAdapter = ApplicationAdapter.extend({
      pathForType: function(type) {
        return 'user_connections';
      }
    });


    return UserConnectionAdapter;
  });
define("forecast/app",
  ["forecast/utils/json","ember/resolver","forecast/utils/config","forecast/utils/bus","forecast/transforms/datestamp","forecast/transforms/timestamp","forecast/transforms/array","forecast/mixin/autoselectable","forecast/realtime/socket","forecast/realtime/realtime","forecast/utils/logger"],
  function(__dependency1__, Resolver, Config, Bus, DatestampTransform, TimestampTransform, ArrayTransform , Autoselectable, Socket, Realtime, Logger) {
    "use strict";
    var safeParseJSON = __dependency1__.safeParseJSON;

    var App = Ember.Application.extend({
      modulePrefix: 'forecast',
      Resolver:     Resolver,
      rootElement:  'body',
      LOG_TRANSITIONS: true,
      environment: Config.ENVIRONMENT
    });

    /*
     * Custom version of String.prototype.fmt for now, to silence deprecation
     * warnings.
     */

    function fmt(string, formats) {
      var i = 0;
      return string.replace(/%@([0-9]+)?/g, function() {
        var r = formats[i++];
        return (r === null) ? '(null)' : (r === undefined) ? '' : Ember.inspect(r);
      });
    }

    var slice = Array.prototype.slice;
    String.prototype.fmt = function() { return fmt(this, slice.call(arguments)); };
    Ember.String.fmt = function(str) { return fmt(str, slice.call(arguments, 1)); };

    // --- Ember Data resources ----------------------------------------------------

    App.initializer({
      name: 'Monkey-patch for finding singleton resources',
      before: 'ember-data',
      initialize: function(application) {
        DS.Store.reopen({
          findSingleton: function(type) {
            return this.findRecord(type, 'singleton');
          }
        });
      }
    });


    App.initializer({
      name: 'Register DS Transforms',
      after: 'ember-data',
      initialize: function(application) {
        application.register('transform:datestamp', DatestampTransform);
        application.register('transform:timestamp', TimestampTransform);
        application.register('transform:array' , ArrayTransform);
      }
    });

    // This initializer is to fix decidedly terrible behavior in Ember
    // Data.
    //
    // As also partially documented here:
    // - http://discuss.emberjs.com/t/deleting-model-from-store-after-save-failure/5072/6
    // - https://github.com/emberjs/data/issues/1632
    // - https://github.com/emberjs/data/issues/1764
    //
    // This is to be removed once that gets fixed up. _If_ it gets fixed up.
    App.initializer({
      name: 'Fix stupid 422 handling',
      after: 'ember-data',
      initialize: function(application) {
        DS.Model.reopen({
          save: function(options) {
            var model = this;
            return this._super(options).catch(function(reason) {
              if (model.get('isSaving')) {
                model.transitionTo('invalid');
              }
              throw reason;
            });
          }
        });
      }
    });

    App.initializer({
      name: 'Setup ajax prefilter and register global response handlers',
      after: 'ember-data',
      initialize: function(application) {
        Ember.$.ajaxPrefilter(function(options, originalOptions, jqXHR) {
          jqXHR.fail(function(xhr, textStatus, errorThrown) {
            Ember.run(function() {
              var data;

              if (xhr.readyState === 0) {
                Bus.trigger('connection:offline');
              } else if (xhr.status === 401) {
                data = safeParseJSON(xhr.responseText, { });
                Bus.trigger('request:unauthorized', data);
              } else if (xhr.status === 422) {
                data = safeParseJSON(xhr.responseText, { errors: [] });
                Bus.trigger('request:error', data.errors);
              }
            });
          });
        });
      }
    });

    // --- Component Helpers ------------------------------------------------------


    Ember.LinkComponent.reopen({
      activeClass: 'is-active'
    });

    Ember.TextSupport.reopen(Autoselectable);

    App.initializer({
      name: 'Set up Marked',
      initialize: function() {
        var marked   = window.marked;
        var renderer = new marked.Renderer();

        renderer.heading = function(text, level) {
          return '<h%@>%@</h%@>'.fmt(level, text, level);
        };

        renderer.link = function(href, title, text) {
          var out = marked.Renderer.prototype.link.call(this, href, title, text);
          return out.replace('<a', '<a rel="noreferrer" target="_blank"');
        };

        marked.setOptions({
          sanitize: true,
          renderer: renderer
        });
      }
    });

    // --- Add a filter to Ember.Shortcuts -----------------------------------------

    function modalIsNotOpen() {
      return !Ember.$('.modal').length;
    }

    Ember.Shortcuts.reopen({
      filters: [modalIsNotOpen]
    });

    // --- Realtime updates --------------------------------------------------------


    App.initializer({
      name: 'Realtime Updates',
      after: 'ember-data',

      initialize: function(application) {
        application.register('socket:main', Socket);
        application.register('realtime:main', Realtime);

        application.inject('realtime', 'socket', 'socket:main');
        application.inject('realtime', 'store', 'service:store');

        application.inject('controller', 'realtime', 'realtime:main');
        application.inject('route', 'realtime', 'realtime:main');
        application.inject('component', 'realtime', 'realtime:main');
      }
    });

    // --- Inflection Rules -------------------------------------------------------

    Ember.Inflector.inflector.irregular('HarvestPerson', 'HarvestPeople');

    // --- Customize the Ember.Validation messages --------------------------------

    Ember.ValidationError.addMessages({
      'blank':   'Required',
      'invalid': 'Invalid',
      'notNumber': 'Must be a number',
      'notGreaterThanOrEqualTo': 'Must be at least @{value}',
      'notLessThanOrEqualTo': 'Must be at most @{value}'
    });

    // Make sure `Ember.get` doesn't return a value for `null.length`
    // more info: https://github.com/ebryn/ember-model/issues/256#issuecomment-28749231
    //       and: https://github.com/emberjs/ember.js/issues/3760
    //       and: https://github.com/emberjs/ember.js/pull/3852
    //
    // Keeping this "fix" here until that PR gets into Ember (and we're on the
    // requisite version).

    window.length = undefined;

    // --- Error reporting --------------------------------------------------------

    Bugsnag.apiKey = Config.BUGSNAG_API_KEY;
    Bugsnag.releaseStage = Config.ENVIRONMENT.toLowerCase();
    Bugsnag.notifyReleaseStages = ['staging', 'production'];


    Ember.Logger = Logger.create();

    if (Config.ENVIRONMENT === 'PRODUCTION' || Config.ENVIRONMENT === 'STAGING') {
      Ember.onerror = function(error) {
        Ember.Logger.reportError(error);
        // We’re handling 422 XHR responses in the global $.ajaxPrefilter above
        if (Ember.get(error, 'xhr.status') === 422) { return; }
        // If the Logger already processed the error, don’t bother
        if (Ember.Logger.get('sendErrors')) { return; }
        throw error;
      };

      // Make sure to catch errors thrown from promise callbacks
      Ember.RSVP.on('error', function(error) {
        if (error instanceof Error) {
          Ember.onerror(error);
        }
      });
    }

    window.log = function() {
      var args = [].slice.call(arguments);
      Ember.Logger.log.apply(Ember.Logger, arguments);
    };


    return App;
  });
define("forecast/components/allocated-frame",
  ["forecast/utils/allocation_math","forecast/mixin/fixed-label","forecast/components/time-frame"],
  function(__dependency1__, FixedLabel, TimeFrameComponent) {
    "use strict";
    var subtractAllocation = __dependency1__.subtractAllocation;

    var AllocatedFrameComponent = TimeFrameComponent.extend(FixedLabel, {
      classNameBindings: ['allocatedStatus'],
      allocation: 0,
      isTimeOff : false,
      layoutName: 'components/allocated-frame',

      hoursFree: function() {
        var maxAllocation = this.get('maxAllocationPerDay');
        var allocation = this.get('allocation');
        return subtractAllocation(maxAllocation, allocation);
      }.property('maxAllocationPerDay', 'allocation'),

      label: function() {
        if (this.get('isTimeOff')) { return 'Off'; }
        var hoursFree = this.get('hoursFree');
        var label;
        if (hoursFree === 0) { label = 'Full'; }
        if (hoursFree   > 0) { label =  hoursFree + ' <small>open</small>'; }
        if (hoursFree   < 0) { label = -hoursFree + ' <small>over</small>'; }
        return new Ember.Handlebars.SafeString(label);
      }.property('hoursFree', 'isTimeOff'),

      allocatedStatus: function() {
        var maxAllocationPerDay = this.get('maxAllocationPerDay'),
            hoursFree = this.get('hoursFree');

        if (this.get('isTimeOff')) {
          if (hoursFree !== maxAllocationPerDay) {
            return 'allocation-time-off-over';
          } else {
            return 'allocation-time-off';
          }
        }

        if (hoursFree < 0) {
          return 'allocation-over';
        }

        if (hoursFree === 0) {
          return 'allocation-full';
        }

        return 'allocation-open-' + Math.ceil(hoursFree);
      }.property(
        'hoursFree',
        'maxAllocationPerDay',
        'isTimeOff'
      )
    });


    return AllocatedFrameComponent;
  });
define("forecast/components/announcement-button",
  ["forecast/mixin/background-click"],
  function(BackgroundClick) {
    "use strict";

    var AnnouncementButtonComponent = Ember.Component.extend(BackgroundClick, {
      actions: {
        toggle: function() {
          this.toggleProperty('showAnnouncement');
          if (this.get('showAnnouncement')) {
            this.get('gtm').sendGAEvent('announcement', 'open', this.get('type'));
          }
        },
        dismiss: function() {
          this.set('showAnnouncement', false);
          this.sendAction('dismiss');
          this.get('gtm').sendGAEvent('announcement', 'dismiss', this.get('type'));
        }
      },

      gtm: Ember.inject.service('google-tag-manager'),

      classNames: ['announcement'],
      classNameBindings: ['showAnnouncement:is-showing', 'typeClass'],
      showAnnouncement: false,

      type: '',
      label: '',
      body: '',

      backgroundClicked: function() {
        this.set('showAnnouncement', false);
      },

      typeClass: function() {
        return 'announcement-' + (this.get('type') || 'general');
      }.property('type')
    });


    return AnnouncementButtonComponent;
  });
define("forecast/components/assign-ment",
  [],
  function() {
    "use strict";
    var AssignmentComponent = Ember.Component.extend({
      assignment: null,
      activeAssignment: null,
      dayWidth: null,
      timelineStartDate: null,

      features: Ember.inject.service('features'),
      zoom: Ember.inject.service('zoom'),

      isActive: Ember.computed('activeAssignment', 'assignment', function() {
        return this.get('activeAssignment') === this.get('assignment');
      }),

      editable: Ember.computed('realtime.isAdmin', 'assignment.isNew', 'assignment.person.archived', 'assignment.project.archived', function() {
        if (this.get('assignment.isNew')) { return false; }
        if (!this.get('realtime.isAdmin')) { return false; }
        if (this.get('assignment.person.archived')) { return false; }
        if (this.get('assignment.project.archived')) { return false; }
        return true;
      })
    });



    return AssignmentComponent;
  });
define("forecast/components/assignment-frame",
  ["forecast/utils/date","forecast/mixin/deferred-setup","forecast/mixin/fixed-label","forecast/components/time-frame"],
  function(__dependency1__, DeferredSetup, FixedLabel, TimeFrameComponent) {
    "use strict";
    var shift = __dependency1__.shift;

    var AssignmentFrameComponent = TimeFrameComponent.extend(DeferredSetup, FixedLabel, {
      classNames:        ['assignment'],
      classNameBindings: ['assignment.project.color',
                          'isActive',
                          'assignment.isNew',
                          'assignment.notes:has-notes'],
      layoutName:        'components/assignment-frame',
      mouseDownTarget:   null,
      mouseUpTarget:     null,

      gtm: Ember.inject.service('google-tag-manager'),

      // Bindings
      startDate: Ember.computed.alias('assignment.start_date'),
      endDate:   Ember.computed.alias('assignment.end_date'),

      editable: true,
      tornDown: false,

      watchEditable: function() {
        if (this.get('editable')) {
          this.resolveSetup();
        } else {
          this.teardown();
        }
      }.observes('editable'),

      label: function() {
        if (this.get('assignment.project.isTimeOff')) {
          return 'Off';
        }

        var allocation = this.get('assignment.allocation');
        var duration   = this.get('assignment.duration');
        var postfix    = '';

        if (duration === 1) {
          postfix += 'h';
        }
        if (duration > 1) {
          postfix += ' h/d';
        }

        return allocation + postfix;
      }.property(
        'assignment.project.isTimeOff',
        'assignment.duration',
        'assignment.allocation'
      ),

      atLeastOneWeek: Ember.computed.gte('assignment.duration', 5),

      showTotalAllocation: Ember.computed.and('atLeastOneWeek', 'assignment.project.isNotTimeOff'),

      totalAllocation: Ember.computed('assignment.totalAllocation', function() {
        return '(%@h)'.fmt(this.get('assignment.totalAllocation'));
      }),

      dayWidthObserver: function() {
        if (!this.get('isSetup')) { return; }
        if (!this.get('editable')) { return; }
        this.$().draggable('option', 'grid', [this.get('dayWidth'), 0]);
        this.$().resizable('option', 'grid', [this.get('dayWidth'), 0]);
      }.observes('dayWidth'),

      resolveSetup: function() {
        if (!this.get('editable')) { return; }
        this._super();
        this.set('tornDown', false);
        this.setupDrag();
        this.setupResize();
      },

      setupDrag: function() {
        var dragLeft = null;

        this.$().draggable({
          axis: 'x',
          grid: [this.get('dayWidth'), 0],
          start: Ember.run.bind(this, function(evt, ui) {
            this.$().addClass('is-active');
            dragLeft = ui.originalPosition.left;
          }),
          drag: Ember.run.bind(this, function(evt, ui) {
            var dayWidth = this.get('dayWidth');
            if (dragLeft !== ui.position.left) {
              this.renderAssignmentLabel((ui.originalPosition.left - ui.position.left) / dayWidth);
              dragLeft = ui.position.left;
            }
          }),
          stop: Ember.run.bind(this, function(evt, ui) {
            this.$().removeClass('is-active');
            var dayWidth = this.get('dayWidth');
            var delta = (ui.position.left - ui.originalPosition.left) / dayWidth;
            var assignment = this.get('assignment');
            if(delta) {
              assignment.set('start_date', shift(assignment.get('start_date'), delta));
              assignment.set('end_date',   shift(assignment.get('end_date'),   delta));
              this.attrs.onMoved(assignment);
              this.get('gtm').sendGAEvent('assignment', 'drag', null, Math.round(delta));
            }
            this.$().draggable('destroy');
            this.setupDrag();
          })
        });
      },

      setupResize: function() {
        this.$().resizable({
          handles: 'e, w',
          grid: [this.get('dayWidth'), 0],
          animate: false,

          start: Ember.run.bind(this, function(evt, ui) {
            this.$().addClass('is-active');
          }),
          stop: Ember.run.bind(this, function(evt, ui) {
            this.$().removeClass('is-active');
            var delta;
            var dayWidth = this.get('dayWidth');
            var assignment = this.get('assignment');
            // start date changed
            if(delta = (ui.position.left - ui.originalPosition.left) / dayWidth) {
              assignment.set('start_date', shift(assignment.get('start_date'), delta));
            // end date changed
            } else if(delta = (ui.size.width - ui.originalSize.width) / dayWidth) {
              assignment.set('end_date', shift(assignment.get('end_date'), delta));
            }
            if(delta) {
              this.attrs.onMoved(assignment);
              this.get('gtm').sendGAEvent('assignment', 'resize', null, Math.round(delta));
            }
          })
        });
      },

      teardownDrag: function() {
        this.$().draggable('destroy');
      },

      teardownResize: function() {
        this.$().resizable('destroy');
      },

      teardown: function() {
        if (this.get('tornDown')) { return; }
        if (!this.get('isSetup')) { return; }
        this.set('tornDown', true);
        this.teardownDrag();
        this.teardownResize();
      },

      willDestroyElement: function() {
        this.teardown();
      },

      click: function() {
        // prevent accidental assignment edit while dragging
        // mouseDown/Up on/off split lines caused that unwanted behavior
        if (this.get('editable') && this.get('mouseDownTarget') === this.get('mouseUpTarget')) {
          this.attrs.onClick(this.get('assignment'));
          this.set('mouseDownTarget', null);
          this.set('mouseUpTarget', null);
        }
      },

      mouseUp: function(evt) {
        this.set('mouseUpTarget', evt.target);
      },

      mouseDown: function(evt) {
        this.set('mouseDownTarget', evt.target);
      }
    });


    return AssignmentFrameComponent;
  });
define("forecast/components/color-block",
  [],
  function() {
    "use strict";
    /*
     * Quick reminder for our future selves: The reason that made moving the
     * retrieval logic, which feels wrong to have in a component, back into the
     * controller(s) is the loop in `app/templates/account/grouped_projects_list.hbs`
     * which does not have an `itemController` around each project, thus making it
     * impossible to use a CP in the way things are currently set up.
     */
    var ColorBlockComponent = Ember.Component.extend({
      attributeBindings: ['title'],
      classNames: ['color'],
      classNameBindings: ['color'],
      tagName: 'i',

      // Bindings
      color: null,
      labels: [],

      title: function() {
        var color = this.get('color');
        var setting = this.get('labels').findBy('name', color);
        return Ember.get(setting || {}, 'label');
      }.property('color', 'labels.@each.label')
    });


    return ColorBlockComponent;
  });
define("forecast/components/color-select",
  ["forecast/components/list-select"],
  function(ListSelectComponent) {
    "use strict";

    var ColorSelectComponent = ListSelectComponent.extend({
      classNames: ['color-select'],
    });



    return ColorSelectComponent;
  });
define("forecast/components/control-button",
  [],
  function() {
    "use strict";
    var ControlButtonComponent = Ember.Component.extend({
      tagName: 'a',
      classNames: ['control-button'],
      classNameBindings: ['buttonType'],
      attributeBindings: ['href', 'tabIndex', 'tooltipText'],
      href: '#',
      buttonType: '',
      tabIndex: 0,

      tooltipText: function() {
        var words = this.get('buttonType').split('-');
        return words.map(Ember.String.capitalize).join(' ');
      }.property('buttonType'),

      click: function(event) {
        this.sendAction('action');
        this.afterClick(event);
      },

      afterClick: function(event) {
        this.$().blur();
        event.preventDefault();
        event.stopPropagation();
      }
    });


    return ControlButtonComponent;
  });
define("forecast/components/date-select",
  ["forecast/utils/date","forecast/utils/computed"],
  function(__dependency1__, __dependency2__) {
    "use strict";
    var makeDate = __dependency1__.makeDate;
    var fcOneWay = __dependency2__.fcOneWay;

    function format(dateKey, fmtString) {
      return Ember.computed(dateKey, function() {
        return this.get(dateKey).format(fmtString);
      });
    }

    function setter(key, value) {
      return function() {
        this.set(key, value);
      };
    }

    function Day(day, currentMonth, selected, disabled) {
      this.day = day;
      this.date = day.date();
      this.isSelected = day.isSame(selected, 'day');
      this.isDisabled = !!disabled;
      this.isToday = day.isSame(makeDate(), 'day');
      this.isNotInMonth = day.month() !== currentMonth;
    }

    var DateSelectComponent = Ember.Component.extend({
      isOpen: false,

      selected: function() { return makeDate(); }.property(),
      date: fcOneWay('selected'),

      dateDisplay:  format('date', 'D MMM YYYY'),
      monthDisplay: format('date', 'MMM YYYY'),

      headerDays: 'MTWTF'.split(''),

      weeks: function() {
        var date  = this.get('date'),
            day   = makeDate(date.clone().startOf('month')),
            last  = makeDate(day.clone().endOf('month')),
            month = day.month(),
            weeks = [],
            week,
            i;

        day  = makeDate(day.startOf('isoWeek'));
        last = makeDate(last.endOf('isoWeek'));

        while (!day.isAfter(last, 'day')) {
          week = [];
          for (i = 0; i < 7; i++) {
            if (day.day() % 6) {
              week.push(this.makeDay(day, month));
            }
            day = day.clone().add(1, 'day');
          }
          weeks.push(week);
        }

        return weeks;
      }.property('date'),

      makeDay: function(day, month) {
        var selected = this.get('selected'),
            disabled = this.shouldDisable(day);
        return new Day(day, month, selected, disabled);
      },

      shouldDisable: function(day) {
        var isWeekend = day.day() % 6 === 0;
        return isWeekend;
      },

      click:    setter('isOpen', true),
      focusIn:  setter('isOpen', true),
      focusOut: setter('isOpen', false),

      close: function() {
        this.set('isOpen', false);
      },

      actions: {
        prevMonth: function() {
          var date = this.get('date').clone();
          this.set('date', date.subtract(1, 'month'));
        },

        nextMonth: function() {
          var date = this.get('date').clone();
          this.set('date', date.add(1, 'month'));
        },

        thisMonth: function() {
          this.set('date', makeDate());
        },

        setDate: function(day) {
          if (day.isDisabled) { return; }
          this.setProperties({
            selected: day.day.clone(),
            date: day.day.clone()
          });
          this.close();
        }
      }
    });


    return DateSelectComponent;
  });
define("forecast/components/decimal-input",
  [],
  function() {
    "use strict";
    var SEPARATOR = /[\.,]/;
    var ALLOWED   = /[0-9\.,]/;

    function toNumber(value) {
      var n = Number(value.replace(/,/g, '.'));
      return isNaN(n) ? 0 : n;
    }

    var DecimalInput = Ember.TextField.extend({
      num: Ember.computed('value', {
        get: function() {
          return toNumber(this.get('value'));
        },
        set: function(key, num) {
          var value = this.get('value');
          num = num || 0;
          if (value === '' && num === 0) { return 0; }
          if (toNumber(value) === num) { return num; }
          this.set('value', num.toString());
          return num;
        }
      }),

      focusOut: function() {
        this.set('value', this.get('value').replace(/,/g, '.'));
        if (this.attrs.onBlur) {
          this.attrs.onBlur();
        }
      },

      keyPress: function(event) {
        var code = event.charCode;
        var char = String.fromCharCode(code);

        if (this.shouldIgnoreEvent(event)) { return; }

        if (!ALLOWED.test(char)) { return false; }
        if (this.get('atFullPrecision') && this.nothingSelected() && this.isAfterTheSeparator()) { return false; }
        if (SEPARATOR.test(char) && !this.canTypeSeparator()) { return false; }
      },

      shouldIgnoreEvent: function(event) {
        // Ignore normal modifer-based keyboard shortcuts.
        var isModified = event.ctrlKey || event.altKey || event.metaKey;

        // Ignore FF silliness of catching non-printable keys in the keypress
        // events (enter, backspace, tab, delete, etc.). Luckily, FF sets the
        // `charCode` of these to 0, which makes them detectable without crazy
        // `keyCode` dances.
        var isNotPrintable = event.charCode === 0;

        // This is for Chrome. Enter is the only non-printable key it catches in
        // `keypress` event, but unlike FF, it does not set the `charCode` to 0, so
        // we have to examine the `keyCode` here.
        var isEnterKey = event.keyCode === 13;

        return isModified || isEnterKey || isNotPrintable;
      },

      hasSeparator: Ember.computed('value', function() {
        return SEPARATOR.test(this.get('value'));
      }),

      // If there is no separator yet, we can always type a separator,
      // otherwise we need to check the selection.
      //
      // If the current selection contains a separator, we can type one
      // because we'll overwrite the existing one. But if it doesn't we
      // can't, because multiple separators (e.g. `1.2.3`) is NaNsensical.
      canTypeSeparator: function() {
        return !this.get('hasSeparator') || SEPARATOR.test(this.selectedText());
      },

      atFullPrecision: Ember.computed('value', 'hasSeparator', function() {
        if (!this.get('hasSeparator')) { return false; }
        var fraction = this.get('value').split(SEPARATOR)[1];
        return fraction.length >= 2;
      }),

      selectedText: function() {
        var el = this.get('element');
        return this.get('value').substring(el.selectionStart, el.selectionEnd);
      },

      nothingSelected: function() {
        var el = this.get('element');
        return el.selectionStart === el.selectionEnd;
      },

      isAfterTheSeparator: function() {
        var value = this.get('value');
        var decimal = value.match(/^\d*/)[0];
        var el = this.get('element');
        return el.selectionStart > decimal.length;
      }
    });


    return DecimalInput;
  });
define("forecast/components/deferred-row",
  ["forecast/utils/dom","forecast/mixin/deferred-setup"],
  function(__dependency1__, DeferredSetup) {
    "use strict";
    var verticallyOnScreen = __dependency1__.verticallyOnScreen;

    var $win = $(window);

    var DeferredRow = Ember.Component.extend(DeferredSetup, {
      recheckWhen: null,

      recheckWhenObserver: function() {
        if (this.get('isSetup')) { return; }
        Ember.run.scheduleOnce('afterRender', this, 'resolveSetupIfOnScreen');
      }.observes('recheckWhen'),

      registerSetup: function() {
        if (this.resolveSetupIfOnScreen()) { return; }

        this.scroll = 'scroll.' + Ember.guidFor(this);

        $win.on(this.scroll, function() {
          this.debounce = Ember.run.debounce(this, 'resolveSetupIfOnScreen', 200);
        }.bind(this));
      }.on('didInsertElement'),

      isOnScreen: function() {
        return this.element ? verticallyOnScreen(this.$()[0]) : false;
      },

      resolveSetupIfOnScreen: function() {
        if (this.isOnScreen()) {
          this.unbind();
          this.resolveSetup();
          return true;
        }
        return false;
      },

      unbind: function() {
        if (this.debounce) { Ember.run.cancel(this.debounce); this.debounce = null; }
        if (this.scroll)   { $win.off(this.scroll);           this.scroll = null; }
      }.on('willDestroyElement')
    });


    return DeferredRow;
  });
define("forecast/components/drop-down",
  ["forecast/mixin/background-click"],
  function(BackgroundClick) {
    "use strict";

    var DropDownComponent = Ember.Component.extend(BackgroundClick, {
      classNames: ['dropdown-button'],
      classNameBindings: ['isShowing'],
      isShowing: false,

      actions: {
        toggleDropdown: function() {
          this.toggleProperty('isShowing');
        }
      },

      click: function(evt) {
        if ($(evt.target).closest(this.$('.dropdown a')).length > 0) {
          this.set('isShowing', false);
        }
      },

      backgroundClicked: function() {
        this.set('isShowing', false);
      },

      dropdownStyle: function() {
        if (!this.get('isShowing')) {
          return new Ember.Handlebars.SafeString('');
        }
        var $button         = this.$('.dropdown-link'),
            $dropdown       = this.$('.dropdown'),
            top             = $button.offset().top,
            left            = $button.offset().left,
            buttonHeight    = $button.outerHeight(),
            dropdownHeight  = $dropdown.outerHeight(),
            dropdownWidth   = $dropdown.outerWidth(),
            leftAligned     = (this.get('alignment') === 'left'),
            leftOffset      = leftAligned ? -1 : ($button.outerWidth()/2) - ($dropdown.outerWidth()/2),
            windowWidth     = window.innerWidth,
            rightEdgeCutoff = ($button[0].getBoundingClientRect().left + leftOffset + dropdownWidth) - windowWidth,
            leftEdgeCutoff  = ($button[0].getBoundingClientRect().left + leftOffset);

        if (leftEdgeCutoff < 0) {
          leftOffset -= leftEdgeCutoff;
        } else if (rightEdgeCutoff > 0) {
          leftOffset -= rightEdgeCutoff;
        }

        var style = 'top: %@px; left: %@px;'.fmt(buttonHeight, leftOffset);
        return new Ember.Handlebars.SafeString(style);
      }.property('isShowing')

    });



    return DropDownComponent;
  });
define("forecast/components/external-link",
  [],
  function() {
    "use strict";
    var ExternalLink = Ember.Component.extend({
      attributeBindings: ['href', 'rel', 'target'],
      href: '',
      rel: 'noreferrer',
      tagName: 'a',
      target: '_blank'
    });


    return ExternalLink;
  });
define("forecast/components/fc-divider",
  ["forecast/components/fc-option"],
  function(FcOption) {
    "use strict";

    var FcPrompt = FcOption.extend({
      'data-fc-type': 'fc-divider',
      label: '---------------'
    });


    return FcPrompt;
  });
define("forecast/components/fc-grouped-select",
  ["forecast/components/fc-select"],
  function(FcSelect) {
    "use strict";

    function getForSelect(obj, key) {
      return key === '.' ? obj : Ember.get(obj, key);
    }

    function str(obj) {
      return Ember.isNone(obj) ? '' : obj.toString();
    }


    var FcGroupedSelect = FcSelect.extend({
      sortBy: null,
      groupBy: null,

      groups: function() {
        var valueKey = this.get('valueKey');
        var labelKey = this.get('labelKey');
        var selected = this.get('_selectedItem');

        var groups = this.arrange(this.get('from'),
                                  this.get('sortBy'),
                                  this.get('groupBy'));

        return groups.map(function(group) {
          var groupOptions = group.items.map(function(item) {
            var value = str(getForSelect(item, valueKey));
            var label = getForSelect(item, labelKey);
            var isSelected = item === selected;
            return { value: value, label: label, isSelected: isSelected };
          });
          return {
            label: group.label,
            options: groupOptions
          };
        });
      }.property(
        'from.[]',
        '_selectedItem',
        'sortBy',
        'groupBy'
      ),

      arrange: function(items, sortBy, groupBy) {
        var sortedItems = items.sortBy.apply(items, sortBy);
        var currentGroup = null;

        return sortedItems.reduce(function(groups, item) {
          var groupLabel = item.get(groupBy);

          if (!currentGroup || groupLabel !== currentGroup.label) {
            currentGroup = { label: groupLabel, items: [] };
            groups.push(currentGroup);
          }

          currentGroup.items.push(item);
          return groups;
        }, []);
      }
    });


    return FcGroupedSelect;
  });
define("forecast/components/fc-option",
  [],
  function() {
    "use strict";
    var FcOption = Ember.Component.extend({
      tagName: 'option',
      attributeBindings: ['action', 'value', 'data-fc-type'],
      'data-fc-type': 'fc-option'
    });


    return FcOption;
  });
define("forecast/components/fc-prompt",
  ["forecast/components/fc-option"],
  function(FcOption) {
    "use strict";

    var FcPrompt = FcOption.extend({
      'data-fc-type': 'fc-prompt'
    });


    return FcPrompt;
  });
define("forecast/components/fc-select",
  ["forecast/mixin/deferred-setup"],
  function(DeferredSetup) {
    "use strict";

    function getForSelect(obj, key) {
      return key === '.' ? obj : Ember.get(obj, key);
    }

    function str(obj) {
      return Ember.isNone(obj) ? '' : obj.toString();
    }

    var FcSelect = Ember.Component.extend(DeferredSetup, {
      tagName: 'select',
      deferred: false,

      registerSetup: function() {
        if (this.get('deferred')) {
          this._super();
        } else {
          this.resolveSetup();
        }
      }.on('didInsertElement'),

      from: [],
      selectedValue: null,
      selected: null,
      valueKey: '.',
      labelKey: '.',
      resetToPrompt: false,

      options: function() {
        var valueKey = this.get('valueKey');
        var labelKey = this.get('labelKey');
        var selected = this.get('_selectedItem');

        return this.get('from').map(function(item) {
          var value = str(getForSelect(item, valueKey));
          var label = getForSelect(item, labelKey);
          var isSelected = item === selected;
          return { value: value, label: label, isSelected: isSelected };
        });
      }.property(
        'from.[]',
        '_selectedItem'
      ),

      _selectedItem: function() {
        var valueKey = this.get('valueKey');
        var selected = this.get('selected');

        // Allow for setting of the selected from from a selectedValue binding.
        if (selected === null) {
          var selectedValueStr = str(this.get('selectedValue'));
          selected = this.get('from').find(function(item) {
            return str(getForSelect(item, valueKey)) === selectedValueStr;
          });
        }

        return selected;
      }.property(
        'selected',
        'selectedValue'
      ),

      getSelectedOption: function() {
        return this.$().find(':selected')[0];
      },

      selectPrompt: function() {
        var option = this.$('option[data-fc-type=fc-prompt]');
        if (!option.length) {
          option = $('option[data-fc-type=fc-option]').eq(0);
        }
        option.prop('selected', 'selected');
        Ember.run.next(this, function() { this.$().trigger('change'); });
      },

      change: function(event) {
        var element = $(event.target);
        var type = element.find(':selected').attr('data-fc-type');

        switch (type) {
          case 'fc-prompt':
            return;
          case 'fc-divider':
            this.selectPrompt();
            break;
          case 'fc-option':
            var option = this.getSelectedOption();
            var action = $(option).attr('action');
            this.sendAction(action);
            break;
          default:
            var value = element.val();
            var valueKey = this.get('valueKey');
            var selected = this.get('from').find(function(item) {
              return str(getForSelect(item, valueKey)) === value;
            });

            this.sendAction('onchange', selected);
        }

        if (this.get('resetToPrompt')) {
          this.selectPrompt();
        }
      }
    });


    return FcSelect;
  });
define("forecast/components/flash-notification",
  [],
  function() {
    "use strict";
    // In milliseconds
    var FADEOUT_DELAY      = 5000,
        ANIMATION_DURATION = 500;

    var FlashNotificationComponent = Ember.Component.extend({
      tagName: 'li',
      classNameBindings: ['notification.type', ':hide-from-fullstory'],
      text: Ember.computed.alias('notification.text'),

      _lifecycle: null,
      _animation: null,

      setFadeoutDelay: function() {
        var self = this;
        this._lifecycle = window.setTimeout(function() {
          self.$().addClass('animate-out');
          self._animation = setTimeout(function() {
            Ember.run(self, 'sendAction', 'fadedOut', self.get('notification'));
          }, ANIMATION_DURATION);
        }, FADEOUT_DELAY);
      }.on('didInsertElement'),

      removeFadeoutDelay: function() {
        window.clearTimeout(this._lifecycle);
        window.clearTimeout(this._animation);
      }.on('willDestroyElement')
    });


    return FlashNotificationComponent;
  });
define("forecast/components/form-field",
  [],
  function() {
    "use strict";
    var FormFieldComponent = Ember.Component.extend({
      classNames: ['field'],

      model: Ember.computed.alias('of'),
      attribute: Ember.computed.alias('for'),
      validateOnBlur: true,
      errorFlag: null,
      value: null,

      setDynamicCPs: function() {
        var errorFlagPath = 'model.validationErrors.' + this.get('attribute') + '.messages.firstObject';
        Ember.defineProperty(this, 'errorFlag', Ember.computed.alias(errorFlagPath));

        if(!this.get('validateOnBlur')) {
          var valuePath = 'model.' + this.get('attribute');
          Ember.addObserver(this, valuePath, this, 'clearErrors');
        }
      }.on('init'),

      focusOut: function() {
        if(this.get('validateOnBlur')) {
          this.validateField();
        }
      },

      validateField: function() {
        this.get('model').validateProperty(this.get('attribute'));
      },

      clearErrors: function() {
        this.get('model.validationErrors').remove(this.get('attribute'));
      },

      formattedLabel: function() {
        var formatted = '';
        if(Ember.isNone(this.get('label'))) {
          formatted = this.get('attribute');
        } else {
          formatted = this.get('label');
        }
        return formatted.capitalize();
      }.property('attribute', 'label')

    });



    return FormFieldComponent;
  });
define("forecast/components/list-select",
  [],
  function() {
    "use strict";
    var ListSelectComponent = Ember.Component.extend({
      classNames: ['list-select'],
      selection: null,

      actions: {
        clickItem: function(item) {
          if(item.default) {
            this.set('selection', null);
          } else {
            this.set('selection', item.name);
          }
        }
      }
    });



    return ListSelectComponent;
  });
define("forecast/components/mile-stone",
  ["forecast/utils/date"],
  function(__dependency1__) {
    "use strict";
    var numberOfWorkDays = __dependency1__.numberOfWorkDays;
    var shift = __dependency1__.shift;

    var MileStoneComponent = Ember.Component.extend({
      attributeBindings: ['style'],
      classNameBindings: ['isActive'],
      classNames:        ['milestone'],

      style: function() {
        var style = 'left:'  + this.get('left')  + 'px;';
        return new Ember.Handlebars.SafeString(style);
      }.property('left'),

      gtm: Ember.inject.service('google-tag-manager'),

      // Bindings
      milestone:         null,
      dayWidth:          null,
      timelineStartDate: null,

      editable: Ember.computed.bool('realtime.isAdmin'),

      isActive: Ember.computed('activeMilestone', 'milestone', function() {
        return this.get('activeMilestone') === this.get('milestone');
      }),

      watchEditable: function() {
        if (this._state !== 'inDOM') { return; }

        if (this.get('editable')) {
          this.setupDrag();
        } else {
          this.teardownDrag();
        }
      }.observes('editable'),

      left: function() {
        var date     = this.get('milestone.date'),
            timeline = this.get('timelineStartDate');
        return numberOfWorkDays(timeline, date) * this.get('dayWidth');
      }.property('dayWidth', 'milestone.date', 'timelineStartDate'),

      didInsertElement: function() {
        if (!this.get('editable')) { return; }
        this.setupDrag();
      },

      willDestroyElement: function() {
        if (this.get('editable')) {
          this.teardownDrag();
        }
      },

      click: function() {
        if (this.get('editable')) {
          this.sendAction('clickPress', this.get('milestone'));
        }
      },

      dayWidthObserver: function() {
        if (!this.get('editable')) { return; }
        this.$().draggable('option', 'grid', [this.get('dayWidth'), 0]);
      }.observes('dayWidth'),

      setupDrag: function() {
        this.$().draggable({
          axis: 'x',
          grid: [this.get('dayWidth'), 0],
          start: Ember.run.bind(this, function(evt, ui) {
            this.$().addClass('is-active');
          }),
          stop: Ember.run.bind(this, function(evt, ui) {
            this.$().removeClass('is-active');
            var dayWidth = this.get('dayWidth');
            var delta = (ui.position.left - ui.originalPosition.left) / dayWidth;
            var milestone = this.get('milestone');
            if(delta) {
              milestone.set('date', shift(milestone.get('date'), delta));
              this.sendAction('moved', milestone);
              this.get('gtm').sendGAEvent('milestone', 'drag', null, Math.round(delta));
            }
            this.$().draggable('destroy');
            this.setupDrag();
          })
        });
      },

      teardownDrag: function() {
        this.$().draggable('destroy');
      }
    });


    return MileStoneComponent;
  });
define("forecast/components/milestone-overlay",
  ["forecast/components/timeline-overlay"],
  function(TimelineOverlayComponent) {
    "use strict";

    var MilestoneOverlayComponent = TimelineOverlayComponent.extend({
      attributeBindings: ['title'],

      isHidden: function() {
        var date, overlap;
        if(!this.get('isHovering')) {
          return true;
        }
        date = this.get('currentDate');
        overlap = this.get('blockedTimeframes').find(function(timeframe) {
          return date.isSame(timeframe.get('date'));
        });
        return !!overlap;
      }.property(
        'currentDate',
        'isHovering',
        'blockedTimeframes.@each.date'
      ),

      click: function() {
        this.sendAction('clickPress', this.get('currentDate'));
      }
    });


    return MilestoneOverlayComponent;
  });
define("forecast/components/modal-overlay",
  [],
  function() {
    "use strict";
    var ModalOverlayComponent = Ember.Component.extend({
      classNames: ['modal-overlay'],

      attributeBindings: ['tabindex'],
      tabindex: 0,

      suppressAutofocus: false,

      keyDown: function(event) {
        if(event.keyCode === 27) { // esc key
          this.sendAction('close');
        }
      },

      focusFormElementOrModal: function() {
        var elementToFocus = this.modalRootElement();

        if (!this.get('suppressAutofocus')) {
          elementToFocus = this.autofocusedElement()
            || this.focusableInputElement()
            || elementToFocus;
        }

        elementToFocus.focus();
      }.on('didInsertElement'),

      autofocusedElement: function() {
        return this.$('[autofocus]')
                      .not(':disabled, :hidden')
                      .get(0);
      },

      focusableInputElement: function() {
        return this.$('input, textarea, select, button')
                      .not(':disabled, :hidden')
                      .get(0);
      },

      modalRootElement: function() {
        return this.$('.modal').get(0);
      }
    });


    return ModalOverlayComponent;
  });
define("forecast/components/person-info",
  [],
  function() {
    "use strict";
    var PersonInfo = Ember.Component.extend({
      classNames: ['row-info', 'hide-from-fullstory'],

      click: function() {
        this.get('onExpand')();
      }
    });


    return PersonInfo;
  });
define("forecast/components/person-project-timeline",
  [],
  function() {
    "use strict";
    var PersonProjectTimeline = Ember.Component.extend({
      classNames: ['row-timeline']
    });


    return PersonProjectTimeline;
  });
define("forecast/components/person-project",
  ["forecast/utils/array","forecast/components/deferred-row"],
  function(__dependency1__, DeferredRow) {
    "use strict";
    var intersect = __dependency1__.intersect;

    var PersonProjectComponent = DeferredRow.extend({
      classNameBindings: [':content-child-row'],
      layoutName: 'components/person-project',

      person: null,
      project: null,
      account: null,
      activeAssignmentController: null,
      dayWidth: null,
      startDate: null,
      rowHeaderWidth: null,

      schedProps: Ember.computed('dayWidth', 'startDate', 'rowHeaderWidth', function() {
        return this.getProperties('dayWidth', 'startDate', 'rowHeaderWidth');
      }),

      assignments: Ember.computed('project.assignments.[]', 'person.assignments.[]', function() {
        return intersect(this.get('project.assignments'), this.get('person.assignments'));
      }),

      assignmentsWithCWTO: Ember.computed.union(
        'assignments',
        'person.cwtoAssignments'
      )
    });


    return PersonProjectComponent;
  });
define("forecast/components/person-timeline",
  [],
  function() {
    "use strict";
    function allocatedDaysMatch(day1, day2) {
      return day1.allocation === day2.allocation && day1.isTimeOff === day2.isTimeOff;
    }

    var PersonTimelineComponent = Ember.Component.extend({
      classNames: ['row-timeline'],

      allocatedFrames: function() {
        var frames        = Em.A(),
            current_day   = this.get('startDate').clone().subtract(1, 'week'),
            last_day      = this.get('endDate').clone().add(1, 'week'),
            current_frame = null,
            previous_day  = null,
            days          = this.get('person').allocatedDays(current_day, last_day),
            isAllocated;

        days.forEach(function(day) {
          isAllocated = day.allocation || day.isTimeOff;
          if (current_frame && isAllocated && allocatedDaysMatch(day, previous_day)) {
            current_frame.end_date.add(1, 'day');
          } else if (isAllocated) {
            current_frame = frames.pushObject({
              start_date: current_day.clone(),
              end_date:   current_day.clone(),
              allocation: day.allocation,
              isTimeOff:  day.isTimeOff
            });
          }
          previous_day = day;
          current_day.add(1, 'day');
        });
        return frames;
      }.property(
        'person.assignments.@each.start_date',
        'person.assignments.@each.end_date',
        'person.assignments.@each.allocation'
      )
    });



    return PersonTimelineComponent;
  });
define("forecast/components/pressed-button",
  ["forecast/components/control-button"],
  function(ControlButtonComponent) {
    "use strict";

    var PressedButtonComponent = ControlButtonComponent.extend({
      classNames: ['pressed-button'],
      classNameBindings: ['isPressed:is-active'],
      isPressed: false,

      click: function(event) {
        this.toggleProperty('isPressed');
        this.sendAction('action', this.get('isPressed'));
        this.afterClick(event);
      }
    });


    return PressedButtonComponent;
  });
define("forecast/components/project-drawer",
  [],
  function() {
    "use strict";
    var ProjectDrawer = Ember.Component.extend({
      classNames: ['row-drawer'],

      showHarvestLink: Ember.computed.and(
        'realtime.isAdmin',
        'realtime.currentUser.isLinkedToHarvest'
      ),

      showRemainingBudget: Ember.computed.and(
        'project.isLinkedToHarvest',
        'project.remaining_budget'
      )
    });


    return ProjectDrawer;
  });
define("forecast/components/project-info",
  [],
  function() {
    "use strict";
    var ProjectInfo = Ember.Component.extend({
      classNames: ['row-info'],

      click: function() {
        this.get('onExpand')();
      }
    });


    return ProjectInfo;
  });
define("forecast/components/project-person-timeline",
  [],
  function() {
    "use strict";
    var ProjectPersonTimeline = Ember.Component.extend({
      classNames: ['row-timeline']
    });


    return ProjectPersonTimeline;
  });
define("forecast/components/project-person",
  ["forecast/utils/array","forecast/components/deferred-row"],
  function(__dependency1__, DeferredRow) {
    "use strict";
    var intersect = __dependency1__.intersect;

    var ProjectPersonComponent = DeferredRow.extend({
      classNameBindings: [':content-child-row'],
      layoutName: 'components/project-person',

      project: null,
      person: null,
      activeAssignment: null,
      dayWidth: null,
      startDate: null,
      rowHeaderWidth: null,
      showDrawer: null,

      schedProps: Ember.computed('dayWidth', 'startDate', 'rowHeaderWidth', 'showDrawer', function() {
        return this.getProperties('dayWidth', 'startDate', 'rowHeaderWidth', 'showDrawer');
      }),

      personProjectAssignments: Ember.computed('project.assignments.[]', 'person.assignments.[]', function() {
        return intersect(this.get('project.assignments'), this.get('person.assignments'));
      }),

      cwtoAssignments: Ember.computed.filterBy('project.assignments', 'isCWTO'),

      assignments: function() {
        return (this.get('project.isTimeOff') && this.get('person') === null)
          ? this.get('cwtoAssignments')
          : this.get('personProjectAssignments');
      }.property(
        'project.isTimeOff',
        'person',
        'cwtoAssignments.[]',
        'personProjectAssignments.[]'
      ),

      assignmentsWithTimeOff: Ember.computed.union(
        'assignments',
        'person.timeOffAssignmentsWithCWTO'
      ),

      future_scheduled_hours: function() {
        var person = this.get('person.id'),
            hours  = this.get('project.future_scheduled_hours').findBy('person_id', person);
        return hours ? hours.allocation : 0;
      }.property('project.future_scheduled_hours', 'person.id')
    });



    return ProjectPersonComponent;
  });
define("forecast/components/project-timeline",
  ["forecast/utils/date"],
  function(__dependency1__) {
    "use strict";
    var isWithinRange = __dependency1__.isWithinRange;
    var latestOf = __dependency1__.latestOf;
    var earliestOf = __dependency1__.earliestOf;

    var ProjectTimelineComponent = Ember.Component.extend({
      classNames: ['row-timeline'],

      assignedDays: function() {
        var start       = this.get('startDate').clone().subtract(1, 'week'),
            end         = this.get('endDate').clone().add(1, 'week'),
            assignments = this.get('project.assignments').slice(0),
            frames      = Em.A(),
            current_day = start.clone(),
            current_frame,
            assignment,
            day_in_assignment = function(assignment, i) {
              return isWithinRange(current_day, assignment.get('start_date'), assignment.get('end_date'));
            };

        while (!current_day.isSame(end, 'day')) {
          // find first assignment that includes the current day
          assignment = assignments.find(day_in_assignment);

          // in case this day is not in any assignment, move on and end any possible timeframe
          if (!assignment) {
            current_frame = null;
            current_day.add(1, 'day');
            continue;
          }

          // otherwise set the day to the assignment's end and create/update the timeframe
          assignments.removeObject(assignment);
          current_day = earliestOf(assignment.get('end_date'), end).clone();

          if (!current_frame) {
            current_frame = frames.pushObject({
              start_date: latestOf(assignment.get('start_date'), start).clone()
            });
          }

          current_frame.end_date = current_day.clone();
        }

        return frames;
      }.property(
        'project.assignments.@each.start_date',
        'project.assignments.@each.end_date'
      )
    });


    return ProjectTimelineComponent;
  });
define("forecast/components/radio-button",
  [],
  function() {
    "use strict";
    var RadioButtonComponent = Ember.Component.extend({
      tagName: 'input',
      type: 'radio',
      attributeBindings: ['type', 'name', 'checked'],

      selection: null,
      value: null,

      checked: function() {
        return this.get('selection') === this.get('value');
      }.property('selection', 'value'),

      click: function() {
        this.set('selection', this.get('value'));
      }
    });


    return RadioButtonComponent;
  });
define("forecast/components/range-day",
  ["forecast/utils/event"],
  function(__dependency1__) {
    "use strict";
    var cancelEvent = __dependency1__.cancelEvent;

    var RangeDay = Ember.Component.extend({
      day: null,
      selector: null,
      tagName: 'td',
      isHovering: false,

      classNameBindings: [
        'isMaybeStart', 'isMaybeEnd',
        'day.isStart', 'day.isEnd',
        'day.isNotInMonth', 'day.isInRange', 'day.isDisabled', 'day.isToday'
      ],

      isMaybeStart: Ember.computed.and('isHovering', 'day.isMaybeStart'),
      isMaybeEnd:   Ember.computed.and('isHovering', 'day.isMaybeEnd'),

      mouseDown: function(event) {
        cancelEvent(event);
      },

      click: function(event) {
        cancelEvent(event);
        this.sendAction('setDate', this.get('day'));
      },

      mouseEnter: function(event) {
        this.set('isHovering', true);
        this.sendAction('setMaybeDate', this.get('day'));
      },

      mouseLeave: function(event) {
        this.set('isHovering', false);
        this.sendAction('resetMaybeDate');
      }
    });



    return RangeDay;
  });
define("forecast/components/range-select",
  ["forecast/utils/date","forecast/utils/event","forecast/utils/computed"],
  function(__dependency1__, __dependency2__, __dependency3__) {
    "use strict";
    var isWithinRange = __dependency1__.isWithinRange;
    var makeDate = __dependency1__.makeDate;
    var noModifiers = __dependency2__.noModifiers;
    var isArrow = __dependency2__.isArrow;
    var isAlphaNum = __dependency2__.isAlphaNum;
    var cancelEvent = __dependency2__.cancelEvent;
    var fcOneWay = __dependency3__.fcOneWay;

    function format(dateKey, fmtString) {
      return Ember.computed(dateKey, function() {
        return this.get(dateKey).format(fmtString);
      });
    }

    function swap(obj, key1, key2) {
      var val1 = obj.get(key1),
          val2 = obj.get(key2);
      obj.set(key1, val2);
      obj.set(key2, val1);
    }

    var Day = Ember.Object.extend({
      day: null,
      month: null,
      range: null,
      isDisabled: false,

      date: function() {
        return this.get('day').date();
      }.property('day'),

      isToday: function() {
        return makeDate().isSame(this.get('day'), 'day');
      }.property('day'),

      isNotInMonth: function() {
        return this.get('day').month() !== this.get('month');
      }.property('day', 'month'),

      isStart: function() {
        var day   = this.get('day'),
            start = this.get('range.start');
        return day && start && day.isSame(start, 'day');
      }.property('day', 'range.start'),

      isEnd: function() {
        var day = this.get('day'),
            end = this.get('range.end');
        return day && end && day.isSame(end, 'day');
      }.property('day', 'range.end'),

      isMaybeStart: function() {
        var day   = this.get('day'),
            maybe = this.get('range.maybeStart');
        return day && maybe && day.isSame(maybe, 'day');
      }.property('day', 'range.maybeStart'),

      isMaybeEnd: function() {
        var day   = this.get('day'),
            maybe = this.get('range.maybeEnd');
        return day && maybe && day.isSame(maybe, 'day');
      }.property('day', 'range.maybeEnd'),

      isInRange: function() {
        var day   = this.get('day'),
            start = this.get('range.maybeStart'),
            end   = this.get('range.maybeEnd');
        return isWithinRange(day, start, end, true);
      }.property('day', 'range.maybeStart', 'range.maybeEnd'),
    });

    var RangeSelectComponent = Ember.Component.extend({
      isOpen: false,
      isFocused: false,
      which: 'start',

      whichMonth: function() {
        return '%@Month'.fmt(this.get('which'));
      }.property('which'),

      isSelectingStart: function() {
        return this.get('isFocused') && this.get('which') === 'start';
      }.property('isFocused', 'which'),

      isSelectingEnd: function() {
        return this.get('isFocused') && this.get('which') === 'end';
      }.property('isFocused', 'which'),

      start: function() { return makeDate(); }.property(),
      end:   function() { return makeDate(); }.property(),

      startMonth: fcOneWay('start'),
      endMonth:   fcOneWay('end'),

      maybeStart: fcOneWay('start'),
      maybeEnd:   fcOneWay('end'),

      startDisplay: format('start', 'D MMM YYYY'),
      endDisplay:   format('end', 'D MMM YYYY'),

      monthDisplay: function() {
        var whichMonth = this.get('whichMonth');
        return this.get(whichMonth).format('MMM YYYY');
      }.property('whichMonth', 'startMonth', 'endMonth'),

      headerDays: 'MTWTF'.split(''),

      weeks: function() {
        var whichMonth = this.get('whichMonth'),
            day   = this.get(whichMonth).clone().startOf('month'),
            last  = makeDate(day.clone().endOf('month')),
            month = day.month(),
            weeks = [],
            week,
            i;

        day  = makeDate(day.startOf('isoWeek'));
        last = makeDate(last.endOf('isoWeek'));

        while (!day.isAfter(last, 'day')) {
          week = [];
          for (i = 0; i < 7; i++) {
            if (day.day() % 6) {
              week.push(this.makeDay(day, month));
            }
            day = day.clone().add(1, 'day');
          }
          weeks.push(week);
        }

        return weeks;
      }.property('whichMonth', 'startMonth', 'endMonth'),

      shouldDisable: function(day, month) {
        var isWeekend  = day.day() % 6 === 0;
        return isWeekend;
      },

      makeDay: function(day, month) {
        return Day.create({
          day: day,
          month: month,
          range: this,
          isDisabled: this.shouldDisable(day)
        });
      },

      focusIn: function() {
        this.set('isFocused', true);
        this.set('isOpen', true);
      },

      focusOut: function() {
        this.setProperties({
          isFocused: false,
          isOpen: false
        });
      },

      keyDown: function(event) {
        var key = event.which,
            isOpen = this.get('isOpen');

        if (key === 27 && isOpen) {
          cancelEvent(event);
          this.set('isOpen', false);
        }

        if (key === 9) {
          this.handleTab(event);
        }

        if (noModifiers(event) && (isArrow(key) || isAlphaNum(key)) && !isOpen) {
          cancelEvent(event);
          this.set('isOpen', true);
        }
      },

      handleTab: function(event) {
        if (this.get('isSelectingStart') && !event.shiftKey) {
          cancelEvent(event);
          this.set('which', 'end');
        }

        if (this.get('isSelectingEnd') && event.shiftKey) {
          cancelEvent(event);
          this.set('which', 'start');
        }
      },

      close: function() {
        this.set('isOpen', false);
      },

      setStarts: function(day) {
        day = day.clone();
        this.setProperties({
          start: day,
          maybeStart: day,
          startMonth: day
        });
      },

      setEnds: function(day) {
        day = day.clone();
        this.setProperties({
          end: day,
          maybeEnd: day,
          endMonth: day
        });
      },

      flipRange: function() {
        swap(this, 'start', 'end');
      },

      setStartDate: function(day) {
        this.setStarts(day);
        if (day.isAfter(this.get('end'), 'day')) {
          this.setEnds(day);
        }
        this.set('which', 'end');
      },

      setEndDate: function(day) {
        this.setEnds(day);
        if (day.isBefore(this.get('start'), 'day')) {
          this.flipRange();
          return;
        }
        this.close();
      },

      setMaybeStartDate: function(day) {
        this.set('maybeStart', day.clone());
      },

      setMaybeEndDate: function(day) {
        this.set('maybeEnd', day.clone());
      },

      actions: {
        openStart: function() {
          this.setProperties({ which: 'start', isOpen: true });
        },

        openEnd: function() {
          this.setProperties({ which: 'end', isOpen: true });
        },

        prevMonth: function() {
          var whichMonth = this.get('whichMonth'),
              date       = this.get(whichMonth).clone();
          date.subtract(1, 'month');
          this.set(whichMonth, date);
        },

        nextMonth: function() {
          var whichMonth = this.get('whichMonth'),
              date       = this.get(whichMonth).clone();
          date.add(1, 'month');
          this.set(whichMonth, date);
        },

        thisMonth: function() {
          this.set(this.get('whichMonth'), makeDate());
        },

        setDate: function(day) {
          if (day.get('isDisabled')) { return; }
          var setter = this.get('which') === 'start' ? 'setStartDate' : 'setEndDate';
          this[setter](day.get('day'));
        },

        setMaybeDate: function(day) {
          if (day.get('isDisabled')) { return; }
          var set = this.get('which') === 'start' ? 'setMaybeStartDate' : 'setMaybeEndDate';
          this[set](day.get('day'));
        },

        resetMaybeDate: function() {
          switch(this.get('which')) {
            case 'start': this.set('maybeStart', this.get('start')); break;
            case 'end': this.set('maybeEnd', this.get('end')); break;
          }
        }
      }
    });



    return RangeSelectComponent;
  });
define("forecast/components/remaining-budget",
  [],
  function() {
    "use strict";
    var RemainingBudgetComponent = Ember.Component.extend({
      tagName: 'span',
      classNameBindings: [':remaining-budget', 'class'],

      showHarvestLink: null,
      harvestLink: null,
      budget: null,

      hours: function() {
        if (this.get('budget.is_error')) {
          return '…';
        }
        var type  = this.get('budget.budget_by'),
            hours = this.get('budget.hours');
        switch (type) {
          // TODO: once Manage > Projects is all phased out, remove the empty check
          case 'project':
          case 'task':
          case 'person':       return hours ? hours.toFixed(2) : '';
          case 'project_cost': return 'N/A';
          case 'loading':      return '…';
          default:             return '—';
        }
      }.property('budget'),

      class: function() {
        if (this.get('budget.is_error')) {
          return '';
        }
        var type  = this.get('budget.budget_by'),
            hours = this.get('budget.hours');
        switch (type) {
          case 'project':
          case 'task':
          case 'person':       return hours < 0 ? 'over-budget' : '';
          case 'project_cost': return 'not-applicable';
          case 'loading':      return '';
          default:             return 'not-applicable';
        }
      }.property('budget'),

      tooltip: function() {
        if (this.get('budget.is_error')) {
          return 'Forecast could not get the budget information from Harvest. Try reloading your browser…';
        }
        var type = this.get('budget.budget_by');
        switch (type) {
          case 'project':
          case 'task':
          case 'person':       return 'Budget remaining in ' + type + ' hours from Harvest';
          case 'project_cost': return 'This project is budgeted by fees in Harvest. Budgeted hours are not available.';
          case 'loading':      return 'Loading budget remaining from Harvest…';
          default:             return 'No budget set in Harvest';
        }
      }.property('budget')
    });


    return RemainingBudgetComponent;
  });
define("forecast/components/row-viewport",
  [],
  function() {
    "use strict";
    var ScheduleRowViewportComponent = Ember.Component.extend({
      classNames: ['row-viewport']
    });


    return ScheduleRowViewportComponent;
  });
define("forecast/components/schedule-container",
  [],
  function() {
    "use strict";
    var $win = $(window);

    var ScheduleContainer = Ember.Component.extend({
      classNames: ['timeline-view'],
      classNameBindings: [
        'isDragging',
        'isResizing',
        'drawerOpen'
      ],

      isDragging: false,
      isResizing: false,

      didInsertElement: function() {
        var self = this;
        $win.on('resize.schedule', Ember.run.bind(this, 'sendAction', 'onWindowResize'));
        $win.on('dragstart.schedule', Ember.run.bind(this, 'set', 'isDragging', true));
        $win.on('dragstop.schedule', Ember.run.bind(this, 'set', 'isDragging', false));
        $win.on('resizestart.schedule', Ember.run.bind(this, 'set', 'isResizing', true));
        $win.on('resizestop.schedule', Ember.run.bind(this, 'set', 'isResizing', false));
      },
      willDestroyElement: function() {
        $win.off('.schedule');
      },
      willDestroy: function() {
        Ember.run.cancel(this.throttle);
      }
    });


    return ScheduleContainer;
  });
define("forecast/components/scroll-to-top",
  [],
  function() {
    "use strict";
    var ScrollToTopComponent = Ember.Component.extend({
      shouldScroll: false,

      didInsertElement: function() {
        if (this.get('shouldScroll')) {
          Ember.run.scheduleOnce('afterRender', this, 'scrollToTop');
        }
      },

      scrollToTop: function() {
        $('body').animate({
          scrollTop: this.$().offset().top - 185
        }, 300);
      }
    });



    return ScrollToTopComponent;
  });
define("forecast/components/select-person",
  [],
  function() {
    "use strict";
    var SelectPersonComponent = Ember.Component.extend(Ember.Validations, {
      actions: {
        submit: function() {
          if (!this.validate()) { return; }
          var person = this.get('selectedPerson');
          var isCwto = this.get('project.isTimeOff') && person.get('name') === 'Everyone';
          this.attrs.onPerson(isCwto ? null : person, isCwto);
        },

        cancel: function() {
          this.attrs.onCancel();
        }
      },

      validations: {
        selectedPerson: {
          presence: true
        }
      },

      selectedPerson: null,

      people: Ember.computed('sortedAvailablePeople.[]', 'project.isTimeOff', function() {
        var people = this.get('sortedAvailablePeople').toArray();
        if (this.get('project.isTimeOff')) {
          people.unshift(Ember.Object.create({ id: 'Everyone', name: 'Everyone' }));
        }
        return people;
      })
    });


    return SelectPersonComponent;
  });
define("forecast/components/select-project",
  [],
  function() {
    "use strict";
    var SelectProjectComponent = Ember.Component.extend(Ember.Validations, {
      actions: {
        submit: function() {
          if (!this.validate()) { return; }
          var project = this.get('selectedProject');
          this.attrs.onProject(project);
        },

        cancel: function() {
          this.attrs.onCancel();
        }
      },

      validations: {
        selectedProject: {
          presence: true
        }
      },

      selectedProject: null
    });


    return SelectProjectComponent;
  });
define("forecast/components/simple-button",
  [],
  function() {
    "use strict";
    var SimpleButtonComponent = Ember.Component.extend({
      tagName: 'button',
      classNameBindings: [':button', 'disabled:button-disabled'],
      attributeBindings: ['type', 'disabled', 'tabIndex', 'value'],
      type: 'button',
      name: null,
      value: null,
      disabled: false,
      tabIndex: 0,

      click: function(event) {
        event.preventDefault();
        this.sendAction('action');
      }
    });


    return SimpleButtonComponent;
  });
define("forecast/components/split-overlay",
  ["forecast/utils/date"],
  function(__dependency1__) {
    "use strict";
    var numberOfWorkDays = __dependency1__.numberOfWorkDays;
    var shift = __dependency1__.shift;
    var validate = __dependency1__.validate;

    var SplitOverlayComponent = Ember.Component.extend({
      attributeBindings: ['style', 'title'],
      classNameBindings: ['isHidden', 'isActive'],
      assignmentEl: null,
      splitDate: null,
      isActive: Ember.computed.bool('splitDate'),
      left: 0,

      setLeftWhenActive: function() {
        if(!this.get('isActive')) { return; }
        var delta = numberOfWorkDays(this.get('timelineStartDate'), this.get('splitDate'));
        this.set('left', this.get('dayWidth') * delta);
      }
      .observes('splitDate')
      .on('init'),

      currentDate: function() {
        var delta = this.get('left') / this.get('dayWidth');
        return shift(this.get('timelineStartDate'), delta);
      }.property('timelineStartDate', 'dayWidth', 'left'),

      isHidden: function() {
        var currentDate = this.get('currentDate');
        if (!validate(currentDate)) {
          return true;
        }
        return currentDate.isSame(shift(this.get('assignment.start_date'), 1));
      }.property('currentDate', 'assignment.start_date'),

      style: function() {
        var style = 'left: ' + this.get('left') + 'px;';
        return new Ember.Handlebars.SafeString(style);
      }.property('left'),

      didInsertElement: function() {
        this._super();
        var assignment = this.$().closest('.assignment');
        this.set('assignmentEl', assignment);
        assignment.on('mouseenter.split-overlay mousemove.split-overlay',
                      this.moveOverlay.bind(this));
      },

      willDestroyElement: function() {
        this.get('assignmentEl').off('.split-overlay');
      },

      moveOverlay: function(evt) {
        var x = evt ? evt.pageX : this.get('left');
        this.translateMouseXToGridColumn(x);
      },

      translateMouseXToGridColumn: function(mouseX) {
        Ember.run(this, function() {
          var dayWidth = this.get('dayWidth'),
              left = mouseX + dayWidth - this.get('assignmentEl').offset().left,
              mod  = (left + dayWidth/2) % dayWidth;
          this.set('left', (left - mod) - dayWidth / 2);
        });
      },

      click: function() {
        this.attrs.onClick(this.get('currentDate'));
        return false;
      }
    });


    return SplitOverlayComponent;
  });
define("forecast/components/stretchable-overlay",
  ["forecast/utils/date","forecast/components/timeline-overlay"],
  function(__dependency1__, TimelineOverlayComponent) {
    "use strict";
    var shift = __dependency1__.shift;

    var StretchableOverlayComponent = TimelineOverlayComponent.extend({
      attributeBindings: ['width'],
      classNameBindings: ['beingSelected'],

      width: null,
      beingSelected: false,
      isResizeSetup: false,

      setupResize: function() {
        var dayWidth = this.get('dayWidth');

        this.$().resizable({
          handles: 'e',
          grid: [dayWidth, 0],
          animate: false,
          start: Ember.run.bind(this, function(event, ui) {
            this.set('beingSelected', true);
          }),
          stop: Ember.run.bind(this, function(event, ui) {
            this.setProperties({
              width: ui.size.width,
              beingSelected: false
            });
            this.sendAction('onSelect', this.get('for'), this.get('startDate'), this.get('endDate'));
            Ember.run.next(this, function() {
              this.set('width', this.get('dayWidth'));
              this.moveOverlay(event);
            });
          })
        });
        this.set('isResizeSetup', true);
      }.on('didInsertElement'),

      dayWidthObserver: function() {
        if (!this.get('isResizeSetup')) { return; }
        this.$().resizable('option', 'grid', [this.get('dayWidth'), 0]);
      }.observes('dayWidth'),

      click: function() {
        this.sendAction('onSelect', this.get('for'), this.get('startDate'), this.get('startDate'));
      },

      teardownResize: function() {
        this.$().resizable('destroy');
      }.on('willDestroyElement'),

      startDate: function() {
        var delta = this.get('left') / this.get('dayWidth');
        return shift(this.get('timelineStartDate'), delta);
      }.property('timelineStartDate', 'dayWidth', 'left'),

      endDate: function() {
        var duration = this.get('width') / this.get('dayWidth');
        return shift(this.get('startDate'), duration - 1);
      }.property('startDate'),

      moveOverlay: function(event) {
        if (this.get('beingSelected')) { return; }
        this.set('width', this.get('dayWidth'));
        this._super(event);
      },

      style: function() {
        var left = this.get('left');
        var width = this.get('width') || this.get('dayWidth');
        var style = 'left: %@px; width: %@px;'.fmt(left, width);
        return new Ember.Handlebars.SafeString(style);
      }.property('left', 'width')
    });


    return StretchableOverlayComponent;
  });
define("forecast/components/tags-input",
  ["forecast/utils/event"],
  function(__dependency1__) {
    "use strict";
    var cancelEvent = __dependency1__.cancelEvent;

    /*
     * A wrapper for the jquery.tagsInput plugin we use.
     *
     * Usage:
     *    {{tags-input items=someArray
     *                 autocomplete=anotherArray
     *                 emptyPlaceholder="someString"}}
     *
     * where `items` is an array of strings that represent the tags, and
     * `autocomplete` is an array of strings that represent known possible
     * tag values for autocompletion.
     */
    var TagsInput = Ember.TextField.extend({
      items: [],
      autocomplete: [],
      emptyPlaceholder: "",

      updatePlaceholder: function() {
        var empty = this.get('items.length') === 0;
        var wrapper = this.$().next('.tagsinput');
        var tagInput = wrapper.find('.ui-autocomplete-input');
        wrapper.toggleClass('has-items', !empty);
        tagInput.prop('placeholder', empty ? this.get('emptyPlaceholder') : '');
      }.observes('items.length'),

      didInsertElement: function() {
        var self = this;
        var input = this.$();

        input.tagsInput({
          defaultText: '',
          width:  '',
          height: '',
          autocomplete: {
            messages: {
              noResults: '',
              results:   function() {}
            }
          },
          autocomplete_url: function(req, res) {
            var query = req.term.toLowerCase();
            var items = self.get('items');
            var all = self.get('autocomplete');

            res.call(this, all.filter(function(tag) {
              return !items.contains(tag) && tag.toLowerCase().indexOf(query) > -1;
            }));
          },
          onAddTag: Ember.run.bind(this, function(tag) {
            this.get('items').addObject(tag);
          }),
          onRemoveTag: Ember.run.bind(this, function(tag) {
            this.get('items').removeObject(tag);
          }),
        });

        var wrapper = input.next('.tagsinput');

        // Initialize the tagsinput with the initial set of items
        this.get('items').forEach(function(item) {
          input.addTag(item, { focus: false, callback: false });
        });

        this.updatePlaceholder();

        // Hack to get "dangling tags" to work:
        // https://basecamp.com/1763284/projects/4708038-harvest-forecast-1-0/todos/94337300-2-don-t-have-to
        wrapper.find('.ui-autocomplete-input').blur(function(event) {
          var item = $(this).val();
          var items = self.get('items');

          if (Ember.isBlank(item) || items.contains(item)) { return; }

          input.addTag(item, { focus: true });
        });

        // Hack to get deleting focused tags with backspace working:
        //
        // Each tag looks like:
        //
        //    <span class="tag">
        //      <span>ninja&nbsp;&nbsp;</span>
        //      <a href="#" // title="Removing tag">x</a>
        //    </span>
        //
        // But the focused element is the link tag. So we need to make sure we
        // have a backspace event, and the right element. Then we scan the DOM
        // to grab the tag text (trimmed, of course), and call the `removeTag`
        // function with it. Hack hack hack.
        wrapper.on('keydown', 'a', function(event) {
          if (event.which !== 8) { return; }
          cancelEvent(event);
          var tag = $(this).prev('span').text().trim();
          input.removeTag(tag);
          wrapper.find('.ui-autocomplete-input').focus();
        });
      }
    });


    return TagsInput;
  });
define("forecast/components/time-frame",
  ["forecast/utils/date"],
  function(__dependency1__) {
    "use strict";
    var validate = __dependency1__.validate;
    var numberOfWeekendDays = __dependency1__.numberOfWeekendDays;
    var numberOfWorkDays = __dependency1__.numberOfWorkDays;

    var TimeFrameComponent = Ember.Component.extend({
      attributeBindings: ['style'],
      layoutName:        'components/time-frame',

      style: function() {
        var style = 'width:' + this.get('width') + 'px;' +
                    'left:'  + this.get('left')  + 'px;';
        return new Ember.Handlebars.SafeString(style);
      }.property('width', 'left'),

      // Bindings
      startDate: null,
      endDate:   null,
      dayWidth:  null,
      timelineStartDate: null,

      width: function() {
        var start = this.get('startDate'),
            end   = this.get('endDate'),
            weekends,
            duration;
        if(validate(start) && validate(end)) {
          weekends = numberOfWeekendDays(start, end);
          duration = end.diff(start, 'days') + 1 - weekends;
          return duration * this.get('dayWidth');
        } else {
          return 0;
        }
      }.property('dayWidth', 'startDate', 'endDate'),

      left: function() {
        var start    = this.get('startDate'),
            timeline = this.get('timelineStartDate');
        if(validate(start)) {
          return numberOfWorkDays(timeline, start) * this.get('dayWidth');
        } else {
          return 0;
        }
      }.property('dayWidth', 'startDate', 'timelineStartDate')
    });


    return TimeFrameComponent;
  });
define("forecast/components/time-off-frame",
  ["forecast/mixin/fixed-label","forecast/components/time-frame"],
  function(FixedLabel, TimeFrameComponent) {
    "use strict";

    var TimeOffFrameComponent = TimeFrameComponent.extend(FixedLabel, {
      classNames: ['time-off-frame'],
      layoutName: 'components/time-off-frame'
    });


    return TimeOffFrameComponent;
  });
define("forecast/components/timeline-overlay",
  ["forecast/utils/date"],
  function(__dependency1__) {
    "use strict";
    var shift = __dependency1__.shift;
    var isWithinRange = __dependency1__.isWithinRange;

    var TimelineOverlayComponent = Ember.Component.extend({
      attributeBindings: ['style', 'title'],
      classNameBindings: ['isHidden', 'color'],
      blockedTimeframes: Em.A(),
      isHovering: false,
      left: 0,

      currentDate: function() {
        var delta = this.get('left') / this.get('dayWidth');
        return shift(this.get('timelineStartDate'), delta);
      }.property('timelineStartDate', 'dayWidth', 'left'),

      isHidden: function() {
        var date, overlap;
        if(!this.get('isHovering')) {
          return true;
        }
        date = this.get('currentDate');
        overlap = this.get('blockedTimeframes').find(function(timeframe) {
          return isWithinRange(date, timeframe.get('start_date'), timeframe.get('end_date'));
        });
        return !!overlap;
      }.property(
        'currentDate',
        'isHovering',
        'blockedTimeframes.@each.start_date',
        'blockedTimeframes.@each.end_date'
      ),

      style: function() {
        var style = 'left: ' + this.get('left') + 'px;';
        return new Ember.Handlebars.SafeString(style);
      }.property('left'),

      watchTimeline: function() {
        var timeline = this.$().closest('.row-timeline');

        timeline.on({
          mouseenter: Ember.run.bind(this, function(event) {
            this.set('isHovering', true);
            this.moveOverlay(event);
          }),
          mousemove: Ember.run.bind(this, function(event) {
            this.moveOverlay(event);
          }),
          mouseleave: Ember.run.bind(this, function() {
            this.set('isHovering', false);
          })
        });
      }.on('didInsertElement'),

      willDestroyElement: function() {
        this.$().closest('.row-timeline').off('mouseenter mouseleave mousemove');
      },

      moveOverlay: function(evt) {
        var x = evt ? evt.pageX : this.get('left');
        var left = x - this.get('leftOffset');
        this.set('left', left - (left % this.get('dayWidth')));
      },

      click: function() {
        this.sendAction('clickDay', this.get('for'), this.get('currentDate'));
      }
    });


    return TimelineOverlayComponent;
  });
define("forecast/components/toggle-button",
  ["forecast/utils/computed","forecast/components/control-button"],
  function(__dependency1__, ControlButtonComponent) {
    "use strict";
    var ifelse = __dependency1__.ifelse;

    var ToggleButtonComponent = ControlButtonComponent.extend({
      classNames: ['toggle-button'],
      inStateA: true,

      buttonType: ifelse('inStateA', 'buttonTypeA', 'buttonTypeB'),
      action:     ifelse('inStateA', 'actionA', 'actionB'),

      click: function(event) {
        this._super(event);
        this.toggleProperty('inStateA');
      }
    });


    return ToggleButtonComponent;
  });
define("forecast/components/tool-tip-overlay",
  [],
  function() {
    "use strict";
    var OFFSET_ADJUSTMENT = 8;

    var ToolTipOverlayComponent = Ember.Component.extend({
      isActive: false,
      classNames: ['tooltip', 'hide-from-fullstory'],
      classNameBindings: ['isActive', 'positionClass', 'alignClass'],
      attributeBindings: ['style'],
      layoutName: 'components/tool-tip-overlay',

      isHovered: false,

      positionClass: function() {
        return 'tooltip-pos-' + this.get('position');
      }.property('position'),

      alignClass: function() {
        return 'tooltip-align-' + this.get('align');
      }.property('align'),

      triggerElement: null,

      style: function() {
        if (!this.get('isActive')) {
          return new Ember.Handlebars.SafeString('');
        }

        var trigger = this.get('triggerElement'),
            offset = trigger.offset(),
            top = offset.top - window.pageYOffset,
            width = trigger.outerWidth(),
            height = trigger.outerHeight(),
            sideVal = offset.left,
            sideProp = 'left';

        switch(this.get('position')) {
          case 'bottom':
            top += OFFSET_ADJUSTMENT + height;
            sideVal += Math.floor((width - this.$().outerWidth()) / 2);
            break;
          case 'bottom-right':
            top += OFFSET_ADJUSTMENT + height;
            break;
          case 'bottom-left':
            top += OFFSET_ADJUSTMENT + height;
            sideProp = 'right';
            sideVal = $(window).outerWidth() - (sideVal + width);
            break;
          case 'top':
            top -= (OFFSET_ADJUSTMENT + this.$().outerHeight());
            sideVal += Math.floor((width - this.$().outerWidth()) / 2);
            break;
          case 'right':
            top += Math.floor((height - this.$().outerHeight()) / 2);
            sideVal += OFFSET_ADJUSTMENT + width;
            break;
        }

        var style = 'top: %@px; %@: %@px'.fmt(top, sideProp, sideVal);
        return new Ember.Handlebars.SafeString(style);
      }.property('isActive', 'triggerElement', 'position'),

      show: function(options) {
        this.setProperties(options);
        this.append();
      },

      didInsertElement: function() {
        Ember.run.scheduleOnce('afterRender', this, 'set', 'isActive', true);
      },

      hide: function() {
        // We can be called by the tool-tip's `click` handler at any time, and so
        // need to check if we're actually in the DOM or not.
        if (this.get('isHovered') || this.get('element') === null) {
          return;
        }
        this.set('isActive', false);
        this.remove();
      },

      removeFocus: function() {
        this.set('isHovered', false);
      },

      isShowingForTrigger: function(element) {
        return this.get('isActive') && element.is(this.get('triggerElement'));
      },

      mouseEnter: function() {
        this.set('isHovered', true);
      },

      mouseLeave: function() {
        this.removeFocus();
        this.hide();
      }
    });


    return ToolTipOverlayComponent;
  });
define("forecast/components/tool-tip",
  [],
  function() {
    "use strict";
    /*
     * The ToolTipComponent has 2 parts, the component used to wrap
     * tooltip-triggers in the templates, and a singleton `tip` component
     * (defined in tool-tip-overlay) that represents the visible tooltip.
     *
     * Usage:
     *
     *   {{#tool-tip position="top|bottom|right" align="left|center"}}
     *     <some-trigger-element></some-trigger-element>
     *   {{/tool-tip}}
     *
     * Whenever the user hovers over the trigger element, we'll tell the
     * singleton * `tip` instance to show itself, passing it the position
     * and * alignment information * and telling it about the trigger element
     * (so it knows where to put itself).
     *
     * When the mouse leaves the trigger element, we tell the `tip` to
     * hide itself, and it removes itself from the DOM.
     *
     * Assumptions:
     * - there is only ever 1 tooltip showing at any given time
     * - the trigger element is a single element (see the call to
     *   `this.$().children().first()` in `mouseEnter`)
     * - the content of a tooltip is just plain text
     *
     * Styling information:
     *   For each of the possible positions and * alignment values, we set
     *   a `tooltip-pos-<position>` and `tooltip-align-<align>` class on the tip.
     */
    var ToolTipComponent = Ember.Component.extend({
      tagName: 'span',

      position: 'bottom',
      align: 'center',

      mouseEnter: function(event) {
        var rawTrigger = this.get('triggerElement').get(0);

        // Ensure that we're actually entering the wrapped trigger
        // element, and not the wrapper.
        if (!(event.target === rawTrigger ||
              Ember.$.contains(rawTrigger, event.target))) { return; }

        this.show();
      },

      mouseLeave: function() {
        Ember.run.later(this, this.hide, 250);
      },

      click: function() {
        this.tipOverlay.removeFocus();
        this.tipOverlay.hide();
      },

      // In case we're doing something like unarchiving, where we might click
      // on the trigger element and it disappears, preventing a mouseleave
      // event.
      willDestroyElement: function() {
        if (this.tipOverlay.get('isActive')) {
          this.hide();
        }
      },

      loadTipInstance: function() {
        var owner = Ember.getOwner(this);
        this.tipOverlay = getTipOverlayInstance(owner);
      }.on('init'),

      triggerElement: function() {
        return this.$().children().first();
      }.property().volatile(),

      show: function() {
        if (this.tipOverlay.get('isActive')) {
          this.tipOverlay.hide();
        }
        this.tipOverlay.show({
          triggerElement: this.get('triggerElement'),
          text: this.get('text'),
          position: this.get('position'),
          align: this.get('align')
        });
      },

      hide: function() {
        if (this.tipOverlay.isShowingForTrigger(this.get('triggerElement'))) {
          this.tipOverlay.hide();
        }
      }
    });

    var tipOverlayInstance;
    function getTipOverlayInstance(owner) {
      if (!tipOverlayInstance) {
        tipOverlayInstance = owner.lookup('component:tool-tip-overlay');
      }
      return tipOverlayInstance;
    }



    return ToolTipComponent;
  });
define("forecast/components/updated-stamp",
  ["forecast/utils/date"],
  function(__dependency1__) {
    "use strict";
    var timeAgo = __dependency1__.timeAgo;

    var UpdatedStampComponent = Ember.Component.extend({
      tagName: 'span',
      date:    null,
      person:  null,

      updatedAtAndBy: function() {
        var date    = this.get('date'),
            person  = this.get('person'),
            message = 'Updated ' + timeAgo(date).long + ' ago';
        if(person) {
          message += ' by ' + person.get('name');
        }
        return message;
      }.property('date', 'person.name'),

    });



    return UpdatedStampComponent;
  });
define("forecast/controllers/account",
  ["forecast/utils/model","forecast/utils/sort_for_humans"],
  function(__dependency1__, __dependency2__) {
    "use strict";
    var isActive = __dependency1__.isActive;
    var filterAll = __dependency1__.filterAll;
    var filterActive = __dependency1__.filterActive;
    var forHumans = __dependency2__.forHumans;

    var AccountController = Ember.Controller.extend({
      projects: filterActive('project'),
      people:   filterActive('person'),
      clients:  filterActive('client'),

      allProjects: filterAll('project'),
      allPeople:   filterAll('person'),
      assignments: filterAll('assignment'),
      milestones:  filterAll('milestone'),

      colorLabels: Ember.computed.map('model.color_labels', function(color) {
        return {
          'name':  color.name,
          'label': color.label || color.name.capitalize()
        };
      }),

      // This depends on people.@each.teams instead of people.@each.teams.[]
      // because `teams` is just an array of strings, and we replace the
      // array wholesale when we update people. If/when that changes, this
      // needs to be updated accordingly.
      allTeams: function() {
        return this.get('people').reduce(function(teams, person) {
          return teams.addObjects(person.get('teams'));
        }, Em.A()).sort(forHumans);
      }.property('people.@each.teams'),

      ftux: null,
      announcement: null,

      isConnectedToHarvest: Ember.computed.oneWay('model.isConnectedToHarvest')
    });


    return AccountController;
  });
define("forecast/controllers/account/clients_list",
  ["forecast/utils/sort_for_humans","forecast/mixin/legacy_router_target"],
  function(__dependency1__, LegacyRouterTarget) {
    "use strict";
    var forHumansBy = __dependency1__.forHumansBy;

    var ClientsListController = Ember.Controller.extend(LegacyRouterTarget, {
      sortedClients: Ember.computed('model.@each.name', function() {
        return this.get('model').toArray().sort(forHumansBy('name'));
      })
    });


    return ClientsListController;
  });
define("forecast/controllers/account/close",
  [],
  function() {
    "use strict";
    var CloseController = Ember.Controller.extend({
      isCancelingAccount: false,
      reason: null,
      feedback: null,

      closeFeedback: function() {
        return {
          reason: this.get('reason.value'),
          explanation: this.get('reason.explanation'),
          feedback: this.get('feedback')
        };
      }.property(
        'reason.value',
        'reason.explanation',
        'feedback'
      ),

      selectionObserver: function() {
        var reason = this.get('reason');
        this.get('model.options').forEach(function(option) {
          Ember.set(option, 'selected', reason === option);
        });
      }.observes('reason')
    });


    return CloseController;
  });
define("forecast/controllers/account/grouped_projects_list",
  ["forecast/mixin/legacy_router_target"],
  function(LegacyRouterTarget) {
    "use strict";

    var GroupedProjectsListController = Ember.Controller.extend(LegacyRouterTarget, {
      account: Ember.inject.controller('account'),
      colorLabels: Ember.computed.oneWay('account.colorLabels'),

      // TODO: make sure this works
      byClientName: ['client.name'],
      sortedProjectsByClient: Ember.computed.sort('projectsByClient', 'byClientName'),

      projectsByClient: function() {
        var projects = this.get('content'),
            clients = projects.mapBy('client').uniq().compact();

        return clients.map(function(client) {
          return {
            client:   client,
            projects: projects.filterBy('client', client).sortBy('sortName')
          };
        });
      }.property('content.@each.client.id')
    });


    return GroupedProjectsListController;
  });
define("forecast/controllers/account/harvest_projects",
  ["forecast/utils/sort_for_humans"],
  function(__dependency1__) {
    "use strict";
    var forHumansBy = __dependency1__.forHumansBy;

    var HarvestProjectsController = Ember.Controller.extend({
      projectsImportPage: Ember.inject.controller('account/projects_import_page'),
      hideLinked: Ember.computed.alias('projectsImportPage.hideLinked'),

      unimportedProjects: Ember.computed.filterBy('model', 'previouslyImported', false),

      visibleProjects: function() {
        return this.get('hideLinked')
          ? this.get('unimportedProjects')
          : this.get('model');
      }.property(
        'hideLinked',
        'unimportedProjects.[]',
        'model.[]'
      ),

      sortedVisibleProjects: Ember.computed('visibleProjects.@each.sortName', function() {
        return this.get('visibleProjects').toArray().sort(forHumansBy('sortName'));
      })
    });



    return HarvestProjectsController;
  });
define("forecast/controllers/account/people_list",
  ["forecast/utils/sort_for_humans","forecast/controllers/person","forecast/mixin/legacy_router_target"],
  function(__dependency1__, PersonController, LegacyRouterTarget) {
    "use strict";
    var forHumansBy = __dependency1__.forHumansBy;

    var byLastName = forHumansBy('last_name');
    var byFirstName = forHumansBy('first_name');

    var PeopleListController = Ember.Controller.extend(LegacyRouterTarget, {
      sortedPeople: Ember.computed('model.@each.{first_name,last_name}', function() {
        return this.get('model').toArray().sort(function(a, b) {
          return byFirstName(a, b) || byLastName(a, b);
        });
      }),

      sortedWrappedPeople: Ember.computed.map('sortedPeople', function(person) {
        return PersonController.create({
          realtime: this.realtime,
          model: person
        });
      })
    });


    return PeopleListController;
  });
define("forecast/controllers/account/projects_import_page",
  ["forecast/utils/string","forecast/utils/sort_for_humans"],
  function(__dependency1__, __dependency2__) {
    "use strict";
    var pluralWithCount = __dependency1__.pluralWithCount;
    var forHumansBy = __dependency2__.forHumansBy;

    var ProjectsImportPageController = Ember.Controller.extend({
      account: Ember.inject.controller('account'),

      actions: {
        checkAll:   toggleAvailable(true),
        uncheckAll: toggleAvailable(false),
      },

      hideLinked:  false,
      isImporting: false,

      isConnectedToHarvest:   Ember.computed.alias('account.model.isConnectedToHarvest'),
      isImportDisabled:       Ember.computed.or('isImporting', 'nothingToBeImported'),

      clientsToImportCount: function() {
        return this.get('model').filterBy('markedForImport').length;
      }.property('model.@each.markedForImport'),

      projectsToImportCount: function() {
        return this.get('model').mapBy('projectsToImportCount').reduce(function(total, count) {
          return total + count;
        });
      }.property('model.@each.projectsToImportCount'),

      nothingToBeImported: function() {
        return this.get('clientsToImportCount') === 0 && this.get('projectsToImportCount') === 0;
      }.property('clientsToImportCount', 'projectsToImportCount'),

      importButtonText: function() {
        if(this.get('nothingToBeImported')) { return 'Clients and Projects'; }

        var clientCount  = this.get('clientsToImportCount'),
            projectCount = this.get('projectsToImportCount'),
            clientText   = clientCount > 0 ? pluralWithCount(clientCount, 'Client') : '',
            andText      = clientCount > 0 && projectCount > 0 ? ' and ' : '',
            projectText  = projectCount > 0 ? pluralWithCount(projectCount, 'Project') : '';

        return clientText + andText + projectText;
      }.property(
        'nothingToBeImported',
        'clientsToImportCount',
        'projectsToImportCount'
      ),

      unimportedClients: Ember.computed.filter('model', function(client) {
        return !(client.get('previouslyImported') && !client.get('hasUnimportedProjects'));
      }),

      visibleClients: function() {
        return this.get('hideLinked')
          ? this.get('unimportedClients')
          : this.get('model');
      }.property(
        'hideLinked',
        'unimportedClients.[]',
        'model.[]'
      ),

      sortedVisibleClients: Ember.computed('visibleClients.@each.name', function() {
        return this.get('visibleClients').toArray().sort(forHumansBy('name'));
      })
    });

    function toggleAvailable(selected) {
      return function() {
        var harvestClients = this.get('model');
        harvestClients.rejectBy('previouslyImported').setEach('imported', selected);
        harvestClients.forEach(function(client) {
          client.get('harvest_projects').rejectBy('previouslyImported').setEach('imported', selected);
        });
      };
    }


    return ProjectsImportPageController;
  });
define("forecast/controllers/account/team_import_page",
  ["forecast/utils/string","forecast/utils/sort_for_humans"],
  function(__dependency1__, __dependency2__) {
    "use strict";
    var pluralWithCount = __dependency1__.pluralWithCount;
    var forHumansBy = __dependency2__.forHumansBy;

    var TeamImportPageController = Ember.Controller.extend({
      account: Ember.inject.controller('account'),

      actions: {
        checkAll:   toggleAvailable(true),
        uncheckAll: toggleAvailable(false),
      },

      hideLinked: false,
      isImporting: false,
      isInHarvestConnectFlow: false,

      isConnectedToHarvest:  Ember.computed.alias('account.model.isConnectedToHarvest'),
      isImportDisabled:      Ember.computed.or('isImporting', 'nothingToBeImported'),
      nothingToBeImported:   Ember.computed.equal('peopleToImportCount', 0),
      unimportedPeople:      Ember.computed.filterBy('model', 'previouslyImported', false),

      peopleToImportCount: function() {
        return this.get('model').filterBy('markedForImport')
                                .get('length');
      }.property('model.@each.markedForImport'),

      peopleToAddCount: function() {
        return this.get('model').filterBy('markedForImport')
                                .rejectBy('will_be_merged')
                                .get('length');
      }.property(
        'model.@each.markedForImport',
        'model.@each.will_be_merged'
      ),

      importButtonText: function() {
        if(this.get('nothingToBeImported')) { return 'People'; }
        return pluralWithCount(this.get('peopleToImportCount'), 'Person', 'People');
      }.property('nothingToBeImported', 'peopleToImportCount'),

      visiblePeople: function() {
        return this.get('hideLinked')
          ? this.get('unimportedPeople')
          : this.get('model');
      }.property(
        'hideLinked',
        'unimportedPeople.[]',
        'model.[]'
      ),

      sortedVisiblePeople: Ember.computed('visiblePeople.@each.name', function() {
        return this.get('visiblePeople').toArray().sort(forHumansBy('name'));
      })
    });

    function toggleAvailable(selected) {
      return function() {
        this.get('model')
            .rejectBy('previouslyImported')
            .setEach('imported', selected);
      };
    }


    return TeamImportPageController;
  });
define("forecast/controllers/account/upgrade",
  ["forecast/utils/string","forecast/utils/countries","forecast/mixin/plan_editor","forecast/mixin/credit_card_form"],
  function(__dependency1__, Countries, PlanEditor, CreditCardForm) {
    "use strict";
    var pluralWithCount = __dependency1__.pluralWithCount;

    var alias  = Ember.computed.alias;
    var bool   = Ember.computed.bool;
    var oneWay = Ember.computed.oneWay;

    var UpgradeController = Ember.Controller.extend(Ember.Validations, PlanEditor, CreditCardForm, {
      protectFromAutofill: false,

      account: Ember.inject.controller('account'),
      authenticated: Ember.inject.controller('authenticated'),
      subscription: Ember.inject.controller('subscription'),

      actions: {
        captureCard: function() {
          if (!this.validate()) { return; }
          this.set('protectFromAutofill', true);
          this.showCardForm();
        }
      },

      validations: {
        totalPeople: {
          presence: true,
          numericality: true,
          minimumPeople: {
            validator: function(object, attribute, value) {
              var activePeople = object.get('activePeople');

              if (parseInt(value, 10) < activePeople) {
                object.get('validationErrors')
                      .add(attribute, 'minpeople', { n: activePeople}, 'Must be at least @{n}');
              }
            }
          }
        },

        receipt_recipient: {
          presence: true,
          format: /^\S+@\S+\.\S+$/,
        },

        'address.line_1':      { presence: true },
        'address.city':        { presence: true },
        'address.state':       { presence: true },
        'address.postal_code': { presence: true }
      },

      isSubmitDisabled: false,
      stripeToken:      null,
      activePeople:     alias('account.people.length'),
      totalPeople:      oneWay('activePeople'),

      address: function() {
        var address = this.get('subscription.address');
        return address ? Ember.copy(address, true) : { country: 'US' };
      }.property(),

      receipt_recipient: function() {
        return this.get('subscription.receipt_recipient') ||
          this.get('authenticated.currentUser.email');
      }.property(
        'subscription.receipt_recipient',
        'authenticated.currentUser.email'
      ),

      countries: Countries,

      checkoutFormConfig: {
        options: function() {
          var people  = parseInt(this.get('totalPeople'), 10),
              cents   = this.get('totalAmount'),
              dollars = cents / 100;

          return {
            email: this.get('receipt_recipient'),
            panelLabel: 'Upgrade – {{amount}}',
            amount: cents,
            description: '%@ – %@/month'.fmt(
              pluralWithCount(people, 'Person', 'People'),
              '$' + dollars.toFixed(2)
            )
          };
        },

        opened: function() {
          this.set('isSubmitDisabled', true);
        },

        closedWithToken: function(token) {
          var props = this.getProperties('totalPeople', 'address', 'receipt_recipient');
          this.send('upgradeToPaidPlan', Ember.merge(props, { stripeToken: token }));
        },

        closedWithoutToken: function() {
          this.set('isSubmitDisabled', false);
          this.set('protectFromAutofill', false);
        }
      }
    });


    return UpgradeController;
  });
define("forecast/controllers/application",
  [],
  function() {
    "use strict";
    var ApplicationController = Ember.Controller.extend({
    });


    return ApplicationController;
  });
define("forecast/controllers/assignments/confirm_for_repeated_set",
  [],
  function() {
    "use strict";
    var AssignmentsConfirmForRepeatedSetController = Ember.Controller.extend({
      queryParams: ['type', 'repeatWeeks', 'personId'],
      type: 'update',
      repeatWeeks: 0,
      personId: '',
      model: null,
      confirmInFlight: false,

      actions: {
        confirmAllFuture: function() { this.send('confirm', 'all-future'); },
        confirmJustOne:   function() { this.send('confirm', 'just-one'); },

        confirm: function(scope) {
          var controller  = this;
          var assignment  = this.get('model');
          var repeatWeeks = this.get('repeatWeeks');
          var action      = this.get('confirmAction');
          var person      = this.store.peekRecord('person', this.get('personId'));

          assignment.get('repeated_assignment_set').then(function(repeatedSet) {
            if (!repeatedSet) { return; }
            controller.set('confirmInFlight', true);
            controller.send(action, repeatedSet, assignment, repeatWeeks, scope, person);
          });
        },

        cancel: function() {
          var assignment = this.get('model');
          this.send(this.get('cancelAction'), assignment);
        }
      },

      confirmAction: function() {
        return 'confirm' + this.get('type').capitalize();
      }.property('type'),

      cancelAction: function() {
        return 'cancel' + this.get('type').capitalize();
      }.property('type'),

      modalClass: function() {
        return this.get('type') === 'extend' ? '' : 'wide-modal';
      }.property('type'),

      isConfirmingUpdate: Ember.computed.equal('type', 'update'),
      isConfirmingDelete: Ember.computed.equal('type', 'delete'),
      isConfirmingExtend: Ember.computed.equal('type', 'extend'),
      isConfirmingCopy:     Ember.computed.equal('type', 'copy')
    });


    return AssignmentsConfirmForRepeatedSetController;
  });
define("forecast/controllers/assignments/copy",
  ["forecast/utils/sort_for_humans"],
  function(__dependency1__) {
    "use strict";
    var forHumansBy = __dependency1__.forHumansBy;

    var AssignmentsCopyController = Ember.Controller.extend(Ember.Validations, {
      account: Ember.inject.controller('account'),

      validations: {
        selectedPerson: {
          presence: true
        }
      },

      actions: {
        copy: function() {
          if (this.validate()) {
            return true;
          }
        }
      },

      selectedPerson: null,

      availablePeople: function() {
        var people = this.get('account.people');
        var person = this.get('model.person');
        return people.without(person).sortBy('name');
      }.property(
        'account.people.[]',
        'model.person'
      )
    });


    return AssignmentsCopyController;
  });
define("forecast/controllers/assignments/form",
  ["forecast/utils/computed","forecast/utils/sort_for_humans","forecast/utils/allocation_math"],
  function(__dependency1__, __dependency2__, __dependency3__) {
    "use strict";
    var fcOneWay = __dependency1__.fcOneWay;
    var forHumansBy = __dependency2__.forHumansBy;
    var divideAllocation = __dependency3__.divideAllocation;

    var alias = Ember.computed.alias;

    var AssignmentsFormController = Ember.Controller.extend(Ember.Validations, {
      account: Ember.inject.controller('account'),
      allocation: alias('model.allocation'),
      start_date: alias('model.start_date'),
      end_date: alias('model.end_date'),
      notes: alias('model.notes'),
      person: fcOneWay('model.person'),

      // TODO: remove `isBound` when the assignment-form component refactor lands.
      isBound: false,

      // This needs to be an `fcOneWay` so you can type "20" into the Total
      // Hours input for a 3-day assignment and not have the value auto-change
      // out from under you to "20.01" (which is what it becomes due to the nature
      // of smaller increments).
      //
      // When the input loses focus, we call `syncTotalAllocation` below to make
      // this reflect the "real" value. It's weird UX, we know, but this is what
      // we've decided to go with for now.
      totalAllocation: fcOneWay('model.totalAllocation'),

      // Live-update `allocation` as you type into the Total hours input.
      totalAllocationObserver: Ember.observer('totalAllocation', function() {
        if (!this.get('isBound')) { return; }
        var total = this.get('totalAllocation');
        var allocation = divideAllocation(total, this.get('model.duration'));
        this.set('allocation', allocation);
      }),

      // Re-sync `totalAllocation` with `model.totalAllocation` by tricking it
      // into thinking `model.totalAllocation` changed.
      syncTotalAllocation: function() {
        this.notifyPropertyChange('model.totalAllocation');
      },

      validations: {
        allocation: {
          presenceIfNotPTO: {
            validator: function(object, attribute, value) {
              if (!object.get('model.project.isTimeOff') && Ember.isBlank(value)) {
                object.get('validationErrors').add(attribute, 'blank');
              }
            }
          },
          validRangeIfNotPTO: {
            validator: function(object, attribute, value) {
              if (object.get('model.project.isTimeOff')) { return; }
              if (value < 0.01) {
                object.get('validationErrors').add(attribute, 'notGreaterThanOrEqualTo', { value: 0.01 });
              } else if (value > 24) {
                object.get('validationErrors').add(attribute, 'notLessThanOrEqualTo', { value: 24 });
              }
            }
          }
        },
        repeatWeeks: {
          presenceIfRepeat: {
            validator: function(object, attribute, value) {
              if (object.get('isRepeated') && Ember.isBlank(value)) {
                object.get('validationErrors').add(attribute, 'blank');
              }
            }
          },
          numericalityIfRepeat: {
            validator: function(object, attribute, value) {
              if (!object.get('isRepeated')) { return; }

              var number = parseInt(value, 10);
              if (isNaN(number)) {
                object.get('validationErrors').add(attribute, 'notNumber');
              } else if (number < 1) {
                object.get('validationErrors').add(attribute, 'notGreaterThanOrEqualTo', { value: 1 });
              } else if (number > 99) {
                object.get('validationErrors').add(attribute, 'notLessThanOrEqualTo', { value: 99 });
              }
            }
          }
        }
      },

      maxAllocation: alias('model.person.maxAllocationPerDayOrDefault'),

      isOverAllocated: Ember.computed('allocation', 'maxAllocation', function() {
        return this.get('allocation') > this.get('maxAllocation');
      }),

      allocationPercent: Ember.computed('allocation', 'maxAllocation', function() {
        var allocation = this.get('allocation');
        var maxAllocation = this.get('maxAllocation');
        return Math.round(100 * allocation / maxAllocation);
      }),

      durationLabel: function() {
        var duration = this.get('model.duration');
        var postfix  = (duration === 1) ? ' Day' : ' Days';
        return duration + postfix;
      }.property('model.duration'),

      durationWeeks: Ember.computed('model.duration', function() {
        var duration = this.get('model.duration');
        var postfix  = (duration === 5) ? ' Week' : ' Weeks';
        return (duration/5) + postfix;
      }),

      durationObserver: function() {
        if (!this.get('canRepeat')) {
          this.setProperties({
            isRepeated: false,
            repeatWeeks: null
          });
        }
      }.observes('canRepeat'),

      sortedAvailablePeople: Ember.computed('account.people.@each.name', function() {
        return this.get('account.people').toArray().sort(forHumansBy('name'));
      }),

      canReassign: Ember.computed.not('model.isCWTO'),

      isReassigning: Ember.computed('person', function() {
        return this.get('person') !== this.get('model.person');
      }),

      canRepeat: alias('model.canRepeat'),

      isRepeated: false,
      repeatWeeks: null,

      isRepeatedObserver: function() {
        var isRepeated = this.get('isRepeated');
        var repeatWeeks = this.get('repeatWeeks');
        this.set('repeatWeeks', isRepeated ? (repeatWeeks || 2) : null);
      }.observes('isRepeated')
    });


    return AssignmentsFormController;
  });
define("forecast/controllers/authenticated",
  ["forecast/utils/ajax","forecast/utils/config"],
  function(__dependency1__, Config) {
    "use strict";
    var RequestStatus = __dependency1__.RequestStatus;

    var filterBy = Ember.computed.filterBy,
        alias    = Ember.computed.alias,
        gt       = Ember.computed.gt;

    var AuthenticatedController = Ember.Controller.extend({
      applicationController: Ember.inject.controller('application'),
      accountController: Ember.inject.controller('account'),
      subscriptionController: Ember.inject.controller('subscription'),

      showBackToSchedule: false,

      currentUser: alias('model.currentUser'),

      requestStatus: function() {
        return RequestStatus;
      }.property(),

      accountName: alias('accountController.model.name'),

      ftux: alias('accountController.ftux'),
      announcement: alias('accountController.announcement'),

      pageName: function() {
        var path = this.get('applicationController.currentPath');

        if (!path) return;

        if (path.match(/schedule/)) {
          return 'Schedule';
        } else if (path.match(/export/)) {
          return 'Export';
        } else if (path.match(/clients.*page/)) {
          return 'Clients';
        } else if (path.match(/projects.*page/)) {
          return 'Projects';
        } else if (path.match(/team.*page/)) {
          return 'Team';
        } else if (path.match(/about/)) {
          return 'About';
        } else if (path.match(/account/)) {
          return 'Menu';
        }
      }.property('applicationController.currentPath'),

      editProfileUrl: function() {
        return Config.AUTH_URL + '/profile';
      }.property(),

      switchAccountUrl: function() {
        return Config.AUTH_URL;
      }.property(),

      loginEnabledUsers  : filterBy('accountController.people', 'loginEnabled'),
      moreThanJustOneUser: gt('loginEnabledUsers.length', 1),
      otherUsersOnline   : alias('realtime.otherUsersOnline'),
      recentConnections  : alias('realtime.recentConnections'),
      socketIsOpen       : alias('realtime.socket.isOpen'),
      inTrial            : alias('subscriptionController.inTrial'),
      daysLeft           : alias('subscriptionController.daysLeft'),
      isDelinquent       : alias('subscriptionController.isDelinquent')
    });


    return AuthenticatedController;
  });
define("forecast/controllers/billing/paywall",
  ["forecast/mixin/plan_editor"],
  function(PlanEditor) {
    "use strict";

    var alias = Ember.computed.alias;

    var BillingPaywallController = Ember.Controller.extend(Ember.Validations, PlanEditor, {
      account: Ember.inject.controller('account'),
      subscription: Ember.inject.controller('subscription'),

      actions: {
        cancel: function() {
          this.send('closeAuthenticatedModal');
        },

        upgrade: function() {
          var subscription = this.get('subscription'),
              transition   = this.get('transition'),
              addedPeople  = parseInt(this.get('addedPeople'), 10),
              paywall      = this;

          if (!this.validate()) { return; }

          this.set('isSubmitDisabled', true);

          subscription.addPurchasedPeople(addedPeople).then(function() {
            log('added', addedPeople, 'purchased users');
            paywall.send('closeAuthenticatedModal');
            if (transition) { transition.retry(); }
            paywall.send('notify', {
              text: 'You have added %@ %@ to your account.'.fmt(addedPeople, addedPeople > 1 ? 'people' : 'person'),
              type: 'success'
            });
          }).catch(function() {
            paywall.set('isSubmitDisabled', false);
          });
        }
      },

      validations: {
        addedPeople: {
          presence: true,
          numericality: {
            greaterThanOrEqualTo: 1
          }
        }
      },

      reset: function(props) {
        this.setProperties(Ember.merge({
          addedPeople: 1,
          isSubmitDisabled: false,
          transition: null
        }, props));
      },

      isSubmitDisabled: false,

      // The aborted transition, to be retried once we've upgraded. This
      // will take the user to the form she was expecting.
      transition: null,

      activePeople: alias('account.people.length'),

      addedPeople: 1,
      isPaywall: true,

      totalPeople: function() {
        var purchasedPeople = this.get('subscription.purchased_people'),
            addedPeople     = parseInt(this.get('addedPeople'), 10);

        return purchasedPeople + addedPeople;
      }.property(
        'subscription.purchased_people',
        'addedPeople'
      )
    });



    return BillingPaywallController;
  });
define("forecast/controllers/billing/reactivate",
  ["forecast/utils/string","forecast/mixin/plan_editor","forecast/mixin/credit_card_form"],
  function(__dependency1__, PlanEditor, CreditCardForm) {
    "use strict";
    var pluralWithCount = __dependency1__.pluralWithCount;

    var alias = Ember.computed.alias;

    var ReactivationController = Ember.Controller.extend(PlanEditor, CreditCardForm, {
      account: Ember.inject.controller('account'),
      subscription: Ember.inject.controller('subscription'),

      actions: {
        showCardForm: function() {
          this.showCardForm();
        },

        close: function() {
          this.send('closeAuthenticatedModal');
        }
      },

      // Required properties for the plan editor
      totalPeople:  alias('account.people.length'),

      checkoutFormConfig: {
        options: function() {
          var people  = parseInt(this.get('totalPeople'), 10),
              cents   = this.get('totalAmount'),
              dollars = cents / 100;

          return {
            email: this.get('subscription.receipt_recipient'),
            panelLabel: 'Reactivate – {{amount}}',
            amount: cents,
            description: '%@ – %@/month'.fmt(
              pluralWithCount(people, 'Person', 'People'),
              '$' + dollars.toFixed(2)
            )
          };
        },

        closedWithToken: function(token) {
          this.updateCard(token);
        }
      },

      updateCard: function(token) {
        var subscription = this.get('subscription'),
            controller   = this;

        subscription.updateCard(token).then(function() {
          log('Card updated (for account reactivation):', token.card);
          controller.send('close');
          controller.send('notify', {
            text: 'Your account has been reactivated.',
            type: 'success'
          });
        });
      }
    });


    return ReactivationController;
  });
define("forecast/controllers/billing/update_address",
  ["forecast/utils/countries"],
  function(Countries) {
    "use strict";

    var BillingUpdateAddressController = Ember.Controller.extend(Ember.Validations, {
      validations: {
        'address.line_1':      { presence: true },
        'address.city':        { presence: true },
        'address.state':       { presence: true },
        'address.postal_code': { presence: true }
      },

      isSubmitDisabled: false,
      countries:        Countries
    });


    return BillingUpdateAddressController;
  });
define("forecast/controllers/billing/update_plan",
  ["forecast/mixin/plan_editor"],
  function(PlanEditor) {
    "use strict";

    var alias = Ember.computed.alias;
    var oneWay = Ember.computed.oneWay;

    var BillingUpdatePlanController = Ember.Controller.extend(Ember.Validations, PlanEditor, {
      account: Ember.inject.controller('account'),

      validations: {
        totalPeople: {
          presence: true,
          numericality: true,
          minimumPeople: {
            validator: function(object, attribute, value) {
              var activePeople = object.get('activePeople');

              if (parseInt(value, 10) < activePeople) {
                object.get('validationErrors')
                      .add(attribute, 'minpeople', { n: activePeople }, 'Must be at least @{n}');
              }
            }
          }
        }
      },

      isSubmitDisabled: false,
      subscription:     alias('model'),
      activePeople:     alias('account.people.length'),
      totalPeople:      oneWay('activePeople'),
      purchasedPeople:  oneWay('model.purchased_people')
    });


    return BillingUpdatePlanController;
  });
define("forecast/controllers/billing/update_receipt_recipient",
  [],
  function() {
    "use strict";
    var BillingUpdateReceiptRecipientController = Ember.Controller.extend(Ember.Validations, {
      validations: {
        receipt_recipient: {
          presence: true,
          format: /^\S+@\S+\.\S+$/,
        }
      },

      receipt_recipient: Ember.computed.oneWay('model.receipt_recipient'),
      isSubmitDisabled:  false
    });


    return BillingUpdateReceiptRecipientController;
  });
define("forecast/controllers/clients/delete",
  ["forecast/utils/sort_for_humans"],
  function(__dependency1__) {
    "use strict";
    var forHumansBy = __dependency1__.forHumansBy;

    var ClientsDeleteController = Ember.Controller.extend(Ember.Validations, {
      validations: {
        confirmText: {
          presence: true,
          format: /^YOLO$/
        }
      },

      confirmText: null,
      hasProjects: Ember.computed.notEmpty('model.projects'),

      sortedProjects: Ember.computed('model.projects.@each.sortName', function() {
        return this.get('model.projects').toArray().sort(forHumansBy('sortName'));
      })
    });



    return ClientsDeleteController;
  });
define("forecast/controllers/clients/form",
  ["forecast/utils/sort_for_humans"],
  function(__dependency1__) {
    "use strict";
    var forHumansBy = __dependency1__.forHumansBy;

    var ClientsFormController = Ember.Controller.extend(Ember.Validations, {
      validations: {
        name: {
          presence: true
        }
      },

      name: null,

      sortedProjects: Ember.computed('model.activeProjects.@each.sortName', function() {
        return this.get('model.activeProjects').toArray().sort(forHumansBy('sortName'));
      })
    });


    return ClientsFormController;
  });
define("forecast/controllers/clients_page",
  [],
  function() {
    "use strict";
    var ClientsPageController = Ember.Controller.extend({
      account: Ember.inject.controller('account')
    });



    return ClientsPageController;
  });
define("forecast/controllers/export",
  ["forecast/utils/date"],
  function(__dependency1__) {
    "use strict";
    var thisMonday = __dependency1__.thisMonday;
    var shift = __dependency1__.shift;
    var bowser = window.bowser;

    var FOUR_MONTHS = 20 * 4;

    var ExportController = Ember.Controller.extend({
      queryParams: ['type', 'starting', 'ending'],
      type: 'project',
      starting: thisMonday(),
      ending: shift(thisMonday(), FOUR_MONTHS),
      isDownloading: false,

      isSafari: function() {
        return !!bowser.safari;
      }.property(),

      isIE: function() {
        return !!bowser.msie;
      }.property()
    });


    return ExportController;
  });
define("forecast/controllers/notifications",
  ["forecast/utils/bus"],
  function(Bus) {
    "use strict";

    var NotificationsController = Ember.Controller.extend({
      notifications: Em.A(),

      actions: {
        dismissNotification: function(notification) {
          this.get('notifications').removeObject(notification);
        }
      },

      setupListeners: function() {
        Bus.on('request:error', this, function(errorText) {
          this.addMessage({ text: errorText, type: 'error' });
        });
      }.on('init'),

      addMessage: function(message) {
        this.clearMessages();
        if (typeof message.text === 'string') {
          message.text = [message.text];
        }
        this.pushMessages(message);
      },

      clearMessages: function() {
        this.get('notifications').clear();
      },

      pushMessages: function(messages) {
        for (var i = 0; i < messages.text.length; ++i) {
          this.get('notifications').pushObject({
            text: messages.text[i],
            type: messages.type
          });
        }
      }
    });


    return NotificationsController;
  });
define("forecast/controllers/offline",
  ["forecast/utils/connection"],
  function(Connection) {
    "use strict";

    var OfflineController = Ember.Controller.extend({
      actions: {
        retryNow: function() {
          Connection.check();
        }
      },

      connection: function() {
        return Connection;
      }.property(),

      retrySeconds: Ember.computed.alias('connection.retryingIn')
    });


    return OfflineController;
  });
define("forecast/controllers/person",
  [],
  function() {
    "use strict";
    var PersonController = Ember.Controller.extend({
      id: Ember.computed.alias('model.id'),

      isOnline: function() {
        return this.realtime.get('loggedInUsers').contains(this.get('model'));
      }.property('realtime.loggedInUsers.[]'),

      lastSeenOnline: function() {
        var userConnections = this.realtime.get('userConnections'),
            userConnection  = userConnections.findBy('person', this.get('model'));
        return userConnection && userConnection.get('last_active_at');
      }.property('realtime.userConnections.@each.last_active_at')
    });


    return PersonController;
  });
define("forecast/controllers/person/assignment",
  [],
  function() {
    "use strict";
    var PersonAssignmentController = Ember.Controller.extend({
    });


    return PersonAssignmentController;
  });
define("forecast/controllers/person/assignment/split",
  [],
  function() {
    "use strict";
    var PersonAssignmentSplitController = Ember.Controller.extend({
      assignment: null
    });


    return PersonAssignmentSplitController;
  });
define("forecast/controllers/person/delete",
  [],
  function() {
    "use strict";
    var PersonDeleteController = Ember.Controller.extend(Ember.Validations, {
      validations: {
        confirmText: {
          presence: true,
          format: /^YOLO$/
        }
      },

      confirmText: null
    });



    return PersonDeleteController;
  });
define("forecast/controllers/person/show",
  ["forecast/mixin/expandable_rows","forecast/utils/sort_for_humans","forecast/mixin/schedule_properties","forecast/mixin/legacy_router_target"],
  function(__dependency1__, __dependency2__, ScheduleProperties, LegacyRouterTarget) {
    "use strict";
    var ExpandableRow = __dependency1__.ExpandableRow;
    var forHumansBy = __dependency2__.forHumansBy;

    var cmpClientName = forHumansBy('clientName');
    var cmpSortName = forHumansBy('sortName');

    var PersonShowController = Ember.Controller.extend(ExpandableRow, ScheduleProperties, LegacyRouterTarget, {
      account: Ember.inject.controller('account'),
      team: Ember.inject.controller('team'),
      person: Ember.inject.controller('person'),
      activeAssignmentController: Ember.inject.controller('person/assignment'),

      // aliases for ExpandableRow mixin
      expandedRows: Ember.computed.alias('team.expandedRows'),
      activeModel:  Ember.computed.alias('person.model'),

      isFiltered:   Ember.computed.alias('team.isFiltered'),

      tempAssignment: null,

      actions: {
        addNewProjectToPerson: function() {
          this.send('createProjectForPerson', this.get('model'));
        },

        createAssignmentForProject: function(project, start, end) {
          start = start || this.get('defaultAssignmentStartDate');
          end = end || start.clone(); // default to 1-day assignments
          this.send('createAssignment', project, this.get('model'), start, end);
        },

        editAssignment: function(assignment) {
          this.get('target').send('editAssignment', assignment);
        },

        updateAssignment: function(assignment) {
          this.get('target').send('updateAssignment', assignment);
        },

        confirmSplitAssignment: function(ass, date) {
          this.get('target').send('confirmSplitAssignment', ass, date);
        },

        buildAssignment: function(_, start, end) {
          this.set('tempAssignment', {
            startDate: start.clone(),
            endDate: end.clone()
          });
        },

        assignProject: function(project) {
          var start = this.get('tempAssignment.startDate');
          var end = this.get('tempAssignment.endDate');
          this.set('tempAssignment', null);
          this.send('createAssignmentForProject', project, start, end);
        },

        cancelAssignProject: function() {
          this.set('tempAssignment', null);
        }
      },

      availableProjects: function() {
        var assigned = this.get('model.projects').toArray();
        var all = this.get('account.projects').toArray();
        return all.removeObjects(assigned);
      }.property(
        'account.projects.[]',
        'model.projects.[]'
      ),

      availableProjectsSortProps: ['isNotTimeOff', 'clientName', 'sortName'],

      assignedProjectsWithPerson: Ember.computed.map('model.projects', function(project) {
        return {
          project: project,
          person:  this.get('model')
        };
      }),

      sortedAssignedProjects: Ember.computed.sort('assignedProjectsWithPerson', function(a, b) {
        var projectA = a.project;
        var projectB = b.project;

        // Ensure Time Off gets sorted first.
        if (projectA.get('isTimeOff')) { return -1; }
        if (projectB.get('isTimeOff')) { return 1; }

        return cmpClientName(projectA, projectB) || cmpSortName(projectA, projectB);
      })
    });


    return PersonShowController;
  });
define("forecast/controllers/project/assignment",
  [],
  function() {
    "use strict";
    var ProjectAssignmentController = Ember.Controller.extend({
    });


    return ProjectAssignmentController;
  });
define("forecast/controllers/project/assignment/split",
  [],
  function() {
    "use strict";
    var ProjectAssignmentSplitController = Ember.Controller.extend({
      assignment: null
    });


    return ProjectAssignmentSplitController;
  });
define("forecast/controllers/project/delete",
  [],
  function() {
    "use strict";
    var ProjectDeleteController = Ember.Controller.extend(Ember.Validations, {
      validations: {
        confirmText: {
          presence: true,
          format: /^YOLO$/
        }
      },

      confirmText: null
    });



    return ProjectDeleteController;
  });
define("forecast/controllers/project/milestone",
  [],
  function() {
    "use strict";
    var ProjectMilestoneController = Ember.Controller.extend({
    });


    return ProjectMilestoneController;
  });
define("forecast/controllers/project/milestone/edit",
  [],
  function() {
    "use strict";
    var ProjectMilestoneEditController = Ember.Controller.extend(Ember.Validations, {
      deleteOnClose: false,
      name: Ember.computed.alias('model.name'),
      date: Ember.computed.alias('model.date'),

      validations: {
        name: {
          presence: true
        }
      }
    });


    return ProjectMilestoneEditController;
  });
define("forecast/controllers/project/person",
  ["forecast/utils/array","forecast/mixin/schedule_properties","forecast/mixin/legacy_router_target"],
  function(__dependency1__, ScheduleProperties, LegacyRouterTarget) {
    "use strict";
    var intersect = __dependency1__.intersect;

    var ProjectPersonController = Ember.Controller.extend(ScheduleProperties, LegacyRouterTarget, {
      personProjectAssignments: Ember.computed('project.assignments.[]', 'person.assignments.[]', function() {
        return intersect(this.get('project.assignments'), this.get('person.assignments'));
      }),
      cwtoAssignments: Ember.computed.filterBy('project.assignments', 'isCWTO'),
      project: Ember.computed.alias('model.project'),
      person: Ember.computed.alias('model.person'),
      activeAssignmentController: Ember.inject.controller('project/assignment'),

      assignments: function() {
        return (this.get('project.isTimeOff') && this.get('person') === null)
          ? this.get('cwtoAssignments')
          : this.get('personProjectAssignments');
      }.property(
        'project.isTimeOff',
        'person'
      ),

      assignmentsWithTimeOff: Ember.computed.union(
        'assignments',
        'person.timeOffAssignmentsWithCWTO'
      ),

      future_scheduled_hours: function() {
        var person = this.get('person.id'),
            hours  = this.get('project.future_scheduled_hours').findBy('person_id', person);
        return hours ? hours.allocation : 0;
      }.property('project.future_scheduled_hours', 'person.id')
    });


    return ProjectPersonController;
  });
define("forecast/controllers/project/shift",
  ["forecast/utils/date","forecast/utils/string"],
  function(__dependency1__, __dependency2__) {
    "use strict";
    var makeDate = __dependency1__.makeDate;
    var shift = __dependency1__.shift;
    var latestOf = __dependency1__.latestOf;
    var pluralWithCount = __dependency2__.pluralWithCount;

    var DEFAULT_SHIFT = 5;

    var ProjectShiftController = Ember.Controller.extend({
      resetFor: function(project) {
        var today = makeDate();

        this.setProperties({
          model: project,
          includeMilestones: true,
          _cachedTo: null,
          from: latestOf(today, project.get('start_date'))
        });
      },

      includeMilestones: false,
      isShifting: false,
      toHasBeenSet: false,
      _cachedTo: null,
      from: makeDate(),

      to: Ember.computed('from', {
        get: function() {
          var cachedTo = this.get('_cachedTo');
          return cachedTo ? cachedTo : shift(this.get('from'), DEFAULT_SHIFT);
        },
        set: function(key, value) {
          this.set('_cachedTo', value);
          return value;
        }
      }),

      formattedSpan: function() {
        var span = Math.abs(this.get('from').diff(this.get('to'), 'days'));
        var weeks = Math.floor(span / 7);
        var days = span % 7;

        var weekLabel = pluralWithCount(weeks, 'week');
        var dayLabel = pluralWithCount(days, 'day');

        if (weeks && days) {
          return '%@ and %@'.fmt(weekLabel, dayLabel);
        } else if (weeks) {
          return weekLabel;
        } else {
          return dayLabel;
        }
      }.property('from', 'to')
    });


    return ProjectShiftController;
  });
define("forecast/controllers/project/show",
  ["forecast/mixin/expandable_rows","forecast/utils/sort_for_humans","forecast/mixin/schedule_properties","forecast/mixin/harvest-connectable","forecast/mixin/legacy_router_target"],
  function(__dependency1__, __dependency2__, ScheduleProperties, HarvestConnectable, LegacyRouterTarget) {
    "use strict";
    var ExpandableRow = __dependency1__.ExpandableRow;
    var forHumansBy = __dependency2__.forHumansBy;

    var byPersonName = forHumansBy('personName');

    var ProjectShowController = Ember.Controller.extend(ExpandableRow, ScheduleProperties, HarvestConnectable, LegacyRouterTarget, {
      account: Ember.inject.controller('account'),
      projectCtrl: Ember.inject.controller('project'),
      projectsCtrl: Ember.inject.controller('projects'),
      activeAssignmentController: Ember.inject.controller('project.assignment'),
      activeMilestoneController: Ember.inject.controller('project.milestone'),

      // aliases for ExpandableRow mixin
      expandedRows: Ember.computed.alias('projectsCtrl.expandedRows'),
      activeModel:  Ember.computed.alias('projectCtrl.model'),

      isFiltered:   Ember.computed.alias('projectsCtrl.isFiltered'),

      tempAssignment: null,

      actions: {
        addNewPersonToProject: function() {
          this.send('createPersonForProject', this.get('model'));
        },

        createEveryoneTimeOffAssignment: function(start, end) {
          start = start || this.get('defaultAssignmentStartDate');
          end = end || start.clone(); // default to 1-day assignments
          this.send('createAssignmentForPerson', null, start, end);
        },

        createAssignmentForPerson: function(person, start, end) {
          start = start || this.get('defaultAssignmentStartDate');
          end = end || start.clone(); // default to 1-day assignments
          this.send('createAssignment', person, this.get('model'), start, end);
        },

        editAssignment: function(assignment) {
          this.get('target').send('editAssignment', assignment);
        },

        updateAssignment: function(assignment) {
          this.get('target').send('updateAssignment', assignment);
        },

        confirmSplitAssignment: function(ass, date) {
          this.get('target').send('confirmSplitAssignment', ass, date);
        },

        assignPerson: function(person, isCwto) {
          var start = this.get('tempAssignment.startDate');
          var end = this.get('tempAssignment.endDate');
          this.set('tempAssignment', null);
          if (isCwto) {
            this.send('createEveryoneTimeOffAssignment', start, end);
          } else {
            this.send('createAssignmentForPerson', person, start, end);
          }
        },

        buildAssignment: function(_, start, end) {
          this.set('tempAssignment', {
            startDate: start.clone(),
            endDate: end.clone()
          });
        },

        cancelAssignPerson: function() {
          this.set('tempAssignment', null);
        },

        createMilestoneForProject: function(date) {
          this.send('createMilestone', this.get('model'), date);
        },

        editMilestone: function(milestone) {
          this.get('target').send('editMilestone', milestone);
        },

        updateMilestone: function(milestone) {
          this.get('target').send('updateMilestone', milestone);
        }
      },

      editInfoText: function() {
        return this.get('model.isTimeOff')
          ? 'Time Off cannot be edited'
          : 'Edit Project';
      }.property('model.isTimeOff'),

      sortedAvailablePeople: function() {
        var assigned = this.get('model.people').toArray();
        var all = this.get('account.people').toArray();
        return all.removeObjects(assigned).sortBy('name');
      }.property(
        'account.people.[]',
        'model.people.[]'
      ),

      assignedPeopleWithProject: Ember.computed.map('model.people', function(person) {
        return {
          person:  person,
          personName: person ? person.get('name') : '',
          project: this.get('model')
        };
      }),

      sortedAssignedPeople: Ember.computed('assignedPeopleWithProject.@each.personName', function() {
        return this.get('assignedPeopleWithProject').toArray().sort(byPersonName);
      })
    });


    return ProjectShowController;
  });
define("forecast/controllers/projects",
  ["forecast/mixin/expandable_rows","forecast/utils/sort_for_humans","forecast/mixin/schedule_properties"],
  function(__dependency1__, __dependency2__, ScheduleProperties) {
    "use strict";
    var ExpandableRows = __dependency1__.ExpandableRows;
    var forHumansBy = __dependency2__.forHumansBy;

    var byClientName = forHumansBy('clientName');
    var bySortName = forHumansBy('sortName');

    var ProjectsController = Ember.Controller.extend(ExpandableRows, ScheduleProperties, {
      queryParams: {
        currentFilter: 'filter'
      },
      account: Ember.inject.controller('account'),

      actions: {
        clearFilter: function() {
          this.set('currentFilter', null);
          this.get('gtm').sendGAEvent('schedule', 'filter', 'clear');
        },
        toggleProjectsDrawer: function(isOpen) {
          this.send(isOpen ? 'fetchDrawerData' : 'clearDrawerData');
          return true;
        }
      },

      gtm: Ember.inject.service('google-tag-manager'),

      visibleRows: Ember.computed.alias('filteredProjects'),

      filterOptions: function() {
        return [
          { label: 'All Projects', filterLabel: 'Filter projects…', default: true },
          { label: '---', divider: true }
        ].concat(this.get('account.colorLabels'));
      }.property('account.colorLabels.[]'),

      currentFilter: null,
      isFiltered:    Ember.computed.bool('currentFilter'),

      filterChanged: function() {
        var name = this.get('currentFilter');
        if (!name) { return; }
        var labels = this.get('account.colorLabels');
        if (!labels) { return; }
        if (labels.findBy('name', name)) {
          this.get('gtm').sendGAEvent('schedule', 'filter', 'pick:{' + name + '}');
        } else {
          this.set('currentFilter', null);
        }
      }.observes('currentFilter', 'account.colorLabels.[]'),

      defaultFilter: function() {
        return this.get('filterOptions').findBy('default', true);
      }.property('filterOptions'),

      currentFilterText: function() {
        var name = this.get('currentFilter');
        var filter = this.get('filterOptions').findBy('name', name);
        if (filter) {
          return filter.label;
        } else {
          return this.get('defaultFilter.filterLabel');
        }
      }.property(
        'filterOptions.[]',
        'currentFilter',
        'defaultFilter.label'
      ),

      filteredProjects: function() {
        var projects = this.get('model');
        var filter = this.get('currentFilter');
        if (!filter) { return projects; }
        filter = filter.dasherize();
        return projects.filter(function(project) {
          return project.get('isTimeOff') || project.get('color') === filter;
        });
      }.property(
        'model.@each.isTimeOff',
        'model.@each.color',
        'currentFilter'
      ),

      sortedFilteredProjects: Ember.computed('filteredProjects.@each.{isNotTimeOff,clientName,sortName}', function() {
        return this.get('filteredProjects').toArray().sort(function(a, b) {
          if (a.get('isTimeOff')) { return -1; }
          if (b.get('isTimeOff')) { return 1; }

          return byClientName(a, b) || bySortName(a, b);
        });
      })
    });


    return ProjectsController;
  });
define("forecast/controllers/projects/form",
  ["forecast/utils/sort_for_humans","forecast/mixin/harvest-connectable"],
  function(__dependency1__, HarvestConnectable) {
    "use strict";
    var forHumansBy = __dependency1__.forHumansBy;

    var ProjectsFormController = Ember.Controller.extend(Ember.Validations, HarvestConnectable, {
      queryParams: ['edit_notes'],
      edit_notes: false,
      account: Ember.inject.controller('account'),

      actions: {
        pickColor: function(color) {
          this.set('color', color);
        },
        submitProject: function(project) {
          var controller = this;
          if (this.get('newClientName')) {
            var newClient = this.store.createRecord('client', {
              name: this.get('newClientName')
            });
            newClient.save().then(function(client) {
              controller.set('selectedClient', client);
              controller.set('newClientName', null);
              controller.send('saveProject', project);
              controller.get('gtm').sendGAEvent('client', 'create', 'save');
            });
          } else {
            controller.send('saveProject', project);
          }
        },
        addNewClient: function() {
          this.set('selectedClient', null);
          this.get('validationErrors').remove('newClientName');
        }
      },

      validations: {
        name: {
          presence: true
        },
        newClientName: {
          presenceIfCreating: {
            validator: function(object, attribute, value) {
              if (object.get('showNewClientInput') && Ember.isBlank(value)) {
                object.get('validationErrors').add(attribute, 'blank');
              }
            }
          }
        }
      },

      gtm: Ember.inject.service('google-tag-manager'),

      color:  null,
      name:   null,
      code:   null,
      notes:  null,

      newClientName: null,
      selectedClient: null,
      showNewClientInput: Ember.computed.not('selectedClient'),

      setSelectedClient: function() {
        var client = this.get('model.client');
        var first_client = this.get('account.clients').objectAt(0);
        this.set('selectedClient', client || first_client);
      }.observes('model.client', 'account.clients.[]'),

      colorLabels: Ember.computed.alias('account.colorLabels'),

      colorLabel: function() {
        return this.get('colorLabels').findBy('name', this.get('color')).label;
      }.property('colorLabels', 'color'),

      sortedClients: Ember.computed('account.clients.@each.name', function() {
        return this.get('account.clients').toArray().sort(forHumansBy('name'));
      })
    });


    return ProjectsFormController;
  });
define("forecast/controllers/projects_page",
  [],
  function() {
    "use strict";
    var ProjectsPageController = Ember.Controller.extend({
      account: Ember.inject.controller('account'),
    });



    return ProjectsPageController;
  });
define("forecast/controllers/schedule",
  ["forecast/utils/date","forecast/utils/stream_map","forecast/utils/model","forecast/utils/streamed_array_proxy","forecast/utils/bus"],
  function(__dependency1__, __dependency2__, __dependency3__, StreamedArrayProxy, Bus) {
    "use strict";
    var isWeekend = __dependency1__.isWeekend;
    var makeDate = __dependency1__.makeDate;
    var isWithinRange = __dependency1__.isWithinRange;
    var thisMonday = __dependency1__.thisMonday;
    var toDateStamp = __dependency1__.toDateStamp;
    var validate = __dependency1__.validate;
    var createStreamMap = __dependency2__.createStreamMap;
    var coerceId = __dependency3__.coerceId;

    var equal = Ember.computed.equal;

    var ScheduleController = Ember.Controller.extend({
      queryParams: {
        startDateFormatted: { scope: 'controller', as: 'startDate' },
        showDrawer: { scope: 'controller' },
        'zoom.zoomedOut': { scope: 'controller', as: 'zoomedOut' }
      },

      account: Ember.inject.controller('account'),
      features: Ember.inject.service('features'),
      zoom: Ember.inject.service('zoom'),

      actions: {
        goToPreviousWeek: function() {
          var last_week = this.get('startDate').clone().subtract(1, 'week');
          this.set('startDate', last_week);
          this.get('gtm').sendGAEvent('schedule', 'goto', 'previous_week',
                                      last_week.diff(thisMonday(), 'weeks'));
        },

        goToThisWeek: function() {
          this.set('startDate', thisMonday());
          this.get('gtm').sendGAEvent('schedule', 'goto', 'this_week');
        },

        goToNextWeek: function() {
          var next_week = this.get('startDate').clone().add(1, 'week');
          this.set('startDate', next_week);
          this.get('gtm').sendGAEvent('schedule', 'goto', 'next_week',
                                      next_week.diff(thisMonday(), 'weeks'));
        },

        setWeeksForWindow: function() {
          this.setWeeksForWindow();
        },

        zoomIn: function() { this.get('zoom').in(); },
        zoomOut: function() { this.get('zoom').out(); }
      },

      viewportObserver: function() {
        this.send('viewportChanged', this.get('startDate'), this.get('endDate'));
      }.observes('endDate'),

      gtm: Ember.inject.service('google-tag-manager'),

      assignments: [],
      milestones: [],

      setupListeners: function() {
        // Creation
        Bus.on('socket:create:assignment', this, 'addAssignment');
        Bus.on('create:assignment', this, 'addAssignment');
        Bus.on('socket:create:milestone', this, 'addMilestone');

        // Destruction
        Bus.on('socket:destroy:assignment', this, 'removeAssignment');
        Bus.on('socket:destroy:milestone', this, 'removeMilestone');
        Bus.on('destroy:assignment', this, 'removeAssignment');

        // Update
        Bus.on('socket:update:assignment', this, function(id) {
          var assignment  = this.store.peekRecord('assignment', id),
              assignments = this.get('assignments');

          if (assignments.contains(assignment)) {
            // Force-stream the assignments, since this might be a reassignment
            this.assignmentsObserver();
          } else {
            this.addAssignment(id);
          }
        });
        Bus.on('socket:update:milestone', this, 'addMilestone');

        // Shift
        Bus.on('socket:shift:project', this, function(id) {
          var project = this.store.peekRecord('project', id);
          this.refreshProject(project);
        });

        // Archiving
        Bus.on('archive:project', this, function(project) {
          this.removeAssignments(project.get('assignments'));
        });
        Bus.on('archive:person', this, function(person) {
          this.removeAssignments(person.get('assignments'));
          this.store.findAll('project');
        });

        // Unarchiving
        Bus.on('unarchive:project', this, function(project) {
          this.refreshProject(project);
        });
        Bus.on('unarchive:person', this, function(person) {
          this.refreshPerson(person);
          this.store.findAll('project');
        });

        Bus.on('refresh:repeated_assignment_set', this, 'refreshRepeatedSet');
        Bus.on('destroy:repeated_assignment_set', this, 'removeAssignmentsForRepeatedSet');

        Bus.on('socket:create:repeated_assignment_set', this, 'refreshRepeatedSet');
        Bus.on('socket:update:repeated_assignment_set', this, 'refreshRepeatedSet');
        Bus.on('socket:destroy:repeated_assignment_set', this, 'removeAssignmentsForRepeatedSetById');
      }.on('init'),

      suspendAssignmentObserver: false,
      assignmentsObserver: function() {
        if (this.get('suspendAssignmentObserver')) { return; }
        var projMap = createStreamMap('assignments', 'project', this.get('account.allProjects')),
            teamMap = createStreamMap('assignments', 'person' , this.get('account.allPeople')),
            cwtoAssignments = [];

        this.get('assignments').forEach(function(assignment) {
          projMap.push(assignment);

          if (assignment.get('isCWTO')) {
            cwtoAssignments.push(assignment);
          } else {
            teamMap.push(assignment);
          }
        });

        this.get('account.allPeople').forEach(function(person) {
          person.get('cwtoAssignments').stream(cwtoAssignments);
        });

        projMap.stream();
        teamMap.stream();
      }.observes('assignments.[]'),

      suspendMilestoneObserver: false,
      milestonesObserver: function() {
        if (this.get('suspendMilestoneObserver')) { return; }
        var projMap = createStreamMap('milestones', 'project', this.get('account.allProjects'));

        this.get('milestones').forEach(function(milestone) {
          projMap.push(milestone);
        });

        projMap.stream();
      }.observes('milestones.[]'),

      addAssignment: function(assignmentOrId) {
        var assignment = assignmentOrId instanceof DS.Model
          ? assignmentOrId
          : this.store.peekRecord('assignment', assignmentOrId);

        if (!assignment.inRange(this.get('startDate'), this.get('endDate'))) { return; }
        this.get('assignments').pushObject(assignment);
      },

      addMilestone: function(id) {
        var milestone = this.store.peekRecord('milestone', id);
        if (milestone.inRange(this.get('startDate'), this.get('endDate'))) {
          this.get('milestones').addObject(milestone);
        }
      },

      removeAssignments: function(assignments) {
        this.set('suspendAssignmentObserver', true);
        assignments.forEach(this.removeAssignment, this);
        this.set('suspendAssignmentObserver', false);
        this.assignmentsObserver();
      },

      removeAssignment: function(assignmentOrId) {
        var assignment = assignmentOrId instanceof DS.Model
          ? assignmentOrId
          : this.store.peekRecord('assignment', assignmentOrId);

        this.get('assignments').removeObject(assignment);
      },

      removeMilestone: function(id) {
        var milestone = this.store.peekRecord('milestone', id);
        this.get('milestones').removeObject(milestone);
      },

      refreshProject: function(project) {
        var schedule = this;
        var findAttrs = {
          project_id: project.get('id'),
          start_date: toDateStamp(this.get('startDate')),
          end_date: toDateStamp(this.get('endDate')),
          state: 'active'
        };

        return Ember.RSVP.hash({
          assignments: this.store.query('assignment', findAttrs),
          milestones: this.store.query('milestone', findAttrs)
        }).then(function(results) {
          var oldAssignments = project.get('assignments').toArray();
          var oldMilestones = project.get('milestones').toArray();
          schedule.replaceAssignmentsInViewport(oldAssignments, results.assignments);
          schedule.replaceMilestonesInViewport(oldMilestones, results.milestones);
        });
      },

      refreshPerson: function(person) {
        var schedule = this;

        return this.store.query('assignment', {
          person_id: person.get('id'),
          start_date: toDateStamp(this.get('startDate')),
          end_date: toDateStamp(this.get('endDate')),
          state: 'active'
        }).then(function(assignments) {
          var oldAssignments = person.get('assignments').toArray();
          schedule.replaceAssignmentsInViewport(oldAssignments, assignments);
        });
      },

      replaceAssignmentsInViewport: function(old, updated) {
        this.set('suspendAssignmentObserver', true);
        this.get('assignments').removeObjects(old).addObjects(updated);
        this.set('suspendAssignmentObserver', false);
        this.assignmentsObserver();
      },

      replaceMilestonesInViewport: function(old, updated) {
        this.set('suspendMilestoneObserver', true);
        this.get('milestones').removeObjects(old).addObjects(updated);
        this.set('suspendMilestoneObserver', false);
        this.milestonesObserver();
      },

      assignmentsForRepeatedSetId: function(repeatedSetId) {
        return this.get('assignments').filter(function(assignment) {
          return repeatedSetId === assignment.get('ras_id');
        });
      },

      removeAssignmentsForRepeatedSetById: function(repeatedSetId) {
        var assignments = this.assignmentsForRepeatedSetId(repeatedSetId);
        this.get('assignments').removeObjects(assignments);
      },

      removeAssignmentsForRepeatedSet: function(repeatedSet) {
        var repeatedSetId = repeatedSet.get('id');
        this.removeAssignmentsForRepeatedSetById(repeatedSetId);
      },

      refreshRepeatedSet: function(repeatedSetOrId) {
        var schedule = this;

        var repeatedSetId = repeatedSetOrId instanceof DS.Model
          ? repeatedSetOrId.get('id')
          : repeatedSetOrId;

        this.store.query('assignment', {
          start_date: toDateStamp(this.get('startDate')),
          end_date: toDateStamp(this.get('endDate')),
          repeated_assignment_set_id: repeatedSetId
        }).then(function(assignments) {
          var old = schedule.assignmentsForRepeatedSetId(repeatedSetId);
          schedule.replaceAssignmentsInViewport(old, assignments);
        });
      },

      dayWidth: Ember.computed('zoom.level', function() {
        return 48 / this.get('zoom.level');
      }),

      showDrawer: false,
      rowHeaderWidth: function() {
        return this.get('showDrawer') ? 420 : 320;
      }.property('showDrawer'),

      // The grid always starts on a Monday ...
      startDate: Ember.computed('startDateFormatted', {
        get: function(key) {
          return makeDate(this.get('startDateFormatted'));
        },
        set: function(key, value) {
          var date = validate(value) ? value.day(1) : thisMonday();
          this.set('startDateFormatted', toDateStamp(date));
          return date;
        }
      }),

      startDateFormatted: toDateStamp(thisMonday()),

      // ... and ends on a Sunday
      endDate: function() {
        var to_display = this.get('weeksToDisplay'),
            start      = this.get('startDate').clone();
        start.add(to_display, 'weeks').subtract(1, 'days');
        return start;
      }.property('startDate', 'weeksToDisplay'),

      todayIsInViewport: Ember.computed('startDate', 'endDate', function() {
        var start = this.get('startDate');
        var end = this.get('endDate');
        return isWithinRange(makeDate(), start, end);
      }),

      isOnThisWeek: Ember.computed('startDate', function() {
        return thisMonday().isSame(this.get('startDate'), 'day');
      }),

      defaultAssignmentStartDate: Ember.computed('todayIsInViewport', function() {
        if (!this.get('todayIsInViewport')) { return this.get('startDate'); }

        var start = makeDate();
        if (isWeekend(start)) { start = start.day(1); }
        return start;
      }),

      weeksToDisplay: 3,
      ensureOneWeekMinimum: function() {
        if(this.get('weeksToDisplay') < 1) {
          this.set('weeksToDisplay', 1);
        }
      }.observes('weeksToDisplay'),

      setWeeksForWindow: function() {
        var win = $(window),
            week_width    = this.get('dayWidth') * 5,
            current_weeks = this.get('weeksToDisplay'),
            weeks         = Math.ceil((win.width() - this.get('rowHeaderWidth')) / week_width);

        if (weeks !== current_weeks) {
          this.set('weeksToDisplay', weeks < 2 ? 2 : weeks);
        }
      }.on('init').observes('dayWidth'),

      // Generates a list of days starting on the Monday of the passed date's week
      daysForWeek: function(week) {
        var today = makeDate(),
            days  = Em.A(),
            day   = makeDate(week).day(1);

        if(!day.isValid()) {
          return days;
        }

        for(var i = 0; i < 7; i++) {
          days.pushObject({
            date:    day.clone(),
            isToday: day.isSame(today, 'day')
          });
          day.add(1, 'day');
        }
        return days;
      },

      // Generates a 2 dimensional matrix of `daysForWeek` by `weeksToDisplay`
      fullWeekGrid: function() {
        var weeks = this.get('weeksToDisplay'),
            grid  = Em.A(),
            week  = this.get('startDate').clone();

        for(var i = 0; i < weeks; i++) {
          grid.pushObject({
            date:       week.clone(),
            isThisWeek: makeDate().isSame(week, 'week'),
            days:       this.daysForWeek(week)
          });
          week.add(1, 'week');
        }
        return grid;
      }.property('startDate', 'weeksToDisplay'),

      // Only includes Monday through Friday of all `fullWeekGrid` weeks
      workWeekGrid: function() {
        var weeks = this.get('fullWeekGrid');
        weeks.forEach(function(week) {
          week.days.removeAt(5, 2);
        });
        return weeks;
      }.property('fullWeekGrid.[]')
    });


    return ScheduleController;
  });
define("forecast/controllers/settings",
  [],
  function() {
    "use strict";
    var AccountSettingsController = Ember.Controller.extend(Ember.Validations, {
      accountCtrl: Ember.inject.controller('account'),
      subscription: Ember.inject.controller('subscription'),

      validations: {
        accountName: {
          presence: true
        },
        maxAllocationPerDay: {
          presence: true
        }
      },

      account:     Ember.computed.alias('accountCtrl.model'),
      accountName: null,
      colorLabels: null, // this gets set in the AccountSettingsRoute
      maxAllocationPerDay: null,

      // This CP is tied to the colorLabels property above. Its purpose is to create placeholder
      // values for the form. Values updated here will update the colorLabels property, which is
      // then used when saving the changes in the form (see: AccountSettingsRoute).
      colorLabelsWithPlaceholders: Ember.computed.map('colorLabels', function(color) {
        color.placeholder = color.name.capitalize();
        return color;
      }),

      activePeople: Ember.computed.alias('accountCtrl.people.length'),

      allocationOptions: function() {
        var hours = [];
        for (var i = 0.5; i <= 24; i += 0.5) {
          hours.push(i);
        }
        return hours;
      }.property()
    });


    return AccountSettingsController;
  });
define("forecast/controllers/settings/harvest_connect",
  [],
  function() {
    "use strict";
    var SettingsHarvestConnectController = Ember.Controller.extend(Ember.Validations, {
      validations: {
        subdomain: {
          presence: true
        },
        email: {
          presence: true,
          format: /^(\S+@\S+\.\S+)?$/,
        },
        password: {
          presence: true
        },
      },

      subdomain: null,
      email:     null,
      password:  null
    });



    return SettingsHarvestConnectController;
  });
define("forecast/controllers/settings/harvest_disconnect",
  [],
  function() {
    "use strict";
    var SettingsHarvestDisconnectController = Ember.Controller.extend(Ember.Validations, {
      validations: {
        confirmText: {
          presence: true,
          format: /^YOLO$/
        }
      },

      confirmText: null,
    });



    return SettingsHarvestDisconnectController;
  });
define("forecast/controllers/subscription",
  [],
  function() {
    "use strict";
    var alias = Ember.computed.alias;

    var SubscriptionController = Ember.Controller.extend({
      account: Ember.inject.controller('account'),

      canAddPeople: function(howMany) {
        if (this.get('inTrial') || this.get('isSponsored')) { return true; }

        var purchased = this.get('purchased_people'),
            active    = this.get('account.people.length');

        return purchased - active >= howMany;
      },

      addPurchasedPeople: function(howMany) {
        var model = this.get('model');
        model.incrementProperty('purchased_people', howMany);
        return model.save();
      },

      updatePlan: function(totalPeople) {
        var model = this.get('model');
        model.set('purchased_people', totalPeople);
        return model.save();
      },

      updateCard: function(stripeToken) {
        var model = this.get('model');
        model.setProperties({
          card: {
            stripe_token: stripeToken.id,
            brand:        stripeToken.card.brand,
            last_four:    stripeToken.card.last4,
            expiry_month: stripeToken.card.exp_month,
            expiry_year:  stripeToken.card.exp_year
          }
        });
        return model.save();
      },

      personRemovalMessage: function(removalVerb, person) {
        var msg ='%@ has been %@.'.fmt(person.get('name'), removalVerb);

        if (this.get('model.isBilled')) {
          msg += ' You’re now scheduling %@ of the %@ people your plan supports.'.fmt(
            this.get('account.people.length'),
            this.get('purchased_people')
          );
        }

        return msg;
      },

      // Alias all the subcription model properties
      status: alias('model.status'),
      purchased_people: alias('model.purchased_people'),
      amount_per_person: alias('model.amount_per_person'),
      amount: alias('model.amount'),
      interval: alias('model.interval'),
      discount: alias('model.discount'),
      card: alias('model.card'),
      address: alias('model.address'),
      next_billing_date: alias('model.next_billing_date'),
      receipt_recipient: alias('model.receipt_recipient'),

      inTrial: alias('model.inTrial'),
      isSponsored: alias('model.isSponsored'),
      isPaid: alias('model.isPaid'),
      isDelinquent: alias('model.isDelinquent'),
      isCanceled: alias('model.isCanceled'),
      isBilled: alias('model.isBilled'),
      daysLeft: alias('model.daysLeft'),
      needsUpgrade: alias('model.needsUpgrade')
    });


    return SubscriptionController;
  });
define("forecast/controllers/team",
  ["forecast/mixin/expandable_rows","forecast/utils/sort_for_humans","forecast/mixin/schedule_properties"],
  function(__dependency1__, __dependency2__, ScheduleProperties) {
    "use strict";
    var ExpandableRows = __dependency1__.ExpandableRows;
    var forHumansBy = __dependency2__.forHumansBy;

    var TeamController = Ember.Controller.extend(ExpandableRows, ScheduleProperties, {
      queryParams: {
        currentFilter: 'filter'
      },
      account: Ember.inject.controller('account'),

      actions: {
        clearFilter: function() {
          this.set('currentFilter', null);
          this.get('gtm').sendGAEvent('schedule', 'filter', 'clear');
        }
      },

      gtm: Ember.inject.service('google-tag-manager'),

      visibleRows: Ember.computed.alias('sortedFilteredPeople'),

      teamOptions: Ember.computed('account.allTeams.[]', function() {
        return this.get('account.allTeams').map(function(team) {
          return { name: team };
        });
      }),
      hasTeamOptions: Ember.computed.notEmpty('teamOptions'),

      filterOptions: function() {
        return [
          { name: 'Everyone', filterLabel: 'Filter people…', default: true },
          { name: '---', divider: true}
        ].concat(this.get('teamOptions'));
      }.property('teamOptions'),

      currentFilter: null,
      isFiltered:    Ember.computed.bool('currentFilter'),

      filterChanged: function() {
        var name = this.get('currentFilter');
        if (!name) { return; }
        var teams = this.get('teamOptions');
        if (!teams.length) { return; }
        if (teams.findBy('name', name)) {
          this.get('gtm').sendGAEvent('schedule', 'filter', 'pick:{team}');
        } else {
          this.set('currentFilter', null);
        }
      }.observes('currentFilter', 'teamOptions.@each.name'),

      defaultFilter: function() {
        return this.get('filterOptions').findBy('default', true);
      }.property('filterOptions'),

      currentFilterText: function() {
        return this.get('currentFilter') || this.get('defaultFilter.filterLabel');
      }.property('currentFilter', 'defaultFilter'),

      filteredPeople: function() {
        var people = this.get('model');
        var team = this.get('currentFilter');
        if (!team) { return people; }
        return people.filter(function(person) {
          return person.get('teams').contains(team);
        });
      }.property(
        'model.@each.teams',
        'currentFilter'
      ),

      sortedFilteredPeople: Ember.computed('filteredPeople.@each.name', function() {
        return this.get('filteredPeople').toArray().sort(forHumansBy('name'));
      })
    });


    return TeamController;
  });
define("forecast/controllers/team/form",
  ["forecast/utils/sort_for_humans","forecast/utils/string","forecast/services/working-time"],
  function(__dependency1__, __dependency2__, workingTime) {
    "use strict";
    var forHumans = __dependency1__.forHumans;
    var possessive = __dependency2__.possessive;

    var alias = Ember.computed.alias;
    var oneWay = Ember.computed.oneWay;

    var TeamFormController = Ember.Controller.extend(Ember.Validations, {
      account: Ember.inject.controller('account'),
      authenticated: Ember.inject.controller('authenticated'),
      features: Ember.inject.service('features'),

      validations: {
        first_name: {
          presence: true
        },
        last_name: {
          presence: true
        },
        email: {
          format: /^(\S+@\S+\.\S+)?$/,
          presenceIfInvited: {
            validator: function(object, attribute, value) {
              if (object.get('isOnAccount') && Ember.isBlank(value)) {
                object.get('validationErrors').add(attribute, 'blank');
              }
            }
          }
        },
        maxAllocationPerDay: {
          presence: true
        }
      },

      first_name:  null,
      last_name:   null,
      email:       null,
      isOnAccount: null,
      admin:       null,
      subscribed:  null,
      maxAllocationPerDay: null,

      bindPerson: function(person) {
        var bindings = person.getProperties(
          'first_name', 'last_name', 'email', 'isOnAccount', 'admin', 'subscribed'
        );
        bindings.maxAllocationPerDay = person.get('maxAllocationPerDayOrDefault');
        bindings.model = person;
        this.setProperties(bindings);
      },

      // This practically acts as a oneWay binding, computing the new value for
      // the `login` property for us that is then being set in the `PersonModal`
      login: function() {
        if (!this.get('isOnAccount')) {
          return 'disabled';
        }
        return this.get('model.loginEnabled') ? 'enabled' : 'invited';
      }.property('isOnAccount', 'model.loginEnabled'),

      isCurrentUser: function() {
        var currentUser = this.get('authenticated.currentUser');
        return currentUser.get('id') === this.get('model.id');
      }.property('model.id'),

      showSubscribedCheckbox: Ember.computed.and('isCurrentUser', 'admin'),

      workingTime: function() {
        return workingTime;
      }.property(),

      allocationOptions: function() {
        var account_default = this.get('workingTime.default');
        var hours = [];
        for (var i = 0.5; i <= 24; i += 0.5) {
          var label = i + (i === account_default ? ' (default)' : '');
          hours.push({ value: i, label: label });
        }
        return hours;
      }.property('workingTime.default'),

      emailPlaceholderText: function() {
        return this.get('isOnAccount') ? 'Required' : 'Optional';
      }.property('isOnAccount'),

      personLabel: function() {
        var name = this.get('first_name');
        return Ember.isBlank(name) ? 'this person' : name;
      }.property('first_name'),

      showAllocationHelp: function() {
        var original = this.get('model.maxAllocationPerDayOrDefault'),
            current  = this.get('maxAllocationPerDay');
        return original !== current;
      }.property('maxAllocationPerDay', 'model.maxAllocationPerDayOrDefault'),

      allocationHelpText: function() {
        var name  = possessive(this.get('personLabel')),
            alloc = this.get('maxAllocationPerDay');
        return 'This change will set %@ max hrs/day to %@.'.fmt(name, alloc);
      }.property('first_name', 'maxAllocationPerDay'),

      showUserHelp: function() {
        return this.get('model.loginDisabled') === this.get('isOnAccount');
      }.property('model.loginDisabled', 'isOnAccount'),

      userHelpText: function() {
        var name = this.get('personLabel');

        switch(this.get('model.login')) {
          case 'disabled':
            return 'Upon saving, %@ will receive an email invitation to sign in to Harvest Forecast.'.fmt(name);
          case 'invited':
            return '%@ invitation is still pending. Unchecking this means %@ will not be able to access this account after signing in.'.fmt(possessive(name).capitalize(), name);
          case 'enabled':
            return 'Unchecking this means %@ will not be able to access this account after signing in.'.fmt(name);
        }
      }.property('model.login', 'personLabel'),

      showAdminHelp: function() {
        if (this.get('showUserHelp')) {
          return false;
        }
        return this.get('isOnAccount') && (this.get('admin') !== this.get('model.admin'));
      }.property('showUserHelp', 'isOnAccount', 'admin', 'model.admin'),

      adminHelpText: function() {
        var name = this.get('personLabel');

        if (this.get('admin')) {
          return 'This change will give %@ full edit priviledges.'.fmt(name);
        } else {
          return 'This change means %@ will only be able to view the schedule.'.fmt(name);
        }
      }.property('admin', 'personLabel'),

      adminOptions: function() {
        return [{ value: true,  label: 'View and Edit' },
                { value: false, label: 'View Only' }];
      }.property(),

      updatedTeams: function() {
        var teams = this.get('model.teams');
        return teams ? teams.toArray().sort(forHumans) : [];
      }.property('model.teams.[]'),

      allTeams: Ember.computed.alias('account.allTeams')
    });


    return TeamFormController;
  });
define("forecast/controllers/team_page",
  [],
  function() {
    "use strict";
    var TeamPageController = Ember.Controller.extend({
      account: Ember.inject.controller('account')
    });



    return TeamPageController;
  });
define("forecast/controllers/welcome",
  ["forecast/utils/ftux","forecast/mixin/legacy_router_target"],
  function(FTUX, LegacyRouterTarget) {
    "use strict";

    var WelcomeController = Ember.Controller.extend(LegacyRouterTarget, {
      account: Ember.inject.controller('account'),

      actions: {
        dismissFTUX: function(route) {
          FTUX.finish();
          this.hideWelcomeModal();
          this.transitionToRoute(route);
        },
      },

      hideWelcomeModal: function() {
        this.set('account.ftux', null);
      },
      isAdmin: Ember.computed.alias('realtime.isAdmin'),

      buttonText: function() {
        var creator = this.get('account.ftux.account_creator');
        return creator ? 'Create Your First Project' : 'Got It – Let’s Go';
      }.property('account.ftux.account_creator'),

      next: function() {
        var creator = this.get('account.ftux.account_creator');
        return creator ? 'projects.new' : 'projects';
      }.property('account.ftux.account_creator')
    });


    return WelcomeController;
  });
define("forecast/helpers/cents-to-dollars",
  [],
  function() {
    "use strict";
    var centsToDollars = Ember.Helper.helper(function(params, hash) {
      var cents = params[0];
      var d = cents / 100;
      if (d !== d) {
        return hash['nan'] || '';
      }
      return d === Math.round(d) ? '$' + d : '$' + d.toFixed(2);
    });


    return centsToDollars;
  });
define("forecast/helpers/format-date",
  ["forecast/utils/date"],
  function(__dependency1__) {
    "use strict";
    var makeDate = __dependency1__.makeDate;

    var formatDate = Ember.Helper.helper(function(params) {
      var date = params[0];
      var format = params[1];
      return makeDate(date).format(format);
    });


    return formatDate;
  });
define("forecast/helpers/parse-markdown",
  [],
  function() {
    "use strict";
    var parseMarkdown = Ember.Helper.helper(function(params) {
      var string = params[0];
      var html = window.marked(string);
      return new Ember.Handlebars.SafeString(html);
    });


    return parseMarkdown;
  });
define("forecast/helpers/plural-ize",
  [],
  function() {
    "use strict";
    var Pluralize = Ember.Helper.helper(function(params) {
      var number = params[0];
      var word = number === 1 ? params[1] : Ember.String.pluralize(params[1]);
      return number.toString() + ' ' + word;
    });


    return Pluralize;
  });
define("forecast/helpers/sorted-list",
  ["forecast/utils/sort_for_humans"],
  function(__dependency1__) {
    "use strict";
    var forHumans = __dependency1__.forHumans;

    var sortedList = Ember.Helper.helper(function(params) {
      return params[0].sort(forHumans).join(', ');
    });


    return sortedList;
  });
define("forecast/helpers/time-ago",
  ["forecast/utils/date"],
  function(__dependency1__) {
    "use strict";
    var timeAgo = __dependency1__.timeAgo;

    var timeAgoHelper = Ember.Helper.helper(function(params, hash) {
      var date = params[0];
      var format = hash['format'] || 'short';
      return timeAgo(date)[format];
    });



    return timeAgoHelper;
  });
define("forecast/helpers/week-day",
  ["forecast/utils/date"],
  function(__dependency1__) {
    "use strict";
    var makeDate = __dependency1__.makeDate;

    var weekDay = Ember.Helper.helper(function(params) {
      var day = params[0];
      return makeDate(day).format('D');
    });


    return weekDay;
  });
define("forecast/helpers/week-number",
  ["forecast/utils/date"],
  function(__dependency1__) {
    "use strict";
    var makeDate = __dependency1__.makeDate;

    var weekNumber = Ember.Helper.helper(function(params) {
      var day = params[0];
      return makeDate(day).format('W');
    });


    return weekNumber;
  });
define("forecast/helpers/week-span",
  ["forecast/utils/date"],
  function(__dependency1__) {
    "use strict";
    var makeDate = __dependency1__.makeDate;

    var weekSpan = Ember.Helper.helper(function(params) {
      var week = makeDate(params[0]).day(1);
      var end = makeDate(week).add(4, 'days');
      var justShowMonths = params[1];
      var endIsSameMonth = week.isSame(end, 'month');

      if (justShowMonths) {
        return endIsSameMonth
          ? week.format('MMM')
          : week.format('MMM') + ' – ' + end.format('MMM');
      } else {
        var format = endIsSameMonth ? 'D' : 'D MMM';
        return week.format(format) + ' – ' + end.format('D MMM');
      }
    });


    return weekSpan;
  });
define("forecast/mixin/admin-only-access",
  [],
  function() {
    "use strict";
    var AdminOnlyAccess = Ember.Mixin.create({
      beforeModel: function() {
        this.verifyPermissionsOrTransition();
      },

      verifyPermissionsOrTransition: function() {
        if (!this.get('realtime.isAdmin')) {
          this.transitionTo('account');
          return false;
        }
        return true;
      }.observes('realtime.isAdmin')
    });


    return AdminOnlyAccess;
  });
define("forecast/mixin/assignment_modal",
  ["forecast/mixin/admin-only-access","forecast/mixin/destroy_tracker"],
  function(AdminOnlyAccess, DestroyTracker) {
    "use strict";

    var AssignmentModal = Ember.Mixin.create(AdminOnlyAccess, DestroyTracker, {
      actions: {
        save: function() {
          var route = this,
              form  = this.controllerFor('assignments/form'),
              assignment = form.get('model');

          if (!form.validate()) { return; }

          this.willUpdateAssignment();

          assignment.get('repeated_assignment_set').then(function(repeatedSet) {
            var repeatWeeks = parseInt(form.get('repeatWeeks'), 10);
            var isReassigning = form.get('isReassigning');
            var person = form.get('person');
            // Changing the relationship does not dirty the record natively
            var assignmentIsDirty = assignment.get('hasDirtyAttributes') || isReassigning;
            var weeksDidNotChange = repeatedSet
              ? repeatedSet.get('weeks') === repeatWeeks
              : !repeatWeeks;

            // Nothing changed, so nothing to do.
            if (!assignmentIsDirty && weeksDidNotChange) { return; }

            // If the assignment is in a repeated set, confirm either an update
            // or an extension, depending on whether assignment properties ALSO
            // changed.
            if (repeatedSet) {
              var type = assignmentIsDirty ? 'update' : 'extend';
              route.send('confirmRepeat', type, assignment, repeatWeeks, person);
              return;
            }

            // At this point, if repeatWeeks hasn't been specified, it means
            // we just need to update the assignment.
            if (!repeatWeeks) {
              route.send('updateAssignment', assignment, person);
              return;
            }

            // If we've gotten this far, we need to create a repeated set
            route.send('createRepeatedAssignmentSet', assignment, repeatWeeks);
          });
        }
      },

      gtm: Ember.inject.service('google-tag-manager'),

      willUpdateAssignment: Ember.K,

      controllerName: 'assignments/form',

      model: function(params, transition) {
        // When just retrieving the model from a parent resource, the default
        // implementation of the `model` hook does NOT return a promise,
        // annoyingly.
        //
        // https://github.com/emberjs/ember.js/blob/v1.10.1/packages/ember-routing/lib/system/route.js#L1321
        //
        // Looks like this is still the case in 1.13.0-beta.2 (the most current
        // version as of 2015-06-09):
        //
        // https://github.com/emberjs/ember.js/blob/v1.13.0-beta.2/packages/ember-routing/lib/system/route.js#L1351
        var assignment = this._super(params, transition);
        return assignment.get('repeated_assignment_set').then(function() {
          return assignment;
        });
      },

      // TODO: remove `isBound` when the assignment-form component refactor lands.
      setupController: function(controller, model) {
        this._super(controller, model);
        this.startTrackingDestroys(model);
        model.get('repeated_assignment_set').then(function(repeatedSet) {
          controller.setProperties({
            repeatWeeks: repeatedSet ? repeatedSet.get('weeks') : null,
            isRepeated: !!repeatedSet,
            isBound: true
          });
        });
      },

      resetController: function(controller, isExiting) {
        if (isExiting) {
          this.stopTrackingDestroys();
          controller.set('isBound', false);
        }
      },

      renderTemplate: function(controller, model) {
        this.render('assignments/form', {
          into:   'authenticated',
          outlet: 'modal'
        });
      }
    });


    return AssignmentModal;
  });
define("forecast/mixin/autoselectable",
  [],
  function() {
    "use strict";
    var Autoselectable = Ember.Mixin.create({
      attributeBindings: ['autoselect'],

      checkForAutoSelect: function() {
        if (!this.get('autoselect')) { return; }
        var input = this;
        Ember.run.next(function() {
          var el = input.$();
          if (el) { el.select(); }
        });
      }.on('didInsertElement')
    });


    return Autoselectable;
  });
define("forecast/mixin/background-click",
  [],
  function() {
    "use strict";
    var BackgroundClick = Ember.Mixin.create({
      setupBodyListener: function() {
        $(document.body).on('click.' + this.get('elementId'),
                            this.bodyClick.bind(this));
      }.on('didInsertElement'),

      removeBodyListener: function() {
        $(document.body).off('click.' + this.get('elementId'));
      }.on('willDestroyElement'),

      bodyClick: function(evt) {
        if (this.get('isDestroyed')) {
          return;
        }
        if($(evt.target).closest(this.$()).length < 1) {
          this.backgroundClicked();
        }
      },

      backgroundClicked: Ember.K
    });


    return BackgroundClick;
  });
define("forecast/mixin/client_modal",
  ["forecast/utils/model","forecast/mixin/destroy_tracker"],
  function(__dependency1__, DestroyTracker) {
    "use strict";
    var changedKeysForGA = __dependency1__.changedKeysForGA;

    var ClientModal = Ember.Mixin.create(DestroyTracker, {
      actions: {
        saveClient: function() {
          var route = this,
              form  = this.controllerFor('clients/form'),
              client = form.get('model');

          if (!form.validate()) { return; }

          client.set('name', form.get('name'));

          var creating = client.get('isNew');
          var changedKeys = changedKeysForGA(client);

          client.save()
            .then(function(client) {
              route.clientWasSaved(client);

              if (creating) {
                route.get('gtm').sendGAEvent('client', 'create', 'save');
              } else {
                route.get('gtm').sendGAEvent('client', 'edit', 'save:{' + changedKeys + '}');
              }
            })
            .catch(route.clientSaveFailed.bind(route, client));

          this.send('close', client);
        },

        archiveClient: function(client) {
          var route = this,
              form  = this.controllerFor('clients/form');

          if (form.get('model.hasActiveProjects')) {
            this.send('notify', {
              text: 'Client cannot be archived because it has active projects.',
              type: 'error'
            });
            return;
          }

          client.set('archived', true);

          client.save()
            .then(function() {
              route.clientWasArchived(client);
              route.get('gtm').sendGAEvent('client', 'archive');
            })
            .catch(route.clientSaveFailed.bind(route, client));

          route.send('close', client);
        },

        cancelClient: function() {
          var client = this.controllerFor('clients/form').get('model');
          var action = client.get('isNew') ? 'create' : 'edit';
          this.clientWasCanceled(client);
          this.send('close', client);
          this.get('gtm').sendGAEvent('client', action, 'cancel');
        },

        close: function(client) {
          this.controllerFor('clients/form').get('validationErrors').clear();
          this.send('closeModal', client);
        }
      },

      gtm: Ember.inject.service('google-tag-manager'),

      clientWasSaved:    Ember.K,
      clientWasArchived: Ember.K,
      clientSaveFailed:  Ember.K,
      clientWasCanceled: Ember.K,

      controllerName: 'clients/form',

      setupController: function(controller, model) {
        this._super(controller, model);
        this.startTrackingDestroys(model);
        controller.set('name', model.get('name'));
      },

      resetController: function(controller, isExiting) {
        if (isExiting) {
          this.stopTrackingDestroys();
        }
      },

      renderTemplate: function(controller, model) {
        this.render('clients/form', {
          into:   'authenticated',
          outlet: 'modal'
        });
      }
    });


    return ClientModal;
  });
define("forecast/mixin/confirm_for_repeated_set_modal",
  ["forecast/utils/string","forecast/mixin/admin-only-access","forecast/mixin/destroy_tracker","forecast/utils/bus"],
  function(__dependency1__, AdminOnlyAccess, DestroyTracker, Bus) {
    "use strict";
    var possessive = __dependency1__.possessive;

    var ConfirmForRepeatSetModal = Ember.Mixin.create(AdminOnlyAccess, DestroyTracker, {
      assignmentUpdater: Ember.inject.service('assignment-updater'),
      gtm: Ember.inject.service('google-tag-manager'),

      actions: {
        confirmUpdate: function(repeatedSet, assignment, repeatWeeks, scope, person) {
          var route = this;
          var updater = this.get('assignmentUpdater');
          var promise = scope === 'just-one'
            ? updater.updateAssignment(assignment, person)
            : updater.updateRepeatedSet(repeatedSet, assignment, repeatWeeks, person);

          // Catch needed because `updateAssignment` can fail-fast for
          // client overlap checks. And `updateRepeatedSet` can fail-fast for
          // assignment length checks.
          promise.catch(function(reason) {
            route.send('notify', { text: reason, type: 'error' });
          });

          this.closeForm();
        },

        cancelUpdate: function(assignment) {
          assignment.rollbackAttributes();
          this.closeForm();
        },

        confirmDelete: function(repeatedSet, assignment, repeatWeeks, scope) {
          var route = this;
          var updater = this.get('assignmentUpdater');
          var promise = scope === 'just-one'
            ? updater.deleteAssignment(assignment)
            : updater.deleteRepeatedSet(repeatedSet, assignment, repeatWeeks);

          promise.then(function() {
            var name = assignment.get('person.first_name');
            var msg = scope === 'just-one'
              ? '%@ assignment has been deleted'.fmt(possessive(name))
              : '%@ assignments have been deleted'.fmt(possessive(name));
            route.send('notify', { text: msg, type: 'success' });
          });

          this.closeForm();
        },

        cancelDelete: function() {
          this.closeForm();
        },

        confirmExtend: function(repeatedSet, assignment, repeatWeeks, scope) {
          var updater = this.get('assignmentUpdater');
          updater.extendOrContractRepeatedSet(repeatedSet, assignment, repeatWeeks);
          this.closeForm();
        },

        cancelExtend: function() {
          this.closeForm();
        },

        confirmCopy: function(repeatedSet, assignment, repeatWeeks, scope, person) {
          var route = this;
          var updater = this.get('assignmentUpdater');
          var promise = scope === 'just-one'
            ? updater.copyAssignment(assignment, person)
            : updater.copyRepeatedSet(repeatedSet, assignment, person);

          promise
            .then(function(copiedSet) {
              var weeks = scope === 'just-one' ? undefined : copiedSet.get('weeks');
              this.get('gtm').sendGAEvent('assignment', 'copy', 'save', weeks);
            })
            .catch(function(reason) { // `copyAssignment` can fail-fast.
              route.send('notify', { text: reason, type: 'error' });
            })
            .finally(route.closeForm.bind(route));
        },

        cancelCopy: function() {
          this.closeForm();
        }
      },

      closeForm: function() {
        Ember.warn('You must implement `closeForm` when using the `ConfirmForRepeatSetModal` mixin.');
      },

      controllerName: 'assignments/confirm_for_repeated_set',

      setupController: function(controller, model) {
        this._super(controller, model);
        this.startTrackingDestroys(model);
        controller.set('confirmInFlight', false);
      },

      resetController: function(controller, isExiting) {
        if (isExiting) {
          this.stopTrackingDestroys();
          controller.set('personId', '');
        }
      },

      renderTemplate: function(controller, model) {
        this.render('assignments/confirm_for_repeated_set', {
          into:   'authenticated',
          outlet: 'modal'
        });
      }
    });


    return ConfirmForRepeatSetModal;
  });
define("forecast/mixin/copy_modal",
  ["forecast/mixin/admin-only-access","forecast/mixin/destroy_tracker"],
  function(AdminOnlyAccess, DestroyTracker) {
    "use strict";

    var CopyModal = Ember.Mixin.create(AdminOnlyAccess, DestroyTracker, {
      assignmentUpdater: Ember.inject.service('assignment-updater'),

      actions: {
        copy: function() {
          var route = this,
              assignment = this.get('controller.model'),
              person = this.get('controller.selectedPerson'),
              updater = this.get('assignmentUpdater');

          assignment.get('repeated_assignment_set').then(function(repeatedSet) {
            if (repeatedSet) {
              route.confirmCopyForRepeatedSet(assignment, repeatedSet, person);
            } else {
              updater.copyAssignment(assignment, person)
                .then(route.copyWasSaved.bind(route))
                .catch(route.copyWasRejected.bind(route));
              route.copyWillSave();
            }
          });
        },

        cancelCopy: function() {
          this.get('gtm').sendGAEvent('assignment', 'copy', 'cancel');
          this.copyWasCanceled();
        }
      },

      gtm: Ember.inject.service('google-tag-manager'),

      copyWasSaved: function(assignment) {
        var message = '%@ has been assigned to %@.'.fmt(
          assignment.get('person.first_name'),
          assignment.get('project.nameWithCode'));

        this.router.send('notify', {
          text: message,
          type: 'success'
        });
      },

      copyWasRejected: function(reason) {
        this.router.send('notify', {
          text: reason,
          type: 'error'
        });
      },

      confirmCopyForRepeatedSet: function(assignment, repeatedSet, person) {
        var route = this.get('confirmCopyRoute');
        this.transitionTo(route, {
          queryParams: {
            type: 'copy',
            repeatWeeks: repeatedSet.get('weeks'),
            personId: person.get('id')
          }
        });
      },

      copyWillSave:    Ember.K,
      copyWasCanceled: Ember.K,

      controllerName: 'assignments/copy',

      setupController: function(controller, model) {
        this._super(controller, model);
        this.controller.set('selectedPerson', null);
        this.controller.get('validationErrors').clear();
        this.startTrackingDestroys(model);
      },

      resetController: function(controller, isExiting) {
        if (isExiting) {
          this.stopTrackingDestroys();
        }
      },

      renderTemplate: function(controller, model) {
        this.render('assignments/copy', {
          into:      'authenticated',
          outlet:    'modal'
        });
      }
    });


    return CopyModal;
  });
define("forecast/mixin/credit_card_form",
  ["forecast/utils/config"],
  function(Config) {
    "use strict";

    var stripeToken;

    function noop() {}

    var CreditCardForm = Ember.Mixin.create({
      /*
        `checkoutFormConfig` - Where the mixer-in registers callbacks

        The config object can have the following properties (all expected to be
        functions, and all called in the context of the mixer-in, so `this` means
        what you think it means):

        options:
           A callback that is expected to return an object with any of the
           following optional StripeCheckout properties: 'email', 'panelLabel',
           'amount', 'description'

        opened:
           Called when the StripeCheckout form opens. Useful for things like
           disabling buttons/forms.

        closedWithOutToken:
           Called when the StripeCheckout form is closed without having received
           a token. This means that the user clicked the 'x', because if there was
           an error, the StripeCheckout form stays open.

        closedWithToken:
           Called when the form is closed and we've successfully received a Stripe
           token.
      */

      checkoutFormConfig: Ember.computed(function() {
        Ember.warn('You must implement `checkoutFormConfig` when using the `CreditCardForm` mixin.');
      }),

      showCardForm: function() {
        var config             = this.get('checkoutFormConfig'),
            options            = config.options ? config.options.call(this) : {},
            opened             = config.opened || noop,
            closedWithToken    = config.closedWithToken || noop,
            closedWithoutToken = config.closedWithoutToken || noop,
            self               = this;

        StripeCheckout.configure({
          key:             Config.STRIPE_PK,
          image:           '/assets/images/apple-touch-icon.png',
          name:            'Harvest Forecast',
          allowRememberMe: false,

          // Options

          email:       options.email,
          panelLabel:  options.panelLabel,
          amount:      options.amount,
          description: options.description,

          // Callbacks

          opened: function() {
            Ember.run(self, opened);
          },

          token: function(token) {
            stripeToken = token;
          },

          closed: function() {
            var cb = stripeToken ? closedWithToken : closedWithoutToken;
            Ember.run(self, cb, stripeToken);
            stripeToken = null;
          }
        }).open();
      }
    });


    return CreditCardForm;
  });
define("forecast/mixin/deferred-setup",
  [],
  function() {
    "use strict";
    var DeferredSetup = Ember.Mixin.create({
      isSetup: false,

      registerSetup: function() {
        this.$().one('mouseover.deferred-setup focusin.deferred-setup',
                     this.resolveSetup.bind(this));
      }.on('didInsertElement'),

      resolveSetup: function() {
        Ember.run.scheduleOnce('afterRender', this, 'set', 'isSetup', true);
      }
    });


    return DeferredSetup;
  });
define("forecast/mixin/delete_modal",
  ["forecast/mixin/admin-only-access","forecast/mixin/destroy_tracker"],
  function(AdminOnlyAccess, DestroyTracker) {
    "use strict";

    var DeleteModal = Ember.Mixin.create(AdminOnlyAccess, DestroyTracker, {
      actions: {
        cancelDelete: function() {
          var model = this.get('controller.model');
          this.deleteWasCanceled(model);
        },

        doDelete: function() {
          var model  = this.get('controller.model'),
              route  = this;

          if(!this.get('controller').validate()) { return; }

          this.willDelete(model);
          model.destroyRecord()
            .then(route.deleteSucceeded.bind(route))
            .catch(model.rollbackAttributes.bind(model));
        },

        // Overriding DestroyTracker#dismissDestroyModal. If we were underneath-
        // deleted, dismissing the modal can just go wherever we would have
        // gone anyway on a successful delete.
        //
        // We'll just proxy to `willDelete`, as it's the callback we use to
        // optimistically transition away when actually deleting.
        dismissDestroyModal: function() {
          this.willDelete();
        }
      },

      canDelete:         Ember.K,
      denyDelete:        Ember.K,
      willDelete:        Ember.K,
      deleteWasCanceled: Ember.K,
      deleteSucceeded:   Ember.K,

      afterModel: function(model, transition) {
        this._super(model, transition);
        if (!this.canDelete(model)) {
          this.denyDelete(model, transition);
        }
      },

      setupController: function(controller, model) {
        this._super(controller, model);
        controller.set('confirmText', null);
        controller.get('validationErrors').clear();
        this.startTrackingDestroys(model);
      },

      resetController: function(controller, isExiting) {
        if (isExiting) {
          this.stopTrackingDestroys();
        }
      },

      renderTemplate: function() {
        this.render(this.get('controllerName'), {
          into:   'authenticated',
          outlet: 'modal'
        });
      }
    });



    return DeleteModal;
  });
define("forecast/mixin/destroy_tracker",
  ["forecast/utils/bus"],
  function(Bus) {
    "use strict";

    var DestroyTracker = Ember.Mixin.create({
      actions: {
        handleDestroy: function(type, destroyer) {
          this.render('shared/model_destroyed', {
            into:   'authenticated',
            outlet: 'modal',
            model: {
              type: type,
              destroyer: destroyer.get('name')
            }
          });
        },

        dismissDestroyModal: function() {
          this.transitionTo(this.get('dismissDestroyRoute'));
        }
      },

      dismissDestroyRoute: Ember.computed(function() {
        Ember.warn('You must implement `dismissDestroyRoute` when using the `DestroyTracker` mixin.');
      }),

      _trackedId: null,
      _trackedType: null,

      startTrackingDestroys: function(model) {
        var type = model.constructor.modelName;
        this.setProperties({
          _trackedId: model.get('id'),
          _trackedType: type
        });
        Bus.on('socket:destroy:' + type, this, 'trackDestroy');
      },

      stopTrackingDestroys: function() {
        var type = this.get('_trackedType');
        this.setProperties({
          _trackedId: null,
          _trackedType: null
        });
        Bus.off('socket:destroy:' + type, this, 'trackDestroy');
      },

      trackDestroy: function(modelId, destroyerId) {
        if (this.get('_trackedId') !== modelId) { return; }

        var type      = this.get('_trackedType'),
            destroyer = this.store.peekRecord('person', destroyerId);

        this.send('handleDestroy', type, destroyer);
      }
    });



    return DestroyTracker;
  });
define("forecast/mixin/expandable_rows",
  ["exports"],
  function(__exports__) {
    "use strict";
    var ExpandableRow = Ember.Mixin.create({
      actions: {
        toggleAssignments: function() {
          if(this.get('isShowingAssignments')) {
            this.collapseRow();
          } else {
            this.expandRow();
          }
        }
      },

      expandedRows: Ember.computed(function() {
        Ember.warn('You must implement `expandedRows` when using the `ExpandableRow` mixin.');
      }),
      activeModel: Ember.computed(function() {
        Ember.warn('You must implement `activeModel` when using the `ExpandableRow` mixin.');
      }),

      isShowingAssignments: function() {
        return this.get('expandedRows').contains(this.get('model.id'));
      }.property('expandedRows.[]'),

      isCollapsed: Em.computed.not('isShowingAssignments'),

      isActiveRow: function() {
        return (this.get('activeModel') === this.get('model'));
      }.property('activeModel.id', 'model.isLoaded'),

      activeRowObsever: function() {
        if (this.get('isActiveRow')) {
          Ember.run.next(this, 'expandRow');
        }
      }.observes('isActiveRow', 'model.id').on('init'),

      expandRow: function() {
        this.get('expandedRows').addObject(this.get('model.id'));
      },

      collapseRow: function() {
        this.get('expandedRows').removeObject(this.get('model.id'));
      }
    });

    var ExpandableRows = Ember.Mixin.create({
      actions: {
        expandAll: function() {
          var ids = this.get('visibleRows').mapBy('id');
          this.get('expandedRows').addObjects(ids);
        },

        collapseAll: function() {
          var ids = this.get('visibleRows').mapBy('id');
          this.get('expandedRows').removeObjects(ids);
        }
      },

      visibleRows: Ember.computed(function() {
        Ember.warn('You must implement `visibleRows` when using the `ExpandableRows` mixin.');
      }),

      expandedRows: function() {
        return Em.A();
      }.property()
    });


    __exports__.ExpandableRow = ExpandableRow;
    __exports__.ExpandableRows = ExpandableRows;
  });
define("forecast/mixin/fixed-label",
  ["forecast/utils/date"],
  function(__dependency1__) {
    "use strict";
    var numberOfWorkDays = __dependency1__.numberOfWorkDays;
    /**
     * Keeps the label <span> of a timeframe div in view at all times
     *
     * This is being mixed into AllocatedFrame and AssignmentFrame components that
     * render timeframes with labels on the timeline. As those timeframes can start
     * outside of the viewport the label should always stay visible.
     *
     * In order to do so its left offset is set relatively to the timeframe’s offset
     * and is pushed far enough to the right to stay on the first day of the timeline.
     *
     */


    var FixedLabel = Ember.Mixin.create({
      renderAssignmentLabel: function(offset) {
        offset = isFinite(offset) ? Math.round(offset) : 0;
        var delta = numberOfWorkDays(this.get('timelineStartDate'), this.get('startDate')) - offset,
            left  = 0;
        if(delta < 1) {
          left = Math.abs(delta) * this.get('dayWidth');
        }
        this.$('> span').css('left', left + 'px');
      }.observes('left', 'timelineStartDate'),

      setInitialOffset: function() {
        this.renderAssignmentLabel();
      }.on('didInsertElement')
    });


    return FixedLabel;
  });
define("forecast/mixin/harvest-connectable",
  [],
  function() {
    "use strict";
    var HarvestConnectable = Ember.Mixin.create({
      account: Ember.inject.controller('account'),

      harvestLink: function() {
        var base = this.get('account.model.harvestLink') || '';
        var resource = this.get('model.harvestLink') || '';
        return base + resource;
      }.property(
        'account.model.harvestLink',
        'model.harvestLink'
      )
    });


    return HarvestConnectable;
  });
define("forecast/mixin/last_updated",
  ["exports"],
  function(__exports__) {
    "use strict";
    var attr      = DS.attr,
        belongsTo = DS.belongsTo;

    var LastUpdated = Ember.Mixin.create({
      updated_at: attr('timestamp'),
      updated_by: belongsTo('person', { async: false, inverse: null })
    });

    var LastUpdatedAsync = Ember.Mixin.create({
      updated_at: attr('timestamp'),
      updated_by: belongsTo('person', { async: true, inverse: null })
    });



    __exports__.LastUpdated = LastUpdated;
    __exports__.LastUpdatedAsync = LastUpdatedAsync;
  });
define("forecast/mixin/legacy_router_target",
  [],
  function() {
    "use strict";
    var LegacyRouterTarget = Ember.Mixin.create({
      patch: function() {
        var owner = Ember.getOwner(this);
        this.set('target', owner.lookup('router:main'));
      }.on('init')
    });


    return LegacyRouterTarget;
  });
define("forecast/mixin/person_modal",
  ["forecast/utils/model","forecast/mixin/admin-only-access","forecast/mixin/destroy_tracker"],
  function(__dependency1__, AdminOnlyAccess, DestroyTracker) {
    "use strict";
    var changedKeysForGA = __dependency1__.changedKeysForGA;

    var PersonModal = Ember.Mixin.create(AdminOnlyAccess, DestroyTracker, {
      actions: {
        savePerson: function() {
          var account = this.modelFor('account'),
              form    = this.controllerFor('team/form'),
              person  = form.get('model'),
              route   = this,
              max_allocation_per_day;

          if (!form.validate()) { return; }

          max_allocation_per_day = form.get('maxAllocationPerDay');
          if (max_allocation_per_day === account.get('max_allocation_per_day')) {
            max_allocation_per_day = null;
          }

          person.setProperties({
            first_name:    form.get('first_name'),
            last_name:     form.get('last_name'),
            email:         form.get('email'),
            admin:         form.get('admin'),
            teams:         form.get('updatedTeams') || [], // Just in damn case.
            login:         form.get('login'),
            subscribed:    form.get('subscribed'),
            max_allocation_per_day: max_allocation_per_day
          });

          var creating = person.get('isNew');
          var changedKeys = changedKeysForGA(person);

          person.save()
            .then(function(person) {
              route.personWasSaved(person);

              if (creating) {
                route.get('gtm').sendGAEvent('person', 'create', 'save');
              } else {
                route.get('gtm').sendGAEvent('person', 'edit', 'save:{' + changedKeys + '}');
              }
            })
            .catch(route.personWasRejected.bind(route, person));

          this.send('close', person);
        },

        cancelPerson: function() {
          var person = this.controllerFor('team/form').get('model');
          var action = person.get('isNew') ? 'create' : 'edit';
          this.personWasRejected(person);
          this.send('close', person);
          this.get('gtm').sendGAEvent('person', action, 'cancel');
        },

        resendInvitation: function(person) {
          var route = this;
          person.invite().then(function() {
            route.send('notify', {
              type: 'success',
              text: 'The invitation was sent.'
            });
            route.get('gtm').sendGAEvent('person', 'resend_invitation');
          });
        },

        close: function(person) {
          this.controllerFor('team/form').get('validationErrors').clear();
          this.send('closeModal', person);
        }
      },

      gtm: Ember.inject.service('google-tag-manager'),

      personWasSaved:    Ember.K,
      personWasRejected: Ember.K,

      controllerName: 'team/form',

      setupController: function(controller, model) {
        controller.bindPerson(model);
        this.startTrackingDestroys(model);
      },

      resetController: function(controller, isExiting) {
        if (isExiting) {
          this.stopTrackingDestroys();
        }
      },

      renderTemplate: function(controller, model) {
        this.render('team/form', {
          into:   'authenticated',
          outlet: 'modal'
        });
      }
    });


    return PersonModal;
  });
define("forecast/mixin/plan_editor",
  [],
  function() {
    "use strict";
    var bool = Ember.computed.bool,
        alias = Ember.computed.alias;

    var PlanEditor = Ember.Mixin.create({
      subscription: Ember.computed(function() {
        Ember.warn('You must implement `subscription` when using the `PlanEditor` mixin.');
      }),
      totalPeople: Ember.computed(function() {
        Ember.warn('You must implement `totalPeople` when using the `PlanEditor` mixin.');
      }),

      totalScheduledPeople: function() {
        var totalPeople = parseInt(this.get('totalPeople'), 10);
        return isNaN(totalPeople) ? '?' : totalPeople;
      }.property('totalPeople'),

      isDiscounted:        bool('subscription.discount'),
      nextBillingDate:     alias('subscription.next_billing_date'),
      card:                alias('subscription.card'),
      amountPerPerson:     alias('subscription.amount_per_person'),

      discountMessage: function() {
        var percentOff = this.get('subscription.discount.percent_off');
        return "Discount: %@% off".fmt(percentOff);
      }.property(
        'subscription.discount.percent_off'
      ),

      baseAmountPerPerson: function() {
        if (!this.get('isDiscounted')) { return this.get('amountPerPerson'); }

        var amountPerPerson = this.get('amountPerPerson'),
            percentOff      = this.get('subscription.discount.percent_off');

        return (amountPerPerson * 100) / (100 - percentOff);
      }.property(
        'isDiscounted',
        'amountPerPerson'
      ),

      totalAddedAmount: function() {
        if (this.get('isPaywall')) {
          return parseInt(this.get('addedPeople'), 10) * this.get('amountPerPerson');
        } else {
          return 0;
        }
      }.property(
        'addedPeople',
        'amountPerPerson'
      ),

      totalAmount: function() {
        if (this.get('isPaywall')) {
          return this.get('subscription.amount') + this.get('totalAddedAmount');
        } else {
          return parseInt(this.get('totalPeople'), 10) * this.get('amountPerPerson');
        }
      }.property(
        'totalPeople',
        'amountPerPerson',
        'subscription.amount',
        'totalAddedAmount'
      )
    });


    return PlanEditor;
  });
define("forecast/mixin/project_modal",
  ["forecast/utils/model","forecast/mixin/admin-only-access","forecast/mixin/destroy_tracker"],
  function(__dependency1__, AdminOnlyAccess, DestroyTracker) {
    "use strict";
    var changedKeysForGA = __dependency1__.changedKeysForGA;

    var ProjectModal = Ember.Mixin.create(AdminOnlyAccess, DestroyTracker, {
      actions: {
        saveProject: function() {
          var route = this,
              form  = this.controllerFor('projects/form'),
              model = form.get('model');

          if (!form.validate()) { return; }

          var oldClientId = model.get('client.id');

          model.setProperties({
            name:   form.get('name'),
            color:  form.get('color'),
            code:   form.get('code'),
            notes:  form.get('notes'),
            client: form.get('selectedClient')
          });

          var creating = model.get('isNew');
          var additionalKeys;
          if (oldClientId !== model.get('client.id')) {
            additionalKeys = ['client'];
          }
          var changedKeys = changedKeysForGA(model, additionalKeys);

          model.save()
            .then(function(project) {
              route.projectWasSaved(project);

              if (creating) {
                route.get('gtm').sendGAEvent('project', 'create', 'save');
              } else {
                route.get('gtm').sendGAEvent('project', 'edit', 'save:{' + changedKeys + '}');
              }
            })
            .catch(route.projectWasRejected.bind(route, model));

          this.send('close', model);
        },

        cancelProject: function() {
          var project = this.controllerFor('projects/form').get('model');
          var action  = project.get('isNew') ? 'create' : 'edit';
          this.projectWasRejected(project);
          this.send('close', project);
          this.get('gtm').sendGAEvent('project', action, 'cancel');
        },

        close: function(project) {
          this.controllerFor('projects/form').get('validationErrors').clear();
          this.send('closeModal', project);
        }
      },

      gtm: Ember.inject.service('google-tag-manager'),

      canAccess:          Ember.K,
      denyAccess:         Ember.K,
      projectWasSaved:    Ember.K,
      projectWasRejected: Ember.K,

      controllerName: 'projects/form',

      setupController: function(controller, model) {
        this._super(controller, model);
        this.startTrackingDestroys(model);
        controller.setProperties(model.getProperties(
          'color', 'name', 'code', 'notes'
        ));
      },

      resetController: function(controller, isExiting) {
        if (isExiting) {
          this.stopTrackingDestroys();
          controller.set('edit_notes', false);
        }
      },

      afterModel: function(model, transition) {
        this._super(model, transition);
        if (!this.canAccess(model)) {
          this.denyAccess(model, transition);
        }
      },

      renderTemplate: function(controller, model) {
        this.render('projects/form', {
          into:   'authenticated',
          outlet: 'modal'
        });
      }
    });


    return ProjectModal;
  });
define("forecast/mixin/project_name_and_code",
  [],
  function() {
    "use strict";
    var ProjectNameAndCode = Ember.Mixin.create({
      nameWithCode: function() {
        var code = this.get('code');
        if(code) {
          return '[%@] %@'.fmt(code, this.get('name'));
        } else {
          return this.get('name');
        }
      }.property('name', 'code'),

      sortName: function() {
        var code = this.get('code');
        if(code) {
          return '%@ %@'.fmt(code, this.get('name'));
        } else {
          return this.get('name');
        }
      }.property('name', 'code')

    });



    return ProjectNameAndCode;
  });
define("forecast/mixin/schedule_properties",
  [],
  function() {
    "use strict";
    var alias = Ember.computed.alias;

    var ScheduleProperties = Ember.Mixin.create({
      schedule: Ember.inject.controller('schedule'),

      showDrawer:        alias('schedule.showDrawer'),
      rowHeaderWidth:    alias('schedule.rowHeaderWidth'),
      startDate:         alias('schedule.startDate'),
      endDate:           alias('schedule.endDate'),
      dayWidth:          alias('schedule.dayWidth'),
      todayIsInViewport: alias('schedule.todayIsInViewport'),
      defaultAssignmentStartDate: alias('schedule.defaultAssignmentStartDate')
    });


    return ScheduleProperties;
  });
define("forecast/mixin/scroll_to_top",
  [],
  function() {
    "use strict";
    var ScrollToTop = Ember.Mixin.create({
      scrollToTop: function() {
        $(document.body).scrollTop(0);
      }.on('activate')
    });



    return ScrollToTop;
  });
define("forecast/mixin/shift_modal",
  ["forecast/mixin/admin-only-access","forecast/mixin/destroy_tracker"],
  function(AdminOnlyAccess, DestroyTracker) {
    "use strict";

    var ShiftModal = Ember.Mixin.create(AdminOnlyAccess, DestroyTracker, {
      actions: {
        shift: function(from, to, include_milestones) {
          var route = this;
          var controller = this.get('controller');
          var model = controller.get('model');

          controller.set('isShifting', true);
          model.shift(from, to, include_milestones)
            .then(function(project) {
              var schedule = route.controllerFor('schedule');
              return schedule.refreshProject(project).then(function() {
                route.shiftWasSaved(project);
                controller.send('notify', {
                  type: 'success',
                  text: 'Project timeline successfully shifted to %@.'.fmt(
                    to.format('ddd, D MMM YYYY')
                  )
                });
                route.get('gtm').sendGAEvent('shift', 'project',
                  include_milestones ? 'save:{milestones}' : 'save',
                  to.diff(from, 'days')
                );
              });
            })
            .catch(function(reason) {
              controller.send('notify', {
                type: 'error',
                text: reason
              });
            })
            .finally(function() {
              controller.set('isShifting', false);
            });
        },
        confirm: function() {
          this.render('project/shift/confirm', {
            into:   'authenticated',
            outlet: 'modal',
            controller: this.controllerName
          });
        },
        cancelConfirm: function() {
          this.render('project/shift/form', {
            into:   'authenticated',
            outlet: 'modal',
            controller: this.controllerName
          });
        },
        cancel: function() {
          this.shiftWasCanceled(this.get('controller.model'));
          this.get('gtm').sendGAEvent('shift', 'project', 'cancel');
        }
      },

      shiftWasSaved: Ember.K,
      shiftWasCanceled: Ember.K,

      dismissDestroyRoute: Ember.computed(function() {
        Ember.warn('You must implement `dismissDestroyRoute` when using the `ShiftModal` mixin.');
      }),

      controllerName: 'project/shift',

      gtm: Ember.inject.service('google-tag-manager'),

      setupController: function(controller, model) {
        controller.resetFor(model);
        this.startTrackingDestroys(model);
      },

      afterModel: function(model, transition) {
        if (!model.get('canBeShifted')) {
          transition.abort();
          this.send('notify', {
            type: 'error',
            text: 'There are no assignments or milestones to shift.'
          });
        }
      },

      resetController: function(controller, isExiting) {
        if (isExiting) {
          this.stopTrackingDestroys();
        }
      },

      renderTemplate: function() {
        this.render('project/shift/form', {
          into:   'authenticated',
          outlet: 'modal',
          controller: this.controllerName
        });
      }
    });


    return ShiftModal;
  });
define("forecast/mixin/splitable_assignment",
  ["forecast/utils/date","forecast/utils/string","forecast/mixin/admin-only-access"],
  function(__dependency1__, __dependency2__, AdminOnlyAccess) {
    "use strict";
    var shift = __dependency1__.shift;
    var possessive = __dependency2__.possessive;

    var SplitableAssignment = Ember.Mixin.create(AdminOnlyAccess, {
      actions: {
        cancelSplitAssignment: function() {
          this.get('gtm').sendGAEvent('assignment', 'split', 'cancel');
          this.send('closeSplitAssignment');
        },

        splitAssignment: function(assignment, date) {
          var mixin      = this,
              start_date = date,
              end_date   = assignment.get('end_date'),
              allocation = assignment.get('allocation'),
              notes      = assignment.get('notes'),
              project    = assignment.get('project'),
              person     = assignment.get('person'),
              schedule   = this.controllerFor('schedule'),
              newAssignment;

          newAssignment = mixin.store.createRecord('assignment', {
            'start_date' : start_date.clone(),
            'end_date'   : end_date.clone(),
            'project'    : project,
            'person'     : person,
            'allocation' : allocation,
            'notes'      : notes
          });

          this.send('closeSplitAssignment');

          assignment.setProperties({
            end_date: shift(date, -1),
            repeated_assignment_set: null
          });

          schedule.addAssignment(newAssignment);

          assignment.save().then(function() {
            return newAssignment.save().then(function() {
              log('split assignment', assignment.get('id'), 'into:',
                  assignment.getProperties('id', 'start_date', 'end_date'),
                  newAssignment.getProperties('id', 'start_date', 'end_date'));
              mixin.get('gtm').sendGAEvent('assignment', 'split', 'save');

              var name = person ? person.get('first_name') : 'Everyone';

              mixin.send('notify', {
                text: possessive(name) + ' assignment has been split.',
                type: 'success'
              });
            });
          }).catch(function(reason) {
            schedule.removeAssignment(newAssignment);
            log('failed to split assignment',
                reason,
                assignment.getProperties('id', 'start_date', 'end_date'));
          });
        }
      },

      gtm: Ember.inject.service('google-tag-manager'),

      renderTemplate: function(controller, model) {
        this.render('shared/split_confirm', {
          into:      'authenticated',
          outlet:    'modal',
          controller: controller
        });
      }
    });


    return SplitableAssignment;
  });
define("forecast/models/account",
  ["forecast/utils/ajax","forecast/utils/config","forecast/services/working-time"],
  function(__dependency1__, Config, workingTime) {
    "use strict";
    var post = __dependency1__.post;

    var attr = DS.attr;

    var Account = DS.Model.extend({
      name:                   attr('string'),
      color_labels:           attr(),
      max_allocation_per_day: attr('hours_as_seconds'),
      harvest_subdomain:      attr('string'),

      isConnectedToHarvest: Ember.computed.bool('harvest_subdomain'),

      updateWorkingTimeService: function() {
        workingTime.set('default', this.get('max_allocation_per_day'));
      }.observes('max_allocation_per_day')
       .on('init'),

      harvestLink: function() {
        var subdomain = this.get('harvest_subdomain');
        if (subdomain) {
          return Config.HARVEST_URL_FMT.fmt(subdomain);
        }
      }.property('harvest_subdomain'),

      close: function(closeFeedback) {
        var url = '/accounts/%@/close'.fmt(this.get('id'));
        return post(url, closeFeedback);
      }
    });


    return Account;
  });
define("forecast/models/assignment",
  ["forecast/utils/date","forecast/utils/allocation_math","forecast/mixin/last_updated","forecast/services/working-time"],
  function(__dependency1__, __dependency2__, __dependency3__, WorkingTime) {
    "use strict";
    var numberOfWorkDays = __dependency1__.numberOfWorkDays;
    var isRangeWithinRange = __dependency1__.isRangeWithinRange;
    var multiplyAllocation = __dependency2__.multiplyAllocation;
    var LastUpdated = __dependency3__.LastUpdated;

    var attr      = DS.attr,
        belongsTo = DS.belongsTo;

    var Assignment = DS.Model.extend(LastUpdated, {
      start_date: attr('datestamp'),
      end_date:   attr('datestamp'),
      allocation: attr('hours_as_seconds'),
      notes:      attr(),
      ras_id:     attr(),

      cid: Ember.computed('id', function() {
        return this.get('id') || 'brand-new';
      }),

      repeated_assignment_set: belongsTo('repeated_assignment_set', { async: true }),
      project: belongsTo('project', { async: false }),
      person:  belongsTo('person', { async: false }),

      isCWTO: function() {
        return this.get('project.isTimeOff') && (this.get('person') === null);
      }.property('project.isTimeOff', 'person'),

      duration: function() {
        return numberOfWorkDays(this.get('start_date'), this.get('end_date')) + 1;
      }.property('start_date', 'end_date'),

      totalAllocation: function() {
        return multiplyAllocation(this.get('allocation'), this.get('duration'));
      }.property('allocation', 'duration'),

      canRepeat: Ember.computed.lte('duration', 5),

      // Returns the currently loaded assignments that are for the same
      // project and person as `this` (not including this).
      siblings: function() {
        return this.get('store').peekAll('assignment')
                                .filterBy('person.id', this.get('person.id'))
                                .filterBy('project.id', this.get('project.id'))
                                .rejectBy('id', this.get('id'));
      }.property('project', 'person'),

      // Get all assignments from the current assignment's project
      // and filter by the given person.
      // If there are any assignments that overlap with the current assignment,
      // return false. Otherwise return true
      canMoveTo: function(person) {
        var assignments = this.get('project.assignments')
                              .filterBy('person.id', person.get('id'));
        for (var i = 0; i < assignments.length; i++) {
          if (this.overlaps(assignments.objectAt(i))) {
            return false;
          }
        }
        return true;
      },

      // Return true if `this` overlaps with `other`, false otherwise.
      overlaps: function(other) {
        var thisStart  = this.get('start_date'),
            thisEnd    = this.get('end_date'),
            otherStart = other.get('start_date'),
            otherEnd   = other.get('end_date');

        return isRangeWithinRange(thisStart, thisEnd, otherStart, otherEnd);
      },

      inRange: function(rangestart, rangeend) {
        return isRangeWithinRange(
          this.get('start_date'),
          this.get('end_date'),
          rangestart,
          rangeend
        );
      },

      workingTime: function() {
        return WorkingTime;
      }.property(),

      save: function() {
        var assignment = this;

        if (this.get('project.isTimeOff')) { this.set('allocation', null); }
        this.updateWorkingTime();

        return this._super().catch(function(res) {
          var defaultMsg = assignment.get('isNew')
            ? 'Assignment could not be created'
            : 'Assignment cannot be updated';
          throw res.responseText ? JSON.parse(res.responseText).errors : defaultMsg;
        });
      },

      updateWorkingTime: function() {
        if (this.get('project.isNotTimeOff') && this.changedAttributes()['allocation']) {
          this.set('workingTime.lastUsed', this.get('allocation'));
        }
      },

      // Updates the assignment only if it has changes and doesn't overlap
      // with any of its siblings.
      //
      // Returns a promise that will either succeed with value set to
      // the newly saved assignment or fail with an error message.
      update: function() {
        var siblings = this.get('siblings');

        // fail-fast when we overlap an assignment that's already loaded
        for (var i = 0; i < siblings.length; i++) {
          if (this.overlaps(siblings.objectAt(i))) {
            return Ember.RSVP.reject('Assignments cannot overlap.');
          }
        }

        return this.save();
      },

      duplicate: function() {
        return this.store.createRecord('assignment', {
          start_date: this.get('start_date').clone(),
          end_date:   this.get('end_date').clone(),
          allocation: this.get('allocation'),
          notes:      this.get('notes'),
          project:    this.get('project'),
          person:     this.get('person')
        });
      }
    });


    return Assignment;
  });
define("forecast/models/client",
  ["forecast/mixin/last_updated"],
  function(__dependency1__) {
    "use strict";
    var LastUpdatedAsync = __dependency1__.LastUpdatedAsync;

    var attr    = DS.attr,
        hasMany = DS.hasMany;

    var Client = DS.Model.extend(LastUpdatedAsync, {
      name:     attr('string'),
      archived: attr('boolean', { defaultValue: false }),
      harvest_id: attr('string', { defaultValue: null }),

      projects: hasMany('project', { async: false }),
      activeProjects:   Ember.computed.filterBy('projects', 'archived', false),
      archivedProjects: Ember.computed.filterBy('projects', 'archived'),

      hasActiveProjects:   Ember.computed.notEmpty('activeProjects'),
      hasArchivedProjects: Ember.computed.notEmpty('archivedProjects'),

      isLinkedToHarvest: Ember.computed.bool('harvest_id'),

      unarchive: function() {
        this.set('archived', false);
        return this.save();
      }
    });


    return Client;
  });
define("forecast/models/current_user",
  [],
  function() {
    "use strict";
    var alias = Ember.computed.alias;

    var CurrentUser = DS.Model.extend({
      account_ids: DS.attr(),

      person: function() {
        return this.get('store').find('person', this.get('id'));
      }.property('id'),

      name:       alias('person.name'),
      first_name: alias('person.first_name'),
      email:      alias('person.email'),
      avatar_url: alias('person.avatar_url'),

      canSwitchAccounts: Ember.computed.gt('account_ids.length', 1)
    });


    return CurrentUser;
  });
define("forecast/models/harvest_client",
  ["forecast/models/harvest_model"],
  function(HarvestModel) {
    "use strict";

    var hasMany = DS.hasMany;

    var HarvestClient = HarvestModel.extend({
      harvest_projects: hasMany('harvest_project', { async: false }),

      projectsToImportCount: function() {
        return this.get('harvest_projects').filterBy('markedForImport').length;
      }.property('harvest_projects.@each.markedForImport'),

      hasUnimportedProjects: function() {
        return this.get('harvest_projects').any(function(project) {
          return !project.get('previouslyImported');
        });
      }.property('harvest_projects.@each.previouslyImported'),

      // Automatically set import:true on client if there are any
      // projects that are marked import:true
      projectsImportObserver: function() {
        Ember.run.scheduleOnce('afterRender', this, function() {
          if(this.get('harvest_projects').isAny('imported')) {
            this.set('imported', true);
          }
        });
      }.observes('harvest_projects.@each.imported'),

      // Automatically set imported:false to all non-previouslyImported projects
      // if their client sets imported:false
      clientImportObserver: function() {
        if(this.get('imported')) { return; }
        this.get('harvest_projects').forEach(function(project) {
          if (!project.get('previouslyImported')) {
            project.set('imported', false);
          }
        });
      }.observes('imported')
    });


    return HarvestClient;
  });
define("forecast/models/harvest_model",
  [],
  function() {
    "use strict";
    var attr = DS.attr;

    var HarvestModel = DS.Model.extend({
      name:     attr('string'),
      imported: attr('boolean'),

      previouslyImported: function() {
        return this.get('imported') && !this.get('hasDirtyAttributes');
      }.property('imported', 'hasDirtyAttributes'),

      markedForImport: function() {
        return this.get('imported') && !this.get('previouslyImported');
      }.property('imported', 'previouslyImported')
    });


    return HarvestModel;
  });
define("forecast/models/harvest_person",
  ["forecast/models/harvest_model"],
  function(HarvestModel) {
    "use strict";

    var HarvestPerson = HarvestModel.extend({
      will_be_merged: DS.attr('boolean')
    });



    return HarvestPerson;
  });
define("forecast/models/harvest_project",
  ["forecast/models/harvest_model","forecast/mixin/project_name_and_code"],
  function(HarvestModel, ProjectNameAndCode) {
    "use strict";

    var attr      = DS.attr,
        belongsTo = DS.belongsTo;

    var HarvestProject = HarvestModel.extend(ProjectNameAndCode, {
      code:           attr('string'),
      harvest_client: belongsTo('harvest_client', { async: false })
    });



    return HarvestProject;
  });
define("forecast/models/milestone",
  ["forecast/utils/date","forecast/mixin/last_updated"],
  function(__dependency1__, __dependency2__) {
    "use strict";
    var isWithinRange = __dependency1__.isWithinRange;
    var LastUpdated = __dependency2__.LastUpdated;

    var attr      = DS.attr,
        belongsTo = DS.belongsTo;

    var Milestone = DS.Model.extend(LastUpdated, {
      name: attr('string', { defaultValue: 'New Milestone' }),
      date: attr('datestamp'),

      project: belongsTo('project', { async: false }),

      inRange: function(rangestart, rangeend) {
        return isWithinRange(this.get('date'), rangestart, rangeend);
      },

      // Updates the milestone only if it has changes and doesn't overlap
      // with any other milestone of its project
      //
      // Returns a promise that will either succeed with value set to
      // the newly saved milestone or fail with an error message.
      update: function() {
        var deferred = Em.RSVP.defer(),
            siblings = this.get('project.milestones')
                           .rejectBy('id', this.get('id')),
            date;

        // if there aren't any changes, avoid making a request
        if (!this.get('hasDirtyAttributes')) {
          deferred.resolve(this);
          return deferred.promise;
        }

        date = this.get('date');

        // fail-fast when we overlap a milestone that's already loaded
        for (var i = 0; i < siblings.length; i++) {
          if (siblings.objectAt(i).get('date').isSame(date, 'day')) {
            deferred.reject('Milestones cannot overlap.');
            return deferred.promise;
          }
        }

        this.save()
          .then(function(saved) {
            deferred.resolve(saved);
          })
          .catch(function(res) {
            var msg = res.responseText ? JSON.parse(res.responseText).errors : 'Milestone cannot be updated';
            deferred.reject(msg);
          });

        return deferred.promise;
      }
    });


    return Milestone;
  });
define("forecast/models/person",
  ["forecast/mixin/last_updated","forecast/utils/ajax","forecast/utils/allocation_math","forecast/utils/streamed_array_proxy","forecast/utils/bus","forecast/services/working-time"],
  function(__dependency1__, __dependency2__, __dependency3__, StreamedArrayProxy, Bus, WorkingTime) {
    "use strict";
    var LastUpdatedAsync = __dependency1__.LastUpdatedAsync;
    var post = __dependency2__.post;
    var addAllocation = __dependency3__.addAllocation;

    var attr  = DS.attr,
        equal = Ember.computed.equal,
        not   = Ember.computed.not,
        bool  = Ember.computed.bool;

    var Person = DS.Model.extend(LastUpdatedAsync, {
      first_name:      attr(),
      last_name:       attr(),
      email:           attr(),
      admin:           attr('boolean', { defaultValue: true }),
      avatar_url:      attr(),
      teams:           attr('array',   { defaultValue: function() { return Ember.A(); } }),
      archived:        attr('boolean', { defaultValue: false }),
      login:           attr('string',  { defaultValue: 'disabled' }),
      harvest_user_id: attr('string',  { defaultValue: null }),
      subscribed:      attr('boolean'),
      max_allocation_per_day: attr('hours_as_seconds', { defaultValue: null }),

      isLinkedToHarvest: bool('harvest_user_id'),

      loginEnabled:  equal('login', 'enabled'),
      loginDisabled: equal('login', 'disabled'),
      isOnAccount:   not('loginDisabled'),
      isInvited:     equal('login', 'invited'),

      timeOffAssignments: Ember.computed.filter('assignments', function(assignment) {
        return assignment.get('project.isTimeOff');
      }),

      timeOffAssignmentsWithCWTO: Ember.computed.union(
        'timeOffAssignments',
        'cwtoAssignments'
      ),

      save: function() {
        var changed = this.changedAttributes();
        this.set('_isIridUser', this.get('loginEnabled') || (changed.login && changed.login[0] === 'enabled'));
        return this._super().then(function(person) {
          person.set('_isIridUser', undefined);
          return person;
        });
      },

      invite: function() {
        if (!this.get('isInvited')) {
          return Ember.RSVP.reject('This person has not been invited or already ' +
                                   'accepted their invitation.');
        }
        var endpoint = '/people/%@/resend_invitation'.fmt(this.get('id'));
        return post(endpoint);
      },

      name: function() {
        return this.get('first_name') + ' ' + this.get('last_name');
      }.property('first_name', 'last_name'),

      assignments: function() {
        return StreamedArrayProxy.create({ content: Em.A() });
      }.property(),

      cwtoAssignments: function() {
        return StreamedArrayProxy.create({ content: Em.A() });
      }.property(),

      assignmentsWithCWTO: Ember.computed.union(
        'assignments',
        'cwtoAssignments'
      ),

      archive: function() {
        var person = this;
        person.set('archived', true);
        return this.save()
          .then(function(archived) {
            log('archived person', archived.getProperties('id', 'name'));
            Bus.trigger('archive:person', archived);
            return archived;
          })
          .catch(function(reason) {
            log('failed to archive person', person.getProperties('id', 'name'));
            person.rollbackAttributes();
            throw reason;
          });
      },

      unarchive: function() {
        this.set('archived', false);
        return this.save()
          .then(function(person) {
            Bus.trigger('unarchive:person', person);
            return person;
          });
      },

      projects: function() {
        return StreamedArrayProxy.create({ content: Em.A() });
      }.property(),

      // cwtoProject is just the Time Off Project, accessed via the path
      // cwtoAssignments.firstObject.project
      // This is just a tiny optimization to avoid having to add multiple listeners
      // in the case of multiple cwtoAssignments. Because all we care about here is
      // if there's at least 1.
      projectsObserver: function() {
        var changed     = this.get('assignments').getEach('project').uniq(),
            cwtoProject = this.get('cwtoAssignments.firstObject.project');
        if (cwtoProject) { changed.addObject(cwtoProject); }
        this.get('projects').stream(changed);
      }.observes(
        'assignments.@each.project.isLoaded',
        'cwtoAssignments.firstObject.project.isLoaded'
      ),

      workingTime: function() {
        return WorkingTime;
      }.property(),

      maxAllocationPerDayOrDefault: Ember.computed.or('max_allocation_per_day',
                                                      'workingTime.default'),

      defaultAllocation: function() {
        var lastUsed   = this.get('workingTime.lastUsed');
        var allocation = this.get('maxAllocationPerDayOrDefault');
        return (lastUsed && lastUsed <= allocation) ? lastUsed : allocation;
      }.property('workingTime.lastUsed', 'maxAllocationPerDayOrDefault'),

      allocatedDays: function(start_date, end_date) {
        var days = Em.A(),
            number_of_days = end_date.diff(start_date, 'days'),
            offset,
            length;
        // Set up all visible days
        for (var i = 0; i <= number_of_days; ++i) {
          days[i] = {
            allocation: 0,
            isTimeOff : false
          };
        }
        // Allocate them by going through all assignments
        this.get('assignmentsWithCWTO').forEach(function(assignment) {
          offset = assignment.get('start_date').diff(start_date, 'days');
          length = assignment.get('end_date').diff(assignment.get('start_date'), 'days') + offset;
          if (offset < 0) {
            offset = 0;
          }
          if (length > number_of_days) {
            length = number_of_days;
          }
          length += 1;
          for (var i = offset; i < length; ++i) {
            days[i].allocation = addAllocation(days[i].allocation, assignment.get('allocation'));
            if (assignment.get('project.isTimeOff')) {
              days[i].isTimeOff = true;
            }
          }
        });
        return days;
      }
    });


    return Person;
  });
define("forecast/models/project",
  ["forecast/mixin/last_updated","forecast/utils/ajax","forecast/utils/date","forecast/utils/allocation_math","forecast/utils/streamed_array_proxy","forecast/mixin/project_name_and_code","forecast/utils/bus"],
  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, StreamedArrayProxy, ProjectNameAndCode, Bus) {
    "use strict";
    var LastUpdatedAsync = __dependency1__.LastUpdatedAsync;
    var post = __dependency2__.post;
    var toDateStamp = __dependency3__.toDateStamp;
    var addAllocation = __dependency4__.addAllocation;

    var jQuery = Ember.$;

    var attr      = DS.attr,
        belongsTo = DS.belongsTo;

    var Project = DS.Model.extend(LastUpdatedAsync, ProjectNameAndCode, {
      name:       attr('string'),
      color:      attr('string', { defaultValue: 'orange' }),
      code:       attr('string'),
      notes:      attr('string'),
      start_date: attr('datestamp'),
      end_date:   attr('datestamp'),
      archived:   attr('boolean', { defaultValue: false }),
      harvest_id: attr('string', { defaultValue: null }),

      client: belongsTo('client', { async: false }),

      future_scheduled_hours: [],
      remaining_budget: null,

      // We need a CP here to be able to sort projects by the client's name
      // http://stackoverflow.com/questions/24497123/sort-with-different-models-properties-in-ember
      clientName: function() {
        return this.get('isTimeOff') ? 'Time Off' : this.get('client.name');
      }.property(
        'client.name',
        'isTimeOff'
      ),

      isLinkedToHarvest: Ember.computed.bool('harvest_id'),

      assignments: function() {
        return StreamedArrayProxy.create({ content: Em.A() });
      }.property(),

      milestones: function() {
        return StreamedArrayProxy.create({ content: Em.A() });
      }.property(),

      isTimeOff:    Ember.computed.equal('color', 'black'),
      isNotTimeOff: Ember.computed.not('isTimeOff'),

      archive: function() {
        var project = this;
        project.set('archived', true);
        return this.save()
          .then(function(archived) {
            log('archived project', archived.getProperties('id', 'name'));
            Bus.trigger('archive:project', project);
            return archived;
          })
          .catch(function(reason) {
            log('failed to archive project', project.getProperties('id', 'name'));
            project.rollbackAttributes();
            throw reason;
          });
      },

      unarchive: function() {
        this.set('archived', false);
        return this.save()
          .then(function(project) {
            Bus.trigger('unarchive:project', project);
            return project;
          });
      },

      canBeShifted: Ember.computed.bool('start_date'),

      shift: function(from, to, include_milestones) {
        var project = this;
        var params = {
          from: from ? toDateStamp(from) : null,
          to: to ? toDateStamp(to) : null,
          include_milestones: !!include_milestones
        };
        return post('/projects/%@/shift'.fmt(this.get('id')), params)
          .then(function(response) {
            project.store.pushPayload('project', response);
            return project;
          })
          .catch(function(reason) {
            log('failed to shift project', project.getProperties('id', 'name'));
            throw reason || 'Project could not be shifted';
          });
      },

      people: function() {
        return StreamedArrayProxy.create({ content: Em.A() });
      }.property(),

      peopleObserver: function() {
        var changed = this.get('assignments').getEach('person').uniq();
        this.get('people').stream(changed);
      }.observes('assignments.@each.person.isLoaded'),

      futureScheduledHoursTotal: function() {
        return this.get('future_scheduled_hours').reduce(function(total, assignee) {
          return addAllocation(total, assignee.allocation);
        }, 0);
      }.property('future_scheduled_hours'),

      harvestLink: function() {
        if (this.get('isLinkedToHarvest')) {
          return '/projects/' + this.get('harvest_id') + '?tab=team';
        }
      }.property(
        'harvest_id',
        'isLinkedToHarvest'
      )
    });


    return Project;
  });
define("forecast/models/repeated_assignment_set",
  ["forecast/utils/ajax"],
  function(__dependency1__) {
    "use strict";
    var post = __dependency1__.post;
    var put = __dependency1__.put;
    var del = __dependency1__.del;

    var attr = DS.attr;
    var BaseRASPath = '/repeated_assignment_sets';

    var RepeatedAssignmentSet = DS.Model.extend({
      first_start_date: attr('datestamp'),
      last_end_date: attr('datestamp'),

      weeks: function() {
        var start = this.get('first_start_date'),
            end   = this.get('last_end_date');
        return end.diff(start, 'weeks') + 1;
      }.property('first_start_date', 'last_end_date'),

      update: function(assignment, repeatWeeks) {
        var updateUrl = BaseRASPath + '/' + this.get('id');
        var store = this.store;

        return put(updateUrl, {
          repeated_assignment_set: {
            assignment: assignment.serialize({ includeId: true }),
            weeks: repeatWeeks || this.get('weeks')
          }
        }).then(function(response) {
          // We need to mark this assignment as not dirty.
          // Socket updated and/or the refresh:repeated_assignment_set event
          // will update it once the right values come in.
          assignment.rollbackAttributes();
          var id = response.repeated_assignment_set.id;

          // NOTE: In future versions of ED, `pushPayload` will return the
          // model instances directly.
          store.pushPayload('repeated_assignment_set', response);
          return store.peekRecord('repeated_assignment_set', id);
        });
      },

      splitAt: function(assignment) {
        var rasId = this.get('id');
        var assignmentId = assignment.get('id');
        var splitUrl = [BaseRASPath, rasId, 'split', assignmentId].join('/');
        var store = this.store;

        return post(splitUrl).then(function(response) {
          // NOTE: In future versions of ED, `pushPayload` will return the
          // model instances directly.
          var ids = response.repeated_assignment_sets.mapBy('id');
          store.pushPayload('repeated_assignment_set', response);
          return ids.map(Ember.run.bind(store, 'peekRecord', 'repeated_assignment_set'));
        });
      }
    });

    RepeatedAssignmentSet.createFromAssignment = function(assignment, repeatWeeks) {
      var store = assignment.store;

      if (!assignment.get('canRepeat')) {
        return Ember.RSVP.reject(
          'Cannot repeat an assignment that is more than 5 days long.');
      }

      return post(BaseRASPath, {
        repeated_assignment_set: {
          weeks: repeatWeeks,
          assignment: assignment.serialize({ includeId: true })
        }
      }).then(function(response) {
        // NOTE: In future versions of ED, `pushPayload` will return the
        // model instances directly.
        var id = response.repeated_assignment_set.id;
        store.pushPayload('repeated_assignment_set', response);
        return store.peekRecord('repeated_assignment_set', id);
      });
    };


    return RepeatedAssignmentSet;
  });
define("forecast/models/subscription",
  ["forecast/utils/date","forecast/utils/ajax"],
  function(__dependency1__, __dependency2__) {
    "use strict";
    var makeDate = __dependency1__.makeDate;
    var post = __dependency2__.post;

    var attr  = DS.attr,
        equal = Ember.computed.equal,
        or    = Ember.computed.or;

    var Subscription = DS.Model.extend({
      status: attr(),
      purchased_people: attr('number'),
      amount_per_person: attr('number'),
      amount: attr('number'),
      interval: attr(),
      discount: attr(),
      card: attr(),
      address: attr(),
      next_billing_date: attr('datestamp'),
      receipt_recipient: attr('string'),

      inTrial:      equal('status', 'trial'),
      isSponsored:  equal('status', 'sponsored'),
      isPaid:       equal('status', 'paid'),
      isDelinquent: equal('status', 'delinquent'),
      isCanceled:   equal('status', 'canceled'),
      isBilled:     or('isPaid', 'isDelinquent', 'isCanceled'),

      daysLeft: function() {
        var now  = makeDate(),
            next = this.get('next_billing_date');

        return next.diff(now, 'day');
      }.property('next_billing_date'),

      needsUpgrade: function() {
        var inTrial  = this.get('inTrial'),
            daysLeft = this.get('daysLeft');

        return inTrial && (daysLeft <= 0);
      }.property('inTrial', 'daysLeft'),

      extendTrial: function() {
        var subscription = this;

        if (!this.get('needsUpgrade')) {
          return Ember.RSVP.reject('Subscription is not a trial');
        }

        return post('/billing/trial_extension').then(function(data) {
          var billing_date = makeDate(data.subscription.next_billing_date);
          subscription.set('next_billing_date', billing_date);
          return subscription;
        });
      }
    });


    return Subscription;
  });
define("forecast/models/user_connection",
  [],
  function() {
    "use strict";
    var UserConnection = DS.Model.extend({
      person: DS.belongsTo('person', { async: false }),
      last_active_at: DS.attr('timestamp')
    });


    return UserConnection;
  });
define("forecast/realtime/realtime",
  ["forecast/utils/model","forecast/utils/streamed_array_proxy","forecast/utils/bus"],
  function(__dependency1__, StreamedArrayProxy, Bus) {
    "use strict";
    var filterAll = __dependency1__.filterAll;
    var coerceId = __dependency1__.coerceId;

    var sort  = Ember.computed.sort,
        alias = Ember.computed.alias,
        not   = Ember.computed.not;

    function didArchive(existing, changed) {
      return existing && !existing.get('archived') && changed.archived;
    }

    function didUnarchive(existing, changed) {
      return existing && existing.get('archived') && !changed.archived;
    }

    var Realtime = Ember.Object.extend({
      // The current user Id. Set by the AuthenticatedRoute.
      currentUserId: null,

      // The current user, as a Person instance.
      currentUser: function() {
        return this.store.peekRecord('person', this.get('currentUserId'));
      }.property('currentUserId'),

      // The current user’s permissions
      isAdmin   : alias('currentUser.admin'),
      isViewOnly: not('isAdmin'),

      // All currently logged-in users
      loggedInUsers: function() {
        return StreamedArrayProxy.create({ content: Em.A() });
      }.property(),

      // Convenience CP - all currently logged-in users except the currentUser
      otherUsersOnline: function() {
        var currentUser = this.get('currentUser');
        return this.get('loggedInUsers').without(currentUser).sortBy('name');
      }.property('loggedInUsers.@each.isLoaded'),

      userConnections: filterAll('user_connection'),

      // userConnections in reverse chronological order
      sortedUserConnections: sort('userConnections.@each.last_active_at', function(a, b) {
        var aDate = a.get('last_active_at'),
            bDate = b.get('last_active_at');

        switch (true) {
          case aDate.isAfter(bDate): return -1;
          case aDate.isBefore(bDate): return 1;
          default: return 0;
        }
      }),

      // Returns the most recently userConnections, based on the
      // last_active_at property. Returns at most 5.
      recentConnections: function() {
        var loggedInUsers  = this.get('loggedInUsers');

        return this.get('sortedUserConnections').reject(function(conn) {
          return loggedInUsers.contains(conn.get('person'));
        }).slice(0, 5);
      }.property('sortedLastActivities.@each.last_active_at', 'loggedInUsers.[]'),

      // Connect to the socket and start handling messages.
      connect: function() {
        this.socket.connect();
      },

      // Watches the socket's `message` property and dispatches
      // the incoming data to the right handler.
      messageObserver: function() {
        var data = this.get('socket.message');
        var type, id;

        if (data.logged_in_user_ids) {
          log('SOCKET', 'logged_in_user_ids', data.logged_in_user_ids);
          this.handlers.users.call(this, data.logged_in_user_ids);
        } else if (data.reload) {
          log('SOCKET', 'reload', data.reload, data.version);
          this.handlers.reload.call(this, data.reload, data.version);
        } else if (data.announcement_reload) {
          log('SOCKET', 'announcement_reload');
          this.handlers.announcement_reload.call(this);
        } else {
          type = Object.keys(data.object)[0];
          id   = data.object[type].id;
          log('SOCKET', data.action, type, id, JSON.parse(JSON.stringify(data)));
          this.handlers[data.action].call(this, type, coerceId(id), coerceId(data.acting_user_id), data.object);
        }
      }.observes('socket.message'),

      handlers: {
        reload: function(level, version) {
          if (level === 'hard') {
            this.socket.close(4000, 'The client needs to be reloaded due to a deploy');
          }
          Bus.trigger('app:reload', level, version);
        },

        users: function(ids) {
          var users  = this.store.peekAll('person');
          var online = users.filter(function(user) {
            return ids.indexOf(user.get('id')) > -1;
          });
          this.get('loggedInUsers').stream(online);
        },

        announcement_reload: function() {
          Bus.trigger('announcement:reload');
        },

        create: function(type, id, userId, payload) {
          if (userId === this.get('currentUserId')) { return; }

          this.store.pushPayload(type, payload);

          Bus.trigger('socket:create:' + type, id, userId);
        },

        update: function(type, id, userId, payload) {
          var record = this.store.peekRecord(type, id);

          if (record && record.get('isDeleted')) { return; }

          if (type === 'project' || type === 'person') {
            if (didArchive(record, payload[type])) {
              Bus.trigger('archive:' + type, record, userId);
            } else if (didUnarchive(record, payload[type])) {
              Bus.trigger('unarchive:' + type, record, userId);
            }
          }

          this.store.pushPayload(type, payload);

          Bus.trigger('socket:update:' + type, id, userId);
        },

        destroy: function(type, id, userId, payload) {
          var record = this.store.peekRecord(type, id);

          if (!record || record.get('isSaving')) { return; }

          Bus.trigger('socket:destroy:' + type, id, userId);

          this.store.unloadRecord(record);
        },

        shift_project: function(type, id, userId, payload) {
          if (userId === this.get('currentUserId')) { return; }

          var record = this.store.peekRecord(type, id);
          if (record && record.get('isDeleted')) { return; }

          this.store.pushPayload(type, payload);
          Bus.trigger('socket:shift:project', id, userId);
        }
      }
    });



    return Realtime;
  });
define("forecast/realtime/socket",
  ["forecast/utils/config"],
  function(Config) {
    "use strict";

    var Socket = Ember.Object.extend({
      /**
       * The raw WebSocket object.
       */
      socket: null,

      /**
       * A boolean flag to keep track of whether the socket is actually
       * open or not.
       */
      isOpen: false,

      /**
       * As messages come in, they are parsed and assigned to
       * this property. The `realtime` instance observes this property
       * to handle the messages.
       */
      message: null,

      /**
       * The amount of time to wait before trying to reconnect. Will
       * be exponentially backed off as retries fail.
       */
      _reconnectDelay: 1000,

      /**
       * The onclose handler will automatically try to reconnect unless
       * this has been set to true and we *really* want to close the
       * socket. We probably don't need this, but it's here for
       * completeness' sake.
       */
      _forceClose: false,

      /**
       * The socket url to connect to. Lazily loaded to ensure that
       * the account information is in localStorage.
       */
      url: function() {
        var base      = Config.SOCKET_URL,
            accountId = window.localStorage.getItem('account_id'),
            token     = window.localStorage.getItem('access_token');

        return "%@?account_id=%@&access_token=%@".fmt(base, accountId, token);
      }.property(),

      /**
       * Connect to the socket and set up listeners.
       */
      connect: function() {
        var socket = new WebSocket(this.get('url'));

        this.setProperties({
          _forceClose: false,
          socket     : socket
        });

        socket.onopen    = this.onopen.bind(this);
        socket.onclose   = this.onclose.bind(this);
        socket.onmessage = this.onmessage.bind(this);
        socket.onerror   = this.onerror.bind(this);
      },


      /**
       * Reconnect gets called automatically by the `onclose` handler
       * unless we're force-closing the socket.
       *
       * It will keep trying to reconnect (with an exponential back-off)
       * until it's connected.
       */
      reconnect: function() {
        var delay = this.get('_reconnectDelay');

        this.set('isOpen', false);
        Ember.run.later(this, 'connect', delay);
        this.set('_reconnectDelay', delay * 2);
      },

      /**
       * Force-close the socket. Prevents automatic reconnection. If you call
       * this and want to re-open the socket, you'll have to manually call
       * `connect`.
       */
      close: function(code, reason) {
        this.set('_forceClose', true);
        this.get('socket').close(code, reason);
      },

      /* Socket Event Handlers */

      onopen: function(event) {
        this.set('isOpen', true);
      },

      onclose: function(event) {
        this.set('socket', null);
        this.set('isOpen', false);
        if (!this.get('_forceClose')) { this.reconnect(); }
      },

      onmessage: function(event) {
        this.set('message', JSON.parse(event.data));
      },

      onerror: function(event) {
      }
    });


    return Socket;
  });
define("forecast/router",
  ["forecast/utils/bounded_queue"],
  function(BoundedQueue) {
    "use strict";

    var Router = Ember.Router.extend({
      location: 'history',
      rootURL: '/',
      urlHistory: BoundedQueue.create({ max: 10 }),

      trackUrlHistory: function() {
        this.get('urlHistory').push(this.get('url'));
      }.on('didTransition')
    });

    function assignmentRoutes() {
      this.route('assignment', { path: '/assignments/:assignment_id' }, function() {
        this.route('edit');
        this.route('copy');
        this.route('split', { path: '/split/:timestamp'});
        this.route('confirm_for_repeated_set');
      });
    }

    Router.map(function() {
      this.route('authentication_callback', { path: '/:account_id/access_token/:access_token' });

      this.route('authenticated', { path: '/', resetNamespace: true }, function() {
        this.route('account', { path: '/:account_id', resetNamespace: true }, function() {

          this.route('about');
          this.route('upgrade');
          this.route('close');

          this.route('export', { resetNamespace: true });

          this.route('settings', { path: '/account', resetNamespace: true }, function() {
            this.route('harvest_connect');
            this.route('harvest_disconnect');

            this.route('billing', { resetNamespace: true }, function() {
              this.route('update_receipt_recipient');
              this.route('update_address');
              this.route('update_plan');
              this.route('update_card');
            });
          });

          this.route('import', { resetNamespace: true }, function() {
            this.route('step1');
            this.route('step2');
          });

          // --- Pages -------------------------------------------------------------
          this.route('team_page', { path: '/team', resetNamespace: true }, function() {
            this.route('new');
            this.route('edit', { path: '/:person_id/edit' });
            this.route('delete', { path: '/:person_id/delete' });
            this.route('archive', { path: '/:person_id/archive' });
          });
          this.route('team_archived_page', { path: '/team/archived' });
          this.route('team_import_page', { path: '/team/import' });

          this.route('projects_page', { path: '/projects', resetNamespace: true }, function() {
            this.route('new');
            this.route('edit', { path: '/:project_id/edit' });
            this.route('delete', { path: '/:project_id/delete' });
            this.route('archive', { path: '/:project_id/archive' });
            this.route('shift', { path: '/:project_id/shift' });
          });
          this.route('projects_archived_page', { path: '/projects/archived' });
          this.route('projects_import_page', { path: '/projects/import' });

          this.route('clients_page', { path: '/clients', resetNamespace: true }, function() {
            this.route('new');
            this.route('edit', { path: '/:client_id/edit' });
            this.route('delete', { path: '/:client_id/delete' });
          });
          this.route('clients_archived_page', { path: '/clients/archived' });

          // --- Schedule Views ----------------------------------------------------
          this.route('schedule', { resetNamespace: true }, function() {

            // --- Projects---------------------------------------------------
            this.route('projects', { resetNamespace: true }, function() {
              this.route('new');

              this.route('project', { path: '/:project_id', resetNamespace: true }, function() {
                this.route('edit');
                this.route('delete');
                this.route('archive');
                this.route('shift');
                this.route('new_person', { path: '/person/new' });
                assignmentRoutes.call(this);
                this.route('milestone', { path: '/milestones/:milestone_id' }, function() {
                  this.route('edit');
                });
              });
            });

            // --- Team ---------------------------------------------------------
            this.route('team', { resetNamespace: true },  function() {
              this.route('new');

              this.route('person', { path: '/:person_id', resetNamespace: true }, function() {
                this.route('edit');
                this.route('delete');
                this.route('archive');
                this.route('new_project', { path: '/project/new' });
                assignmentRoutes.call(this);
              });
            });
          });
        });
      });
    });


    return Router;
  });
define("forecast/routes/account",
  ["forecast/utils/bus","forecast/utils/ftux","forecast/utils/config"],
  function(Bus, FTUX, Config) {
    "use strict";

    var AccountRoute = Ember.Route.extend({
      features: Ember.inject.service(),
      announcement: Ember.inject.service(),

      actions: {
        dismissAnnouncement: function() {
          this.controllerFor('account').set('announcement', null);
          this.get('announcement').dismiss();
        }
      },

      beforeModel: function() {
        return Ember.RSVP.all([
          this.store.findAll('project'),
          this.store.findAll('person'),
          this.store.findAll('client'),
          this.store.findAll('user_connection')
        ]);
      },

      afterModel: function(model) {
        var currentUser = this.modelFor('authenticated').currentUser;
        Ember.Logger.setProperties({
          user: currentUser,
          account: model
        });
        this.get('features').setAccountId(model.get('id'));
        this._maybeInitializeFullStory(model, currentUser);
        this._checkFtux();
        this._checkAnnouncement();
        Bus.on('announcement:reload', this, '_checkAnnouncement');
      },

      _maybeInitializeFullStory: function(account, currentUser) {
        if (Config.ENVIRONMENT !== 'PRODUCTION') { return; }
        if (!this.get('features.fullStory')) { return; }

        /* jshint ignore:start */
        window['_fs_debug'] = false;
        window['_fs_host'] = 'www.fullstory.com';
        window['_fs_org'] = 'RkF';
        (function(m,n,e,t,l,o,g,y){
          g=m[e]=function(a,b){g.q?g.q.push([a,b]):g._api(a,b);};g.q=[];
          o=n.createElement(t);o.async=1;o.src='https://'+_fs_host+'/s/fs.js';
          y=n.getElementsByTagName(t)[0];y.parentNode.insertBefore(o,y);
          g.identify=function(i,v){g(l,{uid:i});if(v)g(l,v)};g.setUserVars=function(v){FS(l,v)};
          g.clearUserCookie=function(d,i){d=n.domain;while(1){n.cookie='fs_uid=;domain='+d+
          ';path=/;expires='+new Date(0);i=d.indexOf('.');if(i<0)break;d=d.slice(i+1)}}
        })(window,document,'FS','script','user');
        /* jshint ignore:end */

        currentUser.get('person').then(function(person) {
          var id = currentUser.get('id');

          window.FS.identify(id, {
            displayName: 'User ' + id,
            adminStatus_str: person.get('admin') ? 'Admin' : 'View Only'
          });
        });
      },

      _checkFtux: function() {
        var controller = this.controllerFor('account');
        FTUX.fetch(function(ftux) {
          if (ftux.step === 'welcome') {
            controller.set('ftux', {
              account_creator: ftux.account_creator
            });
          }
        });
      },

      _checkAnnouncement: function() {
        var controller = this.controllerFor('account');
        this.get('announcement').fetch(function(announcement) {
          controller.set('announcement', announcement);
        });
      }
    });


    return AccountRoute;
  });
define("forecast/routes/account/about",
  ["forecast/mixin/scroll_to_top"],
  function(ScrollToTop) {
    "use strict";

    var AboutRoute = Ember.Route.extend(ScrollToTop, {
    });


    return AboutRoute;
  });
define("forecast/routes/account/clients_archived_page",
  ["forecast/utils/model","forecast/mixin/admin-only-access","forecast/mixin/scroll_to_top"],
  function(__dependency1__, AdminOnlyAccess, ScrollToTop) {
    "use strict";
    var isArchived = __dependency1__.isArchived;

    var ClientsArchivedPageRoute = Ember.Route.extend(AdminOnlyAccess, ScrollToTop, {
      actions: {
        unarchiveClient: function(client) {
          var route = this;

          client.unarchive()
          .then(function() {
            log('unarchived client', client.getProperties('id', 'name'));
            route.send('notify', {
              text: '%@ has been restored.'.fmt(client.get('name')),
              type: 'success'
            });
            route.get('gtm').sendGAEvent('client', 'unarchive');
          })
          .catch(function() {
            log('failed to unarchive client', client.getProperties('id', 'name'));
            client.rollbackAttributes();
          });
        }
      },

      gtm: Ember.inject.service('google-tag-manager'),

      model: function() {
        return this.store.filter('client', isArchived);
      }
    });



    return ClientsArchivedPageRoute;
  });
define("forecast/routes/account/close",
  ["forecast/mixin/admin-only-access"],
  function(AdminOnlyAccess) {
    "use strict";

    var CloseRoute = Ember.Route.extend(AdminOnlyAccess, {
      actions: {
        didTransition: function() {
          this.send('closeAuthenticatedModal');
        },

        closeAccount: function() {
          var account = this.modelFor('account'),
              ctrl    = this.controller,
              route   = this;

          if (!this.confirmDeletion()) { return; }

          ctrl.set('isCancelingAccount', true);

          account.close(ctrl.get('closeFeedback'))
            .then(function() {
              route.send('signout', { account_closed: true });
            })
            .catch(function(response) {
              var reason = '';

              // We automatically handle 422s with our request:error event
              if (response.status === 422) {
                reason = response.responseText;
              } else {
                route.send('notify', {
                  text: 'There was a problem. Please try again.',
                  type: 'error'
                });
              }

              log('failed to close account', reason);
              ctrl.set('isCancelingAccount', false);
            });
        },

        cancel: function() {
          this.transitionTo('settings');
        }
      },

      model: function() {
        return {
          options: [
            { value: 'using-another-account',
              description: 'I’m using another Forecast account',
              explanation: null
            },
            { value: 'starting-a-new-account',
              description: 'Closing this account so I can start a new one',
              explanation: null
            },
            { value: 'lacks-a-key-feature',
              description: 'Forecast lacks a key feature',
              prompt: 'Can you elaborate on what you needed?',
              explanation: null
            },
            { value: 'workflow-mismatch',
              description: 'Forecast doesn’t fit with our workflow',
              prompt: 'What’s the most important thing you cannot do with Forecast?',
              explanation: null
            },
            { value: 'too-expensive',
              description: 'It’s too expensive',
              explanation: null
            },
            { value: 'other',
              description: 'Other',
              prompt: 'Can you please elaborate?',
              explanation: null
            }
          ]
        };
      },

      resetController: function(controller, isExiting) {
        controller.setProperties({
          reason: null,
          feedback: null
        });
      },

      confirmDeletion: function() {
        return window.confirm('Are you absolutely sure you want to permanently close this account?');
      }
    });


    return CloseRoute;
  });
define("forecast/routes/account/index",
  [],
  function() {
    "use strict";
    var AccountIndexRoute = Ember.Route.extend({
      beforeModel: function() {
        var account = this.modelFor('account');
        this.transitionTo('schedule', account);
      }
    });


    return AccountIndexRoute;
  });
define("forecast/routes/account/projects_archived_page",
  ["forecast/utils/model","forecast/mixin/admin-only-access","forecast/mixin/scroll_to_top"],
  function(__dependency1__, AdminOnlyAccess, ScrollToTop) {
    "use strict";
    var isArchived = __dependency1__.isArchived;

    var ProjectsArchivedPageRoute = Ember.Route.extend(AdminOnlyAccess, ScrollToTop, {
      actions: {
        unarchiveProject: function(project) {
          var route = this;

          project.unarchive()
          .then(function() {
            log('unarchived project', project.getProperties('id', 'nameWithCode'));
            route.send('notify', {
              text: '%@ has been restored.'.fmt(project.get('nameWithCode')),
              type: 'success'
            });
            route.get('gtm').sendGAEvent('project', 'unarchive');
          })
          .catch(function() {
            log('failed to unarchive project', project.getProperties('id', 'nameWithCode'));
            project.rollbackAttributes();
          });
        }
      },

      model: function() {
        return this.store.filter('project', isArchived);
      },

      gtm: Ember.inject.service('google-tag-manager')
    });


    return ProjectsArchivedPageRoute;
  });
define("forecast/routes/account/projects_import_page",
  ["forecast/utils/ajax","forecast/mixin/admin-only-access","forecast/mixin/scroll_to_top"],
  function(__dependency1__, AdminOnlyAccess, ScrollToTop) {
    "use strict";
    var post = __dependency1__.post;

    var ProjectsImportPageRoute = Ember.Route.extend(AdminOnlyAccess, ScrollToTop, {
      backTransition: function() {
        var history = this.get('router.urlHistory').toArray();
        return history[history.length - 2] || 'projects_page';
      }.property('router.urlHistory.[]'),

      actions: {
        doImport: function() {
          this.importAndTransition(this.get('backTransition'));
        },

        skipImport: function() {
          this.transitionTo(this.get('backTransition'));
        }
      },

      model: function(params) {
        if(!this.modelFor('account').get('isConnectedToHarvest')) { return []; }
        return this.store.findAll('harvest_client');
      },

      setupController: function(controller, model) {
        this._super(controller, model);
        controller.set('isInHarvestConnectFlow', false);
        model.forEach(function(client) {
          client.get('harvest_projects').invoke('rollbackAttributes');
          client.rollbackAttributes();
        });
      },

      importAndTransition: function(routeName) {
        var route    = this,
            form     = this.controllerFor('account.projects_import_page'),
            clients  = this.store.peekAll('harvest_client').filterBy('hasDirtyAttributes'),
            projects = this.store.peekAll('harvest_project').filterBy('hasDirtyAttributes'),
            data     = {
              client_ids:  clients.mapBy('id'),
              project_ids: projects.mapBy('id')
            };

        form.set('isImporting', true);
        post('/harvest/client_project_imports', data)
          .then(function(response) {
            route.store.pushPayload('project', { projects: response.projects });
            route.store.pushPayload('client',  { clients:  response.clients });
            route.send('notify', {
              text: 'Your clients and projects have been imported.',
              type: 'success'
            });
            clients.invoke('transitionTo', 'loaded.saved');
            projects.invoke('transitionTo', 'loaded.saved');
            route.transitionTo(routeName);
          }).finally(function() {
            form.set('isImporting', false);
          });
      }
    });


    return ProjectsImportPageRoute;
  });
define("forecast/routes/account/team_archived_page",
  ["forecast/utils/model","forecast/mixin/admin-only-access","forecast/mixin/scroll_to_top"],
  function(__dependency1__, AdminOnlyAccess, ScrollToTop) {
    "use strict";
    var isArchived = __dependency1__.isArchived;

    var TeamArchivedPageRoute = Ember.Route.extend(AdminOnlyAccess, ScrollToTop, {
      actions: {
        unarchivePerson: function(person) {
          var route        = this,
              subscription = this.controllerFor('subscription');

          if (!subscription.canAddPeople(1)) {
            this.send('showPaywallModal');
            return;
          }

          person.unarchive()
            .then(function() {
              log('unarchived person', person.getProperties('id', 'name'));
              route.send('notify', {
                text: '%@ has been restored.'.fmt(person.get('name')),
                type: 'success'
              });
              route.get('gtm').sendGAEvent('person', 'unarchive');
            })
            .catch(function() {
              log('failed to unarchive person', person.getProperties('id', 'name'));
              person.rollbackAttributes();
            });
        }
      },

      model: function() {
        return this.store.filter('person', isArchived);
      },

      gtm: Ember.inject.service('google-tag-manager'),
    });


    return TeamArchivedPageRoute;
  });
define("forecast/routes/account/team_import_page",
  ["forecast/utils/ajax","forecast/mixin/admin-only-access","forecast/mixin/scroll_to_top"],
  function(__dependency1__, AdminOnlyAccess, ScrollToTop) {
    "use strict";
    var post = __dependency1__.post;

    var TeamImportPageRoute = Ember.Route.extend(AdminOnlyAccess, ScrollToTop, {
      actions: {
        doImport: function() {
          this.importAndTransition('team_page');
        },

        skipImport: function() {
          this.transitionTo('team_page');
        }
      },

      model: function(params) {
        if(!this.modelFor('account').get('isConnectedToHarvest')) { return []; }
        return this.store.findAll('harvest_person');
      },

      setupController: function(controller, model) {
        this._super(controller, model);
        controller.set('isInHarvestConnectFlow', false);
        model.invoke('rollbackAttributes');
      },

      importAndTransition: function(routeName) {
        var route        = this,
            form         = this.controllerFor('account.team_import_page'),
            people       = this.store.peekAll('harvest_person').filterBy('hasDirtyAttributes'),
            data         = { person_ids: people.mapBy('id') },
            subscription = this.controllerFor('subscription'),
            paywall      = this.controllerFor('billing/paywall'),
            peopleToAdd  = form.get('peopleToAddCount');

        if (!subscription.canAddPeople(peopleToAdd)) {
          this.send('showPaywallModal', { addedPeople: peopleToAdd });
          return;
        }

        form.set('isImporting', true);
        post('/harvest/person_imports', data)
          .then(function(response) {
            route.store.pushPayload('person', response);
            route.send('notify', {
              text: 'Your team has been imported.',
              type: 'success'
            });
            people.invoke('transitionTo', 'loaded.saved');
            route.transitionTo(routeName);
          }).finally(function() {
            form.set('isImporting', false);
          });
      }
    });


    return TeamImportPageRoute;
  });
define("forecast/routes/account/upgrade",
  ["forecast/mixin/admin-only-access"],
  function(AdminOnlyAccess) {
    "use strict";

    var UpgradeRoute = Ember.Route.extend(AdminOnlyAccess, {
      actions: {
        didTransition: function() {
          var subscription = this.controllerFor('subscription');

          this.send('closeAuthenticatedModal');
          if (subscription.get('isPaid')) {
            this.send('notify', { text: 'You’re all paid up! Please Forecast away!' });
            this.transitionTo('schedule');
          }
        },

        upgradeToPaidPlan: function(props) {
          var subscription = this.controllerFor('subscription').get('model'),
              route        = this;

          subscription.setProperties({
            purchased_people:  props.totalPeople,
            receipt_recipient: props.receipt_recipient,
            address:           props.address,
            card: {
              stripe_token: props.stripeToken.id,
              brand:        props.stripeToken.card.brand,
              last_four:    props.stripeToken.card.last4,
              expiry_month: props.stripeToken.card.exp_month,
              expiry_year:  props.stripeToken.card.exp_year
            }
          });

          subscription.save().then(function() {
            log('upgraded from trial to paid');
            route.send('notify', {
              text: 'Success! Your Forecast account has been upgraded.',
              type: 'success'
            });
            route.transitionTo('schedule');
            route.get('gtm').sendGAEvent('subscription', 'convert', null,
                                         subscription.get('purchased_people'));
          });
        }
      },

      gtm: Ember.inject.service('google-tag-manager')
    });


    return UpgradeRoute;
  });
define("forecast/routes/application",
  ["forecast/utils/ajax","forecast/utils/config","forecast/utils/bus"],
  function(__dependency1__, Config, Bus) {
    "use strict";
    var RequestStatus = __dependency1__.RequestStatus;

    var ApplicationRoute = Ember.Route.extend({
      actions: {
        notify: function(message) {
          this.controllerFor('notifications').addMessage(message);
        },

        error: function(error) {
          if (Ember.onerror) {
            Ember.onerror(error);
            return true;
          }
        }
      },

      setupListeners: function() {
        Bus.on('app:reload', this, 'reload');
        Bus.on('connection:offline', this, 'wentOffline');
        Bus.on('connection:online',  this, 'cameOnline');
      }.on('activate'),

      wentOffline: function() {
        this.render('offline', {
          outlet: 'offline',
          into:   'application'
        });
      },

      cameOnline: function() {
        this.disconnectOutlet({
          outlet:     'offline',
          parentView: 'application'
        });
      },

      reload: function(level, version) {
        if (level === 'hard') {
          RequestStatus.set('disabled', true);
          this.render('application/reload', {
            outlet: 'reloadWarning',
            into:   'application'
          });
        }
      },

      activate: function() {
        Ember.$('#accelerating-to-88').remove();
      }
    });


    return ApplicationRoute;
  });
define("forecast/routes/authenticated",
  ["forecast/adapters/application","forecast/utils/config","forecast/utils/bus"],
  function(ApplicationAdapter, Config, Bus) {
    "use strict";

    var AuthenticatedRoute = Ember.Route.extend({
      actions: {
        signout: function(params) {
          var signoutPath = '/forecast/sign_out';
          if (params) { signoutPath += '?' + Ember.$.param(params); }
          this.unauthenticate();
          this.redirectToIrID(signoutPath);
        },

        showNeedsUpgradeModal: function() {
          this.render('billing/needs_upgrade_modal', {
            into:   'authenticated',
            outlet: 'modal'
          });
        },

        showNeedsReactivationModal: function() {
          this.render('billing/needs_reactivation_modal', {
            into:       'authenticated',
            outlet:     'modal',
            controller: 'billing/reactivate'
          });
        },

        showTrialAutoExtendModal: function() {
          this.render('billing/trial_auto_extend_modal', {
            into:   'authenticated',
            outlet: 'modal'
          });
        },

        showPaywallModal: function(props) {
          var paywall = this.controllerFor('billing/paywall');
          paywall.reset(props || {});
          this.render('billing/paywall', {
            into: 'authenticated',
            outlet: 'modal',
            controller: paywall
          });
        },

        closeTrialAutoExtendModal: function() {
          this.set('didAutoExtendTrial', false);
          this.send('closeAuthenticatedModal');
        },

        closeAuthenticatedModal: function() {
          this.disconnectOutlet({
            parentView: 'authenticated',
            outlet:     'modal'
          });
        },

        navigateToUpgradePage: function() {
          this.transitionTo('account.upgrade');
        },

        didTransition: function() {
          var subscription = this.controllerFor('subscription');

          if (this.get('didAutoExtendTrial')) {
            this.send('showTrialAutoExtendModal');
          } else if (subscription.get('needsUpgrade')) {
            this.send('showNeedsUpgradeModal');
          } else if (subscription.get('isCanceled')) {
            this.send('showNeedsReactivationModal');
          }
        }
      },

      didAutoExtendTrial: false,

      gtm: Ember.inject.service('google-tag-manager'),

      setupListeners: function() {
        Bus.on('request:unauthorized', this, 'onUnauthorizedRequest');
      }.on('init'),

      beforeModel: function(transition) {
        var token      = window.localStorage.getItem('access_token'),
            account_id = Ember.getWithDefault(transition.params,
                                              'account.account_id',
                                              window.localStorage.getItem('account_id'));

        if (!token || !account_id) {
          transition.abort();
          if (account_id) {
            this.redirectToIrID('/forecast?' + Ember.$.param({
              account_id: account_id,
              return_to: this.router.get('url')
            }));
          } else {
            this.redirectToIrID('/forecast');
          }
        } else {
          this.authenticate(account_id, token);
        }
      },

      model: function() {
        var subscriptionController = this.controllerFor('subscription');
        var route = this;

        return Ember.RSVP.hash({
          subscription: this.store.findSingleton('subscription'),
          currentUser: this.store.findSingleton('current_user')
        }).then(function(results) {
          var subscription = results.subscription;
          var user = results.currentUser;
          subscriptionController.set('model', subscription);
          return route.checkSubscription(subscription, user).then(function() {
            return { currentUser: user };
          });
        });
      },

      afterModel: function(model, transition) {
        var self = this;
        var env = Config.ENVIRONMENT;

        model.currentUser.get('person').then(function(person) {
          self._initRealtime(model.currentUser.get('id'));
        });

        if (env === 'PRODUCTION' || env === 'STAGING') {
          this.get('gtm').initialize();
        }
      },

      _initRealtime: function(currentUserId) {
        this.realtime.set('currentUserId', currentUserId);
        this.realtime.connect();
      },

      checkSubscription: function(subscription, user) {
        var route = this;

        return user.get('person').then(function(person) {
          if (!person.get('admin')) {
            return Ember.RSVP.resolve();
          }

          return subscription.extendTrial()
            .then(function() {
              route.set('didAutoExtendTrial', true);
            })
            .catch(function() {});
        });
      },

      redirectToIrID: function(path) {
        window.location.href = Config.AUTH_URL + (path || '/');
      },

      onUnauthorizedRequest: function(data) {
        this.redirectToIrID('/forecast?' + Ember.$.param({
          login_error: data.reason,
          account_id:  data.account_id
        }));
      },

      authenticate: function(account_id, token) {
        window.localStorage.setItem('account_id', account_id);

        ApplicationAdapter.reopen({
          headers: {
            'Authorization':      'Bearer ' + token,
            'Forecast-Account-ID': account_id
          }
        });
      },

      unauthenticate: function() {
        window.localStorage.removeItem('account_id');
        window.localStorage.removeItem('access_token');
      }
    });


    return AuthenticatedRoute;
  });
define("forecast/routes/authenticated/index",
  [],
  function() {
    "use strict";
    var AuthenticatedIndexRoute = Ember.Route.extend({
      beforeModel: function() {
        var accountId = window.localStorage.getItem('account_id');
        this.transitionTo('schedule', accountId);
      }
    });


    return AuthenticatedIndexRoute;
  });
define("forecast/routes/authentication_callback",
  [],
  function() {
    "use strict";
    var AuthenticationCallbackRoute = Ember.Route.extend({
      model: function(params, transition) {
        window.localStorage.setItem('account_id',   params.account_id);
        window.localStorage.setItem('access_token', params.access_token);
        this.transitionTo(transition.queryParams.return_to || 'authenticated');
      }
    });


    return AuthenticationCallbackRoute;
  });
define("forecast/routes/billing",
  [],
  function() {
    "use strict";
    var BillingRoute = Ember.Route.extend({
      actions: {
        didTransition: function() {
          var subscription = this.controllerFor('subscription');
          if (subscription.get('isBilled')) { return true; }
          this.transitionTo('schedule');
        },
        close: function() {
          this.transitionTo('settings');
        }
      }
    });


    return BillingRoute;
  });
define("forecast/routes/billing/update_address",
  [],
  function() {
    "use strict";
    var BillingUpdateAddressRoute = Ember.Route.extend({
      actions: {
        save: function() {
          var form         = this.controllerFor('billing/update_address'),
              address      = form.get('address'),
              subscription = form.get('model');

          if (!form.validate()) { return; }
          form.set('isSubmitDisabled', true);

          subscription.set('address', address);

          subscription.save().then(Ember.run.bind(this, function() {
            log('Updated billing address:', address);
            this.send('notify', {
              text: 'Your billing address has been updated.',
              type: 'success'
            });
            this.send('close');
          }));
        }
      },

      model: function() {
        return this.controllerFor('subscription').get('model');
      },

      setupController: function(controller, model) {
        this._super(controller, model);
        controller.setProperties({
          isSubmitDisabled: false,
          address: Ember.copy(model.get('address'))
        });
      },

      renderTemplate: function(controller, model) {
        this.render('billing/update_address', {
          into:   'authenticated',
          outlet: 'modal'
        });
      }
    });


    return BillingUpdateAddressRoute;
  });
define("forecast/routes/billing/update_card",
  ["forecast/mixin/credit_card_form"],
  function(CreditCardForm) {
    "use strict";

    var BillingUpdateCardRoute = Ember.Route.extend(CreditCardForm, {
      actions: {
        didTransition: function() {
          this.showCardForm();
          return true;
        }
      },

      checkoutFormConfig: {
        options: function() {
          var subscription = this.controllerFor('subscription');

          return {
            email: subscription.get('receipt_recipient'),
            panelLabel: 'Update Card',
            description: 'Next Billing Date: %@ '.fmt(
              subscription.get('next_billing_date').format('DD MMM YYYY')
            ),
          };
        },

        closedWithToken: function(token) { this.updateCard(token); },
        closedWithoutToken: function() { this.send('close'); }
      },

      updateCard: function(token) {
        var subscription = this.controllerFor('subscription'),
            route        = this;

        subscription.updateCard(token).then(function() {
          log('Card updated:', token.card);
          route.send('close');
          route.send('notify', {
            text: 'You have updated your card.',
            type: 'success'
          });
        });
      }
    });


    return BillingUpdateCardRoute;
  });
define("forecast/routes/billing/update_plan",
  [],
  function() {
    "use strict";
    var BillingUpdatePlanRoute = Ember.Route.extend({
      actions: {
        update: function() {
          var form         = this.controllerFor('billing/update_plan'),
              totalPeople  = parseInt(form.get('totalPeople'), 10),
              subscription = this.controllerFor('subscription');

          if (!form.validate()) { return; }
          form.set('isSubmitDisabled', true);

          var oldTotalPeople = subscription.get('purchased_people');

          subscription.updatePlan(totalPeople).then(Ember.run.bind(this, function() {
            log('Updated plan to', totalPeople, 'purchased users');
            this.send('notify', {
              text: 'You have updated your plan to %@ %@.'.fmt(
                totalPeople, totalPeople > 1 ? 'people' : 'person'
              ),
              type: 'success'
            });
            this.send('close');
            this.get('gtm').sendGAEvent('subscription', 'update', null,
                                        (totalPeople - oldTotalPeople));
          }));
        }
      },

      gtm: Ember.inject.service('google-tag-manager'),

      model: function() {
        return this.controllerFor('subscription').get('model');
      },

      setupController: function(controller, model) {
        this._super(controller, model);
        controller.set('isSubmitDisabled', false);
      },

      renderTemplate: function(controller, model) {
        this.render('billing/update_plan', {
          into:   'authenticated',
          outlet: 'modal'
        });
      }
    });


    return BillingUpdatePlanRoute;
  });
define("forecast/routes/billing/update_receipt_recipient",
  [],
  function() {
    "use strict";
    var BillingUpdateReceiptRecipientRoute = Ember.Route.extend({
      actions: {
        save: function() {
          var form         = this.controllerFor('billing/update_receipt_recipient'),
              email        = form.get('receipt_recipient'),
              subscription = form.get('model');

          if (!form.validate()) { return; }
          form.set('isSubmitDisabled', true);

          subscription.set('receipt_recipient', email);

          subscription.save().then(Ember.run.bind(this, function() {
            log('Updated receipt receipt to ' + email);
            this.send('notify', {
              text: 'Receipt recipient has been updated.',
              type: 'success'
            });
            this.send('close');
          }));
        }
      },

      model: function() {
        return this.controllerFor('subscription').get('model');
      },

      setupController: function(controller, model) {
        this._super(controller, model);
        controller.set('isSubmitDisabled', false);
      },

      renderTemplate: function(controller, model) {
        this.render('billing/update_receipt_recipient', {
          into:   'authenticated',
          outlet: 'modal'
        });
      }
    });


    return BillingUpdateReceiptRecipientRoute;
  });
define("forecast/routes/clients_page",
  ["forecast/utils/model","forecast/mixin/admin-only-access"],
  function(__dependency1__, AdminOnlyAccess) {
    "use strict";
    var isSavedAndActive = __dependency1__.isSavedAndActive;

    var ClientsPageRoute = Ember.Route.extend(AdminOnlyAccess, {
      actions: {
        addClient: function() {
          this.transitionTo('clients_page.new');
        },
        goToProjectsImport: function() {
          this.transitionTo('account.projects_import_page');
        }
      },

      model: function() {
        return this.store.filter('client', isSavedAndActive);
      }
    });



    return ClientsPageRoute;
  });
define("forecast/routes/clients_page/delete",
  ["forecast/mixin/delete_modal"],
  function(DeleteModal) {
    "use strict";

    var ClientsPageDeleteRoute = Ember.Route.extend(DeleteModal, {
      willDelete: function(client) {
        this.transitionTo('clients_page');
      },

      deleteWasCanceled: function(client) {
        this.transitionTo('clients_page.edit', client);
        this.get('gtm').sendGAEvent('client', 'delete', 'cancel');
      },

      deleteSucceeded: function(client) {
        log('deleted client', client.getProperties('id', 'name'));
        this.send('notify', {
          text: client.get('name') + ' has been deleted.',
          type: 'success'
        });
        this.get('gtm').sendGAEvent('client', 'delete', 'save');
      },

      canDelete: function(model) {
        return !model.get('archived');
      },

      denyDelete: function(model, transition) {
        this.transitionTo('clients_page');
      },

      controllerName: 'clients/delete',

      gtm: Ember.inject.service('google-tag-manager')
    });


    return ClientsPageDeleteRoute;
  });
define("forecast/routes/clients_page/edit",
  ["forecast/mixin/client_modal"],
  function(ClientModal) {
    "use strict";

    var ClientsPageEditRoute = Ember.Route.extend(ClientModal, {
      actions: {
        closeModal: function(client) {
          this.transitionTo('clients_page');
        },

        goToDeleteRoute: function(client) {
          this.transitionTo('clients_page.delete', client);
        }
      },

      clientWasSaved: function(client) {
        log('updated client', client.getProperties('id', 'name'));
        this.send('notify', {
          text: client.get('name') + ' has been updated.',
          type: 'success'
        });
      },

      clientSaveFailed: function(client) {
        log('failed to update client', client.getProperties('id', 'name'));
        client.rollbackAttributes();
      },

      clientWasArchived: function(client) {
        log('archived client', client.getProperties('id', 'name'));
        this.send('notify', {
          text: client.get('name') + ' has been archived.',
          type: 'success'
        });
      },

      dismissDestroyRoute: 'clients_page',

      model: function(params) {
        return this.store.findRecord('client', params.client_id);
      },

      afterModel: function(client, transition) {
        this._super(client, transition);
        if(client.get('archived')) {
          this.transitionTo('clients_page');
        }
      }
    });



    return ClientsPageEditRoute;
  });
define("forecast/routes/clients_page/new",
  ["forecast/mixin/client_modal"],
  function(ClientModal) {
    "use strict";

    var ClientPageNewRoute = Ember.Route.extend(ClientModal, {
      actions: {
        closeModal: function() {
          this.transitionTo('clients_page');
        }
      },

      clientWasSaved: function(client) {
        log('created client', client.getProperties('id', 'name'));
        this.send('notify', {
          text: client.get('name') + ' has been created.',
          type: 'success'
        });
      },

      clientSaveFailed: function(client) {
        log('failed to create client', client.getProperties('id', 'name'));
        client.deleteRecord();
      },

      model: function() {
        return this.store.createRecord('client', { project_ids: [] });
      }
    });


    return ClientPageNewRoute;
  });
define("forecast/routes/export",
  ["forecast/utils/date","forecast/utils/file","forecast/mixin/admin-only-access"],
  function(__dependency1__, __dependency2__, AdminOnlyAccess) {
    "use strict";
    var makeDate = __dependency1__.makeDate;
    var toDateStamp = __dependency1__.toDateStamp;
    var download = __dependency2__.download;

    var ExportRoute = Ember.Route.extend(AdminOnlyAccess, {
      actions: {
        export: function() {
          var route = this;
          var controller = this.controllerFor('export');
          var url = '/aggregate/' + controller.get('type') + '_export';

          var data = {
            starting: toDateStamp(controller.get('starting')),
            ending: toDateStamp(controller.get('ending'))
          };

          controller.set('isDownloading', true);
          download(url, data, 'text/csv').finally(function() {
            controller.set('isDownloading', false);
            route.get('gtm').sendGAEvent('export', 'download', controller.get('type'),
              controller.get('ending').diff(controller.get('starting'), 'weeks') + 1
            );
          });
        }
      },

      gtm: Ember.inject.service('google-tag-manager'),

      serializeQueryParam: function(value, urlKey, defaultValueType) {
        if (urlKey === 'starting' || urlKey === 'ending') {
          return toDateStamp(value);
        }
        return this._super(value, urlKey, defaultValueType);
      },

      deserializeQueryParam: function(value, urlKey, defaultValueType) {
        if (urlKey === 'starting' || urlKey === 'ending') {
          return makeDate(value);
        }
        return this._super(value, urlKey, defaultValueType);
      }
    });


    return ExportRoute;
  });
define("forecast/routes/import/step1",
  ["forecast/routes/account/projects_import_page"],
  function(ProjectsImportPageRoute) {
    "use strict";

    var ImportStep1Route = ProjectsImportPageRoute.extend({
      controllerName: 'account.projects_import_page',
      templateName: 'account/projects_import_page',

      actions: {
        doImport: function() {
          this.importAndTransition('import.step2');
        },

        skipImport: function() {
          this.transitionTo('import.step2');
        },
      },

      setupController: function(controller, model) {
        this._super(controller, model);
        controller.set('isInHarvestConnectFlow', true);
      }
    });



    return ImportStep1Route;
  });
define("forecast/routes/import/step2",
  ["forecast/routes/account/team_import_page"],
  function(TeamImportPageRoute) {
    "use strict";

    var ImportStep2Route = TeamImportPageRoute.extend({
      controllerName: 'account.team_import_page',
      templateName: 'account/team_import_page',

      actions: {
        doImport: function() {
          this.importAndTransition('schedule');
        },

        skipImport: function() {
          this.transitionTo('schedule');
        },
      },

      setupController: function(controller, model) {
        this._super(controller, model);
        controller.set('isInHarvestConnectFlow', true);
      }
    });



    return ImportStep2Route;
  });
define("forecast/routes/person",
  [],
  function() {
    "use strict";
    var PersonRoute = Ember.Route.extend({

      actions: {
        willTransition: function(transition) {
          this.controllerFor('person').set('model', null);
          return true;
        }
      },

      model: function(params) {
        return this.store.findRecord('person', params.person_id);
      },

      afterModel: function(person) {
        if(person.get('archived')) {
          this.transitionTo('team.index');
        }
      },

    });



    return PersonRoute;
  });
define("forecast/routes/person/archive",
  ["forecast/mixin/admin-only-access"],
  function(AdminOnlyAccess) {
    "use strict";

    var PersonArchiveRoute = Ember.Route.extend(AdminOnlyAccess, {
      afterModel: function(person) {
        var route = this;
        var subscription = this.controllerFor('subscription');

        person.archive()
          .then(function() {
            route.send('notify', {
              text: subscription.personRemovalMessage('archived', person),
              type: 'success'
            });
            route.get('gtm').sendGAEvent('person', 'archive');
          })
          .catch(function() {
            route.send('notify', {
              text: person.get('name') + ' could not be archived.',
              type: 'error'
            });
          });
        this.transitionTo('team');
      },

      gtm: Ember.inject.service('google-tag-manager')
    });


    return PersonArchiveRoute;
  });
define("forecast/routes/person/assignment",
  [],
  function() {
    "use strict";
    var PersonAssignmentRoute = Ember.Route.extend({
      afterModel: function(model, transition) {
        if (model.get('project.archived')) {
          transition.send('notify', {
            text: 'This assignment cannot be edited because its project is archived.',
            type: 'error'
          });
          this.transitionTo('person', model.get('person'));
        }
      },
      resetController: function(controller, isExiting) {
        if (isExiting) {
          controller.set('model', null);
        }
      }
    });


    return PersonAssignmentRoute;
  });
define("forecast/routes/person/assignment/confirm_for_repeated_set",
  ["forecast/mixin/confirm_for_repeated_set_modal"],
  function(ConfirmForRepeatedSetModal) {
    "use strict";

    var PersonAssignmentConfirmForRepeatedSetRoute = Ember.Route.extend(ConfirmForRepeatedSetModal, {
      closeForm: function() {
        return this.transitionTo('team');
      }
    });


    return PersonAssignmentConfirmForRepeatedSetRoute;
  });
define("forecast/routes/person/assignment/copy",
  ["forecast/mixin/copy_modal"],
  function(CopyModal) {
    "use strict";

    var PersonAssignmentCopyRoute = Ember.Route.extend(CopyModal, {
      copyWillSave: function() {
        this.transitionTo('person');
      },

      copyWasCanceled: function() {
        this.transitionTo('person.assignment.edit');
      },

      dismissDestroyRoute: 'person',
      confirmCopyRoute: 'person.assignment.confirm_for_repeated_set'
    });


    return PersonAssignmentCopyRoute;
  });
define("forecast/routes/person/assignment/edit",
  ["forecast/mixin/assignment_modal"],
  function(AssignmentModal) {
    "use strict";

    var PersonAssignmentEditRoute = Ember.Route.extend(AssignmentModal, {
      actions: {
        copyAssignment: function(assignment) {
          this.transitionTo('person.assignment.copy', assignment);
        },
        confirmRepeat: function(type, assignment, repeatWeeks, person) {
          var params = {
            type: type,
            repeatWeeks: repeatWeeks,
            personId: person.get('id')
          };
          this.transitionTo('person.assignment.confirm_for_repeated_set',
                            assignment.get('person'),
                            assignment,
                            { queryParams: params });
        }
      },

      willUpdateAssignment: function() {
        this.transitionTo('team.index');
      },

      dismissDestroyRoute: 'team.index'
    });


    return PersonAssignmentEditRoute;
  });
define("forecast/routes/person/assignment/split",
  ["forecast/utils/date","forecast/mixin/splitable_assignment","forecast/mixin/destroy_tracker"],
  function(__dependency1__, SplitableAssignment, DestroyTracker) {
    "use strict";
    var makeDate = __dependency1__.makeDate;
    var toDateStamp = __dependency1__.toDateStamp;

    var PersonAssignmentSplitRoute = Ember.Route.extend(SplitableAssignment, DestroyTracker, {
      actions: {
        closeSplitAssignment: function() {
          this.transitionTo('team');
        },
        willTransition: function() {
          this.modelFor('person.assignment').set('splitDate', null);
          return true;
        },
        editAssignment: function(assignment) {
          this.get('gtm').sendGAEvent('assignment', 'split', 'edit');
          this.transitionTo('person.assignment.edit');
        }
      },

      dismissDestroyRoute: 'team.index',

      model: function(params) {
        return makeDate(params.timestamp);
      },

      serialize: function(model) {
        return { timestamp: toDateStamp(model) };
      },

      setupController: function(controller, model) {
        var assignment = this.modelFor('person.assignment');
        this._super(controller, model);
        controller.set('assignment', assignment);
        assignment.set('splitDate', model);
        this.startTrackingDestroys(assignment);
      },

      resetController: function(controller, isExiting) {
        if (isExiting) {
          this.stopTrackingDestroys();
        }
      }
    });


    return PersonAssignmentSplitRoute;
  });
define("forecast/routes/person/delete",
  ["forecast/mixin/delete_modal"],
  function(DeleteModal) {
    "use strict";

    var PersonDeleteRoute = Ember.Route.extend(DeleteModal, {
      willDelete: function(model) {
        this.transitionTo('team');
      },

      deleteWasCanceled: function(model) {
        this.transitionTo('person.edit', model);
        this.get('gtm').sendGAEvent('person', 'delete', 'cancel');
      },

      deleteSucceeded: function(model) {
        var subscription = this.controllerFor('subscription');
        log('deleted person', model.getProperties('id', 'name'));
        this.send('notify', {
          text: subscription.personRemovalMessage('deleted', model),
          type: 'success'
        });
        this.get('gtm').sendGAEvent('person', 'delete', 'save');
      },

      canDelete: function(model) {
        return (model.get('id') !== this.realtime.currentUserId);
      },

      denyDelete: function(model, transition) {
        this.transitionTo('person.edit', model);
      },

      controllerName: 'person/delete',

      gtm: Ember.inject.service('google-tag-manager')
    });


    return PersonDeleteRoute;
  });
define("forecast/routes/person/edit",
  ["forecast/mixin/person_modal"],
  function(PersonModal) {
    "use strict";

    var PersonEditRoute = Ember.Route.extend(PersonModal, {
      actions: {
        closeModal: function(person) {
          this.transitionTo('team.index');
        },
        goToArchiveRoute: function(person) {
          this.transitionTo('person.archive', person);
        },
        goToDeleteRoute: function(person) {
          this.transitionTo('person.delete', person);
        }
      },

      personWasSaved: function(person) {
        log('updated person', person.getProperties('id', 'name'));
        this.send('notify', {
          text: person.get('name') + ' has been updated.',
          type: 'success'
        });
      },

      personWasRejected: function(person) {
        log('failed to update person', person.getProperties('id', 'name'));
        person.rollbackAttributes();
      },

      dismissDestroyRoute: 'team.index'
    });


    return PersonEditRoute;
  });
define("forecast/routes/person/new_project",
  ["forecast/mixin/project_modal"],
  function(ProjectModal) {
    "use strict";

    var PersonNewProjectRoute = Ember.Route.extend(ProjectModal, {
      actions: {
        closeModal: function() {
          this.transitionTo('team.index');
        }
      },

      projectWasSaved: function(project) {
        log('created project', project.getProperties('id', 'nameWithCode'));
        var person     = this.modelFor('person'),
            start_date = this.controllerFor('schedule').get('defaultAssignmentStartDate'),
            end_date   = start_date.clone();
        this.send('createAssignment', project, person, start_date, end_date);
      },

      projectWasRejected: function(project) {
        log('failed to create project', project.get('nameWithCode'));
        project.deleteRecord();
      },

      model: function() {
        return this.store.createRecord('project');
      }
    });


    return PersonNewProjectRoute;
  });
define("forecast/routes/project",
  [],
  function() {
    "use strict";
    var ProjectRoute = Ember.Route.extend({
      actions: {
        willTransition: function(transition) {
          this.controllerFor('project').set('model', null);
          return true;
        }
      },

      model: function(params) {
        return this.store.findRecord('project', params.project_id);
      },

      afterModel: function(project) {
        if(project.get('archived')) {
          this.transitionTo('projects.index');
        }
      }
    });


    return ProjectRoute;
  });
define("forecast/routes/project/archive",
  ["forecast/mixin/admin-only-access"],
  function(AdminOnlyAccess) {
    "use strict";

    var ProjectArchiveRoute = Ember.Route.extend(AdminOnlyAccess, {

      afterModel: function(project) {
        var route = this;
        project.archive()
          .then(function() {
            route.send('notify', {
              text: project.get('nameWithCode') + ' has been archived.',
              type: 'success'
            });
            route.get('gtm').sendGAEvent('project', 'archive');
          })
          .catch(function() {
            route.send('notify', {
              text: project.get('nameWithCode') + ' could not be archived.',
              type: 'error'
            });
          });
        this.transitionTo('projects');
      },

      gtm: Ember.inject.service('google-tag-manager')
    });


    return ProjectArchiveRoute;
  });
define("forecast/routes/project/assignment",
  [],
  function() {
    "use strict";
    var ProjectAssignmentRoute = Ember.Route.extend({
      afterModel: function(model, transition) {
        if (model.get('person.archived')) {
          transition.send('notify', {
            text: 'This assignment cannot be edited because its person is archived.',
            type: 'error'
          });
          this.transitionTo('project', model.get('project'));
        }
      },
      resetController: function(controller, isExiting) {
        if (isExiting) {
          controller.set('model', null);
        }
      }
    });


    return ProjectAssignmentRoute;
  });
define("forecast/routes/project/assignment/confirm_for_repeated_set",
  ["forecast/mixin/confirm_for_repeated_set_modal"],
  function(ConfirmForRepeatedSetModal) {
    "use strict";

    var ProjectAssignmentConfirmForRepeatedSetRoute = Ember.Route.extend(ConfirmForRepeatedSetModal, {
      closeForm: function() {
        return this.transitionTo('projects');
      }
    });


    return ProjectAssignmentConfirmForRepeatedSetRoute;
  });
define("forecast/routes/project/assignment/copy",
  ["forecast/mixin/copy_modal"],
  function(CopyModal) {
    "use strict";

    var ProjectAssignmentCopyRoute = Ember.Route.extend(CopyModal, {
      copyWillSave: function() {
        this.transitionTo('project');
      },

      copyWasCanceled: function() {
        this.transitionTo('project.assignment.edit');
      },

      dismissDestroyRoute: 'project',
      confirmCopyRoute: 'project.assignment.confirm_for_repeated_set'
    });


    return ProjectAssignmentCopyRoute;
  });
define("forecast/routes/project/assignment/edit",
  ["forecast/mixin/assignment_modal"],
  function(AssignmentModal) {
    "use strict";

    var ProjectAssignmentEditRoute = Ember.Route.extend(AssignmentModal, {
      actions: {
        copyAssignment: function(assignment) {
          this.transitionTo('project.assignment.copy', assignment);
        },
        confirmRepeat: function(type, assignment, repeatWeeks, person) {
          var params = {
            type: type,
            repeatWeeks: repeatWeeks,
            personId: person.get('id')
          };
          this.transitionTo('project.assignment.confirm_for_repeated_set',
                            assignment.get('project'),
                            assignment,
                            { queryParams: params });
        }
      },

      willUpdateAssignment: function() {
        this.transitionTo('projects.index');
      },

      dismissDestroyRoute: 'projects.index'
    });


    return ProjectAssignmentEditRoute;
  });
define("forecast/routes/project/assignment/split",
  ["forecast/utils/date","forecast/mixin/splitable_assignment","forecast/mixin/destroy_tracker"],
  function(__dependency1__, SplitableAssignment, DestroyTracker) {
    "use strict";
    var makeDate = __dependency1__.makeDate;
    var toDateStamp = __dependency1__.toDateStamp;

    var ProjectAssignmentSplitRoute = Ember.Route.extend(SplitableAssignment, DestroyTracker, {
      actions: {
        closeSplitAssignment: function() {
          this.transitionTo('projects');
        },
        willTransition: function() {
          this.modelFor('project.assignment').set('splitDate', null);
          return true;
        },
        editAssignment: function(assignment) {
          this.get('gtm').sendGAEvent('assignment', 'split', 'edit');
          this.transitionTo('project.assignment.edit');
        }
      },

      dismissDestroyRoute: 'projects.index',

      model: function(params) {
        return makeDate(params.timestamp);
      },

      serialize: function(model) {
        return { timestamp: toDateStamp(model) };
      },

      setupController: function(controller, model) {
        var assignment = this.modelFor('project.assignment');
        this._super(controller, model);
        controller.set('assignment', assignment);
        assignment.set('splitDate', model);
        this.startTrackingDestroys(assignment);
      },

      resetController: function(controller, isExiting) {
        if (isExiting) {
          this.stopTrackingDestroys();
        }
      }
    });


    return ProjectAssignmentSplitRoute;
  });
define("forecast/routes/project/delete",
  ["forecast/mixin/delete_modal"],
  function(DeleteModal) {
    "use strict";

    var ProjectDeleteRoute = Ember.Route.extend(DeleteModal, {
      willDelete: function(project) {
        this.transitionTo('projects');
      },

      deleteWasCanceled: function(project) {
        this.transitionTo('project.edit', project);
        this.get('gtm').sendGAEvent('project', 'delete', 'cancel');
      },

      deleteSucceeded: function(model) {
        log('deleted project', model.getProperties('id', 'nameWithCode'));
        this.send('notify', {
          text: model.get('nameWithCode') + ' has been deleted.',
          type: 'success'
        });
        this.get('gtm').sendGAEvent('project', 'delete', 'save');
      },

      canDelete: function(model) {
        return !model.get('isTimeOff');
      },

      denyDelete: function(model, transition) {
        this.transitionTo('project', model);
      },

      controllerName: 'project/delete',

      gtm: Ember.inject.service('google-tag-manager')
    });


    return ProjectDeleteRoute;
  });
define("forecast/routes/project/edit",
  ["forecast/mixin/project_modal"],
  function(ProjectModal) {
    "use strict";

    var ProjectEditRoute = Ember.Route.extend(ProjectModal, {
      actions: {
        closeModal: function(project) {
          this.transitionTo('projects.index');
        },
        goToArchiveRoute: function(project) {
          this.transitionTo('project.archive', project);
        },
        goToDeleteRoute: function(project) {
          this.transitionTo('project.delete', project);
        }
      },

      projectWasSaved: function(project) {
        log('updated project', project.getProperties('id', 'nameWithCode'));
        this.send('notify', {
          text: project.get('nameWithCode') + ' has been updated.',
          type: 'success'
        });
      },

      projectWasRejected: function(project) {
        log('failed to update project', project.getProperties('id', 'name'));
        project.rollbackAttributes();
      },

      dismissDestroyRoute: 'projects.index',

      canAccess: function(model) {
        return !model.get('isTimeOff');
      },

      denyAccess: function(model) {
        this.transitionTo('project', model);
      }
    });


    return ProjectEditRoute;
  });
define("forecast/routes/project/milestone",
  [],
  function() {
    "use strict";
    var ProjectMilestoneRoute = Ember.Route.extend({
      resetController: function(controller, isExiting) {
        if (isExiting) {
          controller.set('model', null);
        }
      }
    });


    return ProjectMilestoneRoute;
  });
define("forecast/routes/project/milestone/edit",
  ["forecast/utils/model","forecast/mixin/admin-only-access","forecast/mixin/destroy_tracker"],
  function(__dependency1__, AdminOnlyAccess, DestroyTracker) {
    "use strict";
    var changedKeysForGA = __dependency1__.changedKeysForGA;

    var ProjectMilestoneEditRoute = Ember.Route.extend(AdminOnlyAccess, DestroyTracker, {
      actions: {
        closeForm: function() {
          var form = this.controllerFor('project/milestone/edit');
          if (form.get('deleteOnClose')) {
            this.send('deleteMilestone', form.get('model'), { noflash: true });
          } else {
            this.send('save');
          }
        },
        save: function() {
          var controller = this.controllerFor('project.milestone.edit'),
              route = this,
              milestone;

          if (controller.validate()) {
            milestone = this.modelFor('project.milestone');
            var changedKeys = changedKeysForGA(milestone);

            /*
             * The manual error notification is required here because the overlap
             * check done inside `milestone.update()` can reject the promise on
             * the client-side if milestones overlap.
             */
            milestone.update().then(function() {
              log('updated milestone', milestone.getProperties('id', 'name', 'date'));
              route.get('gtm').sendGAEvent('milestone', 'edit', 'save:{' + changedKeys + '}');
            }).catch(function(reason) {
              log('failed to update milestone:', reason);
              milestone.rollbackAttributes();
              route.send('notify', {
                text: reason,
                type: 'error'
              });
            });
            this.transitionTo('projects.index');
          }
        }
      },

      gtm: Ember.inject.service('google-tag-manager'),

      dismissDestroyRoute: 'projects.index',

      setupController: function(controller, model) {
        this._super(controller, model);
        this.startTrackingDestroys(model);
      },

      resetController: function(controller, isExiting) {
        if (isExiting) {
          this.stopTrackingDestroys();
          controller.set('deleteOnClose', false);
        }
      },

      renderTemplate: function(controller, model) {
        this.render('project/milestones/form', {
          into:      'authenticated',
          outlet:    'modal',
          controller: controller
        });
      }
    });



    return ProjectMilestoneEditRoute;
  });
define("forecast/routes/project/new_person",
  ["forecast/mixin/person_modal"],
  function(PersonModal) {
    "use strict";

    var ProjectNewPersonRoute = Ember.Route.extend(PersonModal, {
      actions: {
        closeModal: function() {
          this.transitionTo('projects.index');
        }
      },

      personWasSaved: function(person) {
        log('created person', person.getProperties('id', 'name'));
        var project    = this.modelFor('project'),
            start_date = this.controllerFor('schedule').get('defaultAssignmentStartDate'),
            end_date   = start_date.clone();
        this.send('createAssignment', person, project, start_date, end_date);
      },

      personWasRejected: function(person) {
        log('failed to create person', person.get('name'));
        person.deleteRecord();
      },

      beforeModel: function(transition) {
        // We're overriding AdminOnlyAccess#beforeModel, so make sure
        // we do the check first.
        if (!this.verifyPermissionsOrTransition()) { return; }

        var subscription = this.controllerFor('subscription');

        if (!subscription.canAddPeople(1)) {
          transition.abort();
          this.send('showPaywallModal', { transition: transition });
        }
      },

      model: function() {
        return this.store.createRecord('person');
      }
    });


    return ProjectNewPersonRoute;
  });
define("forecast/routes/project/shift",
  ["forecast/mixin/shift_modal"],
  function(ShiftModal) {
    "use strict";

    var ProjectShiftRoute = Ember.Route.extend(ShiftModal, {
      shiftWasSaved: function() {
        this.transitionTo('project');
      },

      shiftWasCanceled: function() {
        this.transitionTo('project.edit');
      },

      dismissDestroyRoute: 'projects.index'
    });


    return ProjectShiftRoute;
  });
define("forecast/routes/projects",
  ["forecast/utils/string","forecast/utils/model","forecast/utils/date","forecast/utils/bus","forecast/mixin/scroll_to_top"],
  function(__dependency1__, __dependency2__, __dependency3__, Bus, ScrollToTop) {
    "use strict";
    var possessive = __dependency1__.possessive;
    var isSavedAndActive = __dependency2__.isSavedAndActive;
    var makeDate = __dependency3__.makeDate;
    var toDateStamp = __dependency3__.toDateStamp;

    var ProjectsRoute = Ember.Route.extend(ScrollToTop, {
      assignmentUpdater: Ember.inject.service('assignment-updater'),
      hoursDrawer: Ember.inject.service('hours-drawer'),

      actions: {
        viewportChanged: function(start, end) {
          this.filterVisibleMilestones(start, end);
          return true;
        },

        addProject: function() {
          this.transitionTo('projects.new');
        },

        archiveProject: function(project) {
          var route = this;
          project.set('archived', true).save().then(function() {
            log('archived project', project.getProperties('id', 'nameWithCode'));
            route.transitionTo('projects').then(function() {
              route.send('notify', {
                text: project.get('nameWithCode') + ' has been archived.',
                type: 'success'
              });
            });
          });
        },

        fetchDrawerData: function() {
          this.fetchProjectsHours();
          this.fetchRemainingBudget();
        },
        clearDrawerData: function() {
          this.clearProjectsHours();
          this.clearRemainingBudget();
        },

        createPersonForProject: function(project) {
          this.transitionTo('project.new_person', project);
        },

        createRepeatedAssignmentSet: function(assignment, repeatWeeks) {
          var route = this;
          this.get('assignmentUpdater')
              .createRepeatedAssignmentSet(assignment, repeatWeeks)
              .catch(function(reason) {
                route.send('notify', { text: reason, type: 'error' });
              });
        },

        createAssignment: function(person, project, start_date, end_date) {
          var route    = this,
              schedule = this.controllerFor('schedule');

          if (this.get('isCreatingAssignment')) { return; }
          this.set('isCreatingAssignment', true);

          var allocation = project.get('isTimeOff')
            ? null
            : person.get('defaultAllocation');

          var assignment = this.store.createRecord('assignment', {
            start_date: start_date.clone(),
            end_date:   end_date.clone(),
            allocation: allocation,
            project:    project,
            person:     person
          });

          schedule.addAssignment(assignment);

          assignment.save()
          .then(function(saved) {
            log('created assignment', saved.getProperties('id', 'start_date', 'end_date'));
            route.get('gtm').sendGAEvent('assignment', 'create', undefined,
                                         start_date.diff(makeDate(), 'days'));
          })
          .catch(function() {
            schedule.removeAssignment(assignment);
          })
          .finally(function() {
            route.set('isCreatingAssignment', false);
          });
        },

        editAssignment: function(assignment) {
          this.transitionTo('project.assignment.edit', assignment.get('project'), assignment);
        },

        updateAssignment: function(assignment, person) {
          var route = this;
          var updater = this.get('assignmentUpdater');

          assignment.get('repeated_assignment_set').then(function(repeatedSet) {
            if (repeatedSet) {
              var params = {
                type: 'update',
                repeatWeeks: repeatedSet.get('weeks')
              };
              if (person) { params.personId = person.get('id'); }
              route.transitionTo('project.assignment.confirm_for_repeated_set',
                                 assignment.get('project'),
                                 assignment,
                                 { queryParams: params });
            } else {
              updater.updateAssignment(assignment, person).catch(function(reason) {
                route.send('notify', { text: reason, type: 'error' });
              });
            }
          });
        },

        deleteAssignment: function(assignment) {
          var route = this;

          assignment.get('repeated_assignment_set').then(function(repeatedSet) {
            if (repeatedSet) {
              route.transitionTo('project.assignment.confirm_for_repeated_set',
                                 assignment.get('project'),
                                 assignment,
                                 { queryParams: { type: 'delete' } });
              return;
            }

            var project = route.modelFor('project');
            var person = assignment.get('person');
            var updater = route.get('assignmentUpdater');
            var name = person ? person.get('first_name') : 'Everyone';

            updater.deleteAssignment(assignment).then(function() {
              route.send('notify', {
                text: '%@ assignment has been deleted'.fmt(possessive(name)),
                type: 'success'
              });
              route.get('gtm').sendGAEvent('assignment', 'delete', 'form');
            });
            route.transitionTo('project', project);
          });
        },

        confirmSplitAssignment: function(assignment, date) {
          this.transitionTo('project.assignment.split', assignment.get('project'), assignment, date);
        },

        createMilestone: function(project, date) {
          var route    = this,
              schedule = this.controllerFor('schedule');

          if (this.get('isCreatingMilestone')) { return; }
          this.set('isCreatingMilestone', true);

          this.store.createRecord('milestone', {
            'project': project,
            'date'   : date.clone()
          })
          .save()
          .then(function(saved) {
            log('created milestone', saved.getProperties('id', 'name', 'date'));
            schedule.addMilestone(saved.get('id'));
            route.controllerFor('project/milestone/edit').set('deleteOnClose', true);
            route.transitionTo('project.milestone.edit', project, saved);
            route.get('gtm').sendGAEvent('milestone', 'create', undefined,
                                         date.diff(makeDate(), 'days'));
          })
          .finally(function() {
            route.set('isCreatingMilestone', false);
          });
        },

        editMilestone: function(milestone) {
          this.transitionTo('project.milestone.edit', milestone.get('project'), milestone);
        },

        updateMilestone: function(milestone) {
          var route = this;
          milestone.update().then(function() {
            log('updated milestone', milestone.getProperties('id', 'name', 'date'));
          }).catch(function(reason) {
            log('failed to update milestone:', reason);
            milestone.rollbackAttributes();
            route.send('notify', { text: reason, type: 'error' });
          });
        },

        deleteMilestone: function(milestone, options) {
          var route    = this,
              project  = this.modelFor('project'),
              schedule = this.controllerFor('schedule');

          schedule.removeMilestone(milestone.get('id'));
          milestone.destroyRecord();

          this.transitionTo('project', project).then(function() {
            log('deleted milestone', milestone.getProperties('id', 'name', 'date'));
            if (options && options.noflash) {
              route.get('gtm').sendGAEvent('milestone', 'delete', 'esc2del');
              return;
            }
            route.send('notify', {
              text: '“%@” has been deleted.'.fmt(milestone.get('name')),
              type: 'success'
            });
            route.get('gtm').sendGAEvent('milestone', 'delete', 'form');
          });
        },

        // TODO: Move back to `controllers/project/show` once we are on a version
        // that includes https://github.com/emberjs/ember.js/pull/11960
        goToShiftRoute: function(project) {
          this.transitionTo('project.shift', project);
        },

        didTransition: function() {
          var isOpen = window.localStorage.getItem('show_drawer') === 'yes';
          this.controllerFor('projects').set('showDrawer', isOpen);
          if (isOpen) { this.send('fetchDrawerData'); }
          return true;
        }
      },

      gtm: Ember.inject.service('google-tag-manager'),

      // Flags used to make sure we don't try to create the same assignment (or
      // milestone) twice.
      isCreatingAssignment: false,
      isCreatingMilestone: false,

      model: function() {
        return this.store.filter('project', isSavedAndActive);
      },

      clearDrawerData: function() {
        if (this.controllerFor('projects').get('showDrawer')) {
          this.send('clearDrawerData');
        }
      }.on('deactivate'),

      setupController: function(controller, model) {
        this._super(controller, model);
        var schedule = this.controllerFor('schedule');
        this.filterVisibleMilestones(schedule.get('startDate'),schedule.get('endDate'));
      },

      renderTemplate: function(controller, model) {
        this._super(controller, model);
        this.render('projects/control-buttons', {
          into:   'schedule',
          outlet: 'control-buttons'
        });
        this.render('projects/hours-drawer', {
          into:   'schedule',
          outlet: 'drawer'
        });
        this.render('projects/filter', {
          into:   'schedule',
          outlet: 'filter'
        });
      },

      lastRequest: null,

      filterVisibleMilestones: function(start_date, end_date) {
        var self = this,
            controller = this.controllerFor('schedule'),
            currentRequest = this.lastRequest = Date.now();
        this.store.query('milestone', {
          start_date: toDateStamp(start_date),
          end_date:   toDateStamp(end_date)
        }).then(function(loaded) {
          if(currentRequest === self.lastRequest) {
            controller.set('milestones', loaded.toArray());
          }
        });
      },

      fetchProjectsHours: function() {
        var projects = this.modelFor('projects');
        this.get('hoursDrawer').hoursForProjects().then(function(projects_map) {
          projects.forEach(function(project) {
            var hours = projects_map[project.get('id')] || [];
            project.set('future_scheduled_hours', hours);
          });
        });
        Bus.on('socket:update:project', this, 'updateDrawerDataForProject');
        Bus.on('archive:person', this, 'fetchProjectsHours');
        Bus.on('unarchive:person', this, 'fetchProjectsHours');
      },
      updateDrawerDataForProject: function(id) {
        var project = this.store.peekRecord('project', id);
        if (project.get('isTimeOff')) {
          return;
        }
        this.get('hoursDrawer').hoursForProject(id).then(function(hours) {
          project.set('future_scheduled_hours', hours);
        });
      },
      clearProjectsHours: function() {
        var projects = this.modelFor('projects');
        projects.setEach('future_scheduled_hours', []);
        Bus.off('socket:update:project', this, 'updateDrawerDataForProject');
        Bus.off('archive:person', this, 'fetchProjectsHours');
        Bus.off('unarchive:person', this, 'fetchProjectsHours');
      },

      fetchRemainingBudget: function() {
        if (!this.modelFor('account').get('isConnectedToHarvest')) {
          return false;
        }
        var projects = this.modelFor('projects'),
            max_ttl  = 0,
            route    = this,
            budget;
        projects.setEach('remaining_budget', { budget_by: 'loading' });
        this.get('hoursDrawer').remainingBudgetForProjects().then(function(budgets) {
          projects.forEach(function(project) {
            budget = budgets[project.get('id')];
            project.set('remaining_budget', budget);
            if (budget.expires_in > max_ttl) {
              max_ttl = budget.expires_in;
            }
          });
          if (!max_ttl) {
            max_ttl = 880;
          }
          route.scheduleRemainingBudgetRefresh(max_ttl + 20);
        });
        return true;
      },
      remainingBudgetRefreshTimeout: null,
      scheduleRemainingBudgetRefresh: function(seconds) {
        Ember.run.cancel(this.get('remainingBudgetRefreshTimeout'));
        var timeout = Ember.run.later(this, this.fetchRemainingBudget, seconds * 1000);
        this.set('remainingBudgetRefreshTimeout', timeout);
      },
      clearRemainingBudget: function() {
        var projects = this.modelFor('projects');
        projects.setEach('remaining_budget', null);
        Ember.run.cancel(this.get('remainingBudgetRefreshTimeout'));
      }
    });


    return ProjectsRoute;
  });
define("forecast/routes/projects/new",
  ["forecast/mixin/project_modal"],
  function(ProjectModal) {
    "use strict";

    var ProjectsNewRoute = Ember.Route.extend(ProjectModal, {
      actions: {
        closeModal: function() {
          this.transitionTo('projects.index');
        }
      },

      projectWasSaved: function(project) {
        log('created project', project.getProperties('id', 'nameWithCode'));
        var route = this;

        this.transitionTo('project', project).then(function() {
          route.send('notify', {
            text: project.get('nameWithCode') + ' has been created.',
            type: 'success'
          });
        });
      },

      projectWasRejected: function(project) {
        log('failed to create project', project.get('nameWithCode'));
        project.deleteRecord();
      },

      model: function() {
        return this.store.createRecord('project');
      }
    });


    return ProjectsNewRoute;
  });
define("forecast/routes/projects_page",
  ["forecast/utils/model","forecast/mixin/admin-only-access","forecast/mixin/scroll_to_top"],
  function(__dependency1__, AdminOnlyAccess, ScrollToTop) {
    "use strict";
    var isSavedAndActive = __dependency1__.isSavedAndActive;

    var ProjectsPageRoute = Ember.Route.extend(AdminOnlyAccess, {
      actions: {
        addProject: function() {
          this.transitionTo('projects_page.new');
        },
        goToProjectsImport: function() {
          this.transitionTo('account.projects_import_page');
        }
      },

      model: function() {
        return this.store.filter('project', function(project) {
          return isSavedAndActive(project) && project.get('isNotTimeOff');
        });
      }
    });


    return ProjectsPageRoute;
  });
define("forecast/routes/projects_page/archive",
  ["forecast/mixin/admin-only-access"],
  function(AdminOnlyAccess) {
    "use strict";

    var ProjectsPageArchiveRoute = Ember.Route.extend(AdminOnlyAccess, {
      afterModel: function(project) {
        var route = this;

        if (project.get('archived')) {
          this.transitionTo('projects_page');
          return;
        }

        project.archive()
          .then(function() {
            route.send('notify', {
              text: project.get('nameWithCode') + ' has been archived.',
              type: 'success'
            });
            route.get('gtm').sendGAEvent('project', 'archive');
          })
          .catch(function() {
            route.send('notify', {
              text: project.get('nameWithCode') + ' could not be archived.',
              type: 'error'
            });
          });

        this.transitionTo('projects_page');
      },

      gtm: Ember.inject.service('google-tag-manager')
    });


    return ProjectsPageArchiveRoute;
  });
define("forecast/routes/projects_page/delete",
  ["forecast/mixin/delete_modal"],
  function(DeleteModal) {
    "use strict";

    var ProjectsPageDeleteRoute = Ember.Route.extend(DeleteModal, {
      willDelete: function(project) {
        this.transitionTo('projects_page');
      },

      deleteWasCanceled: function(project) {
        this.transitionTo('projects_page.edit', project);
        this.get('gtm').sendGAEvent('project', 'delete', 'cancel');
      },

      deleteSucceeded: function(model) {
        log('deleted project', model.getProperties('id', 'nameWithCode'));
        this.send('notify', {
          text: model.get('nameWithCode') + ' has been deleted.',
          type: 'success'
        });
        this.get('gtm').sendGAEvent('project', 'delete', 'save');
      },

      canDelete: function(model) {
        return !model.get('archived') && model.get('isNotTimeOff');
      },

      denyDelete: function(model, transition) {
        this.transitionTo('projects_page');
      },

      controllerName: 'project/delete',

      gtm: Ember.inject.service('google-tag-manager')
    });


    return ProjectsPageDeleteRoute;
  });
define("forecast/routes/projects_page/edit",
  ["forecast/mixin/project_modal"],
  function(ProjectModal) {
    "use strict";

    var ProjectsPageEditRoute = Ember.Route.extend(ProjectModal, {
      actions: {
        closeModal: function(project) {
          this.transitionTo('projects_page');
        },
        goToShiftRoute: function(project) {
          this.transitionTo('projects_page.shift', project);
        },
        goToArchiveRoute: function(project) {
          this.transitionTo('projects_page.archive', project);
        },
        goToDeleteRoute: function(project) {
          this.transitionTo('projects_page.delete', project);
        }
      },

      projectWasSaved: function(project) {
        log('updated project', project.getProperties('id', 'nameWithCode'));
        this.send('notify', {
          text: project.get('nameWithCode') + ' has been updated.',
          type: 'success'
        });
      },

      projectWasRejected: function(project) {
        log('failed to update project', project.getProperties('id', 'nameWithCode'));
        project.rollbackAttributes();
      },

      model: function(params) {
        return this.store.findRecord('project', params.project_id);
      },

      dismissDestroyRoute: 'projects_page',

      canAccess: function(model) {
        return !model.get('archived') && model.get('isNotTimeOff');
      },

      denyAccess: function(model, transition) {
        this.transitionTo('projects_page');
      }
    });


    return ProjectsPageEditRoute;
  });
define("forecast/routes/projects_page/new",
  ["forecast/mixin/project_modal"],
  function(ProjectModal) {
    "use strict";

    var ProjectsPageNewRoute = Ember.Route.extend(ProjectModal, {
      actions: {
        closeModal: function() {
          this.transitionTo('projects_page');
        }
      },

      projectWasSaved: function(project) {
        log('created project', project.getProperties('id', 'nameWithCode'));
        var route = this;
        this.transitionTo('projects_page').then(function() {
          route.send('notify', {
            text: project.get('nameWithCode') + ' has been created.',
            type: 'success'
          });
        });
      },

      projectWasRejected: function(project) {
        log('failed to create project', project.get('nameWithCode'));
        project.deleteRecord();
      },

      model: function() {
        return this.store.createRecord('project');
      }
    });


    return ProjectsPageNewRoute;
  });
define("forecast/routes/projects_page/shift",
  ["forecast/mixin/shift_modal"],
  function(ShiftModal) {
    "use strict";

    var ProjectsPageShiftRoute = Ember.Route.extend(ShiftModal, {
      shiftWasSaved: function() {
        this.transitionTo('projects_page');
      },

      shiftWasCanceled: function(project) {
        this.transitionTo('projects_page.edit', project);
      },

      dismissDestroyRoute: 'projects_page',

      afterModel: function(project, transition) {
        this._super(project, transition);
        if(project.get('archived')) {
          this.transitionTo('projects_page');
        }
      }
    });


    return ProjectsPageShiftRoute;
  });
define("forecast/routes/schedule",
  ["forecast/utils/date"],
  function(__dependency1__) {
    "use strict";
    var makeDate = __dependency1__.makeDate;
    var toDateStamp = __dependency1__.toDateStamp;

    var ScheduleRoute = Ember.Route.extend({

      actions: {
        goToPreviousWeek: function() { this.controller.send('goToPreviousWeek'); },
        goToNextWeek: function() { this.controller.send('goToNextWeek'); },
        goToThisWeek: function() { this.controller.send('goToThisWeek'); },
        zoomIn: function() { this.controller.send('zoomIn'); },
        zoomOut: function() { this.controller.send('zoomOut'); },
        viewportChanged: function(start, end) {
          this.filterVisibleAssignments(start, end);
        },
        toggleProjectsDrawer: function(isOpen) {
          this.controller.set('showDrawer', isOpen);
          if (isOpen) {
            window.localStorage.setItem('show_drawer', 'yes');
            this.get('gtm').sendGAEvent('schedule', 'drawer', 'open');
          } else {
            window.localStorage.removeItem('show_drawer');
            this.get('gtm').sendGAEvent('schedule', 'drawer', 'close');
          }
        }
      },

      shortcuts: {
        'left'   : 'goToPreviousWeek',
        'right'  : 'goToNextWeek',
        't'      : 'goToThisWeek',
        'shift+t': 'goToThisWeek',
        'shift+-': 'zoomOut',
        '-': 'zoomOut',
        'shift+=': 'zoomIn',
        '=': 'zoomIn'
      },

      gtm: Ember.inject.service('google-tag-manager'),

      setupController: function(controller) {
        this.filterVisibleAssignments(
          controller.get('startDate'),
          controller.get('endDate')
        );
      },

      lastRequest: null,

      filterVisibleAssignments: function(start_date, end_date) {
        var self = this,
            currentRequest = this.lastRequest = Date.now();
        this.store.query('assignment', {
          start_date: toDateStamp(start_date),
          end_date:   toDateStamp(end_date),
          state:      'active'
        }).then(function(loaded) {
          if(currentRequest === self.lastRequest) {
            self.controller.set('assignments', loaded.toArray());
          }
        });
      },

     serializeQueryParam: function(value, urlKey, defaultValueType) {
       return this._super(value, urlKey, defaultValueType);
     },

     deserializeQueryParam: function(value, urlKey, defaultValueType) {
       if (urlKey === 'showDrawer') {
         var isOpen = this._super(value, urlKey, defaultValueType);
         if (isOpen) {
           window.localStorage.setItem('show_drawer', 'yes');
         } else {
           window.localStorage.removeItem('show_drawer');
         }
         return isOpen;
       }
       return this._super(value, urlKey, defaultValueType);
     }
    });


    return ScheduleRoute;
  });
define("forecast/routes/schedule/index",
  [],
  function() {
    "use strict";
    var ScheduleIndexRoute = Ember.Route.extend({
      beforeModel: function() {
        this.transitionTo('projects');
      }
    });


    return ScheduleIndexRoute;
  });
define("forecast/routes/settings",
  ["forecast/utils/model","forecast/mixin/admin-only-access","forecast/mixin/scroll_to_top"],
  function(__dependency1__, AdminOnlyAccess, ScrollToTop) {
    "use strict";
    var changedKeysForGA = __dependency1__.changedKeysForGA;

    var AccountSettingsRoute = Ember.Route.extend(AdminOnlyAccess, ScrollToTop, {
      actions: {
        saveChanges: function() {
          var route = this,
              form  = this.controllerFor('settings');

          if (!form.validate()) { return; }

          var account = this.modelFor('account');

          account.setProperties({
            name:         form.get('accountName'),
            color_labels: form.get('colorLabels'),
            max_allocation_per_day: form.get('maxAllocationPerDay')
          });

          var changedKeys = changedKeysForGA(account);

          account.save().then(function() {
            route.get('gtm').sendGAEvent('account', 'edit', 'save:{' + changedKeys + '}');
            route.send('notify', {
              text: 'Settings have been saved.',
              type: 'success'
            });
          });
        },

        cancelChanges: function() {
          this.resetForm();
          this.get('gtm').sendGAEvent('account', 'cancel');
        },

        goToProjectsImport: function() {
          this.transitionTo('account.projects_import_page');
        }
      },

      gtm: Ember.inject.service('google-tag-manager'),

      setupController: function(controller, model) {
        this._super(controller, model);
        this.resetForm();
      },

      resetForm: function() {
        var account = this.modelFor('account');
        this.get('controller').setProperties({
          accountName: account.get('name'),
          maxAllocationPerDay: account.get('max_allocation_per_day'),
          colorLabels: Ember.copy(account.get('color_labels'), true)
        });
      }
    });


    return AccountSettingsRoute;
  });
define("forecast/routes/settings/harvest_connect",
  ["forecast/utils/ajax","forecast/mixin/admin-only-access"],
  function(__dependency1__, AdminOnlyAccess) {
    "use strict";
    var post = __dependency1__.post;

    var SettingsHarvestConnectRoute = Ember.Route.extend(AdminOnlyAccess, {
      actions: {
        connectToHarvest: function() {
          var route = this,
              form  = this.controllerFor('settings/harvest_connect'),
              data  = {
                subdomain: form.get('subdomain'),
                email:     form.get('email'),
                password:  form.get('password')
              };

          if (!form.validate()) { return; }

          post('/harvest/connect', data)
            .then(function() {
              route.send('notify', {
                text: 'Harvest successfully connected.',
                type: 'success'
              });
              route.modelFor('account').set('harvest_subdomain', form.get('subdomain'));
              route.transitionTo('import.step1');
            })
            .catch(function() {
              log('failed to connect to Harvest');
            });
        },
        closeModal: function() {
          this.transitionTo('settings');
        }
      },

      beforeModel: function() {
        if(this.modelFor('account').get('isConnectedToHarvest')) {
          this.transitionTo('settings');
        }
      },

      setupController: function(controller, model) {
        this._super(controller, model);
        controller.get('validationErrors').clear();
        controller.setProperties({
          subdomain: null,
          email:     null,
          password:  null
        });
      },

      renderTemplate: function(controller, model) {
        this.render('settings/harvest_connect', {
          into:   'authenticated',
          outlet: 'modal'
        });
      }

    });


    return SettingsHarvestConnectRoute;
  });
define("forecast/routes/settings/harvest_disconnect",
  ["forecast/utils/ajax","forecast/mixin/admin-only-access"],
  function(__dependency1__, AdminOnlyAccess) {
    "use strict";
    var post = __dependency1__.post;

    var SettingsHarvestDisconnectRoute = Ember.Route.extend(AdminOnlyAccess, {
      actions: {
        disconnect: function() {
          var form  = this.controllerFor('settings/harvest_disconnect'),
              route = this;

          if (!form.validate()) { return; }

          post('/harvest/disconnect')
            .then(function() {
              route.send('notify', {
                text: 'Harvest has been disconnected.',
                type: 'success'
              });
              route.transitionTo('settings');
            });
        },

        closeModal: function() {
          this.transitionTo('settings');
        }
      },

      setupController: function(controller, model) {
        this._super(controller, model);
        controller.set('confirmText', null);
        controller.get('validationErrors').clear();
      },

      renderTemplate: function(controller, model) {
        this.render('settings/harvest_disconnect', {
          into:   'authenticated',
          outlet: 'modal'
        });
      }

    });


    return SettingsHarvestDisconnectRoute;
  });
define("forecast/routes/team",
  ["forecast/utils/string","forecast/utils/model","forecast/utils/date","forecast/mixin/scroll_to_top"],
  function(__dependency1__, __dependency2__, __dependency3__, ScrollToTop) {
    "use strict";
    var possessive = __dependency1__.possessive;
    var isSavedAndActive = __dependency2__.isSavedAndActive;
    var makeDate = __dependency3__.makeDate;

    var TeamRoute = Ember.Route.extend(ScrollToTop, {
      assignmentUpdater: Ember.inject.service('assignment-updater'),

      actions: {
        addPerson: function() {
          this.transitionTo('team.new');
        },

        createProjectForPerson: function(person) {
          this.transitionTo('person.new_project', person);
        },

        createRepeatedAssignmentSet: function(assignment, repeatWeeks) {
          var route = this;
          this.get('assignmentUpdater')
              .createRepeatedAssignmentSet(assignment, repeatWeeks)
              .catch(function(reason) {
                route.send('notify', { text: reason, type: 'error' });
              });
        },

        createAssignment: function(project, person, start_date, end_date) {
          var route    = this,
              schedule = this.controllerFor('schedule');

          if (this.get('isCreatingAssignment')) { return; }
          this.set('isCreatingAssignment', true);

          var assignment = this.store.createRecord('assignment', {
            start_date: start_date.clone(),
            end_date:   end_date.clone(),
            allocation: person.get('defaultAllocation'),
            project:    project,
            person:     person
          });

          schedule.addAssignment(assignment);

          assignment.save()
          .then(function(saved) {
            log('created assignment', saved.getProperties('id', 'start_date', 'end_date'));
            route.get('gtm').sendGAEvent('assignment', 'create', undefined,
                                         start_date.diff(makeDate(), 'days'));
          })
          .catch(function() {
            schedule.removeAssignment(assignment);
          })
          .finally(function() {
            route.set('isCreatingAssignment', false);
          });
        },

        editAssignment: function(assignment) {
          this.transitionTo('person.assignment.edit', assignment.get('person'), assignment);
        },

        updateAssignment: function(assignment, person) {
          var route = this;
          var updater = this.get('assignmentUpdater');

          assignment.get('repeated_assignment_set').then(function(repeatedSet) {
            if (repeatedSet) {
              var params = {
                type: 'update',
                repeatWeeks: repeatedSet.get('weeks')
              };
              if (person) { params.personId = person.get('id'); }
              route.transitionTo('person.assignment.confirm_for_repeated_set',
                                 assignment.get('person'),
                                 assignment,
                                 { queryParams: params });
            } else {
              updater.updateAssignment(assignment, person).catch(function(reason) {
                route.send('notify', { text: reason, type: 'error' });
              });
            }
          });
        },

        deleteAssignment: function(assignment) {
          var route = this;

          assignment.get('repeated_assignment_set').then(function(repeatedSet) {
            if (repeatedSet) {
              route.transitionTo('person.assignment.confirm_for_repeated_set',
                                 assignment.get('person'),
                                 assignment,
                                 { queryParams: { type: 'delete' } });
              return;
            }

            var person = route.modelFor('person');
            var project = assignment.get('project');
            var updater = route.get('assignmentUpdater');

            updater.deleteAssignment(assignment).then(function() {
              route.send('notify', {
                text: '%@ assignment has been deleted'.fmt(possessive(person.get('first_name'))),
                type: 'success'
              });
              route.get('gtm').sendGAEvent('assignment', 'delete', 'form');
            });
            route.transitionTo('person', person);
          });
        },

        confirmSplitAssignment: function(assignment, date) {
          this.transitionTo('person.assignment.split', assignment.get('person'), assignment, date);
        },

        didTransition: function() {
          this.controllerFor('team').set('showDrawer', false);
          return true;
        }
      },

      gtm: Ember.inject.service('google-tag-manager'),

      // Flag used to make sure we don't try to create the same assignment twice.
      isCreatingAssignment: false,

      // We currently need to force-close to drawer on TV
      // but return to its previous state when leaving
      previousDrawerState: false,

      model: function() {
        return this.store.filter('person', isSavedAndActive);
      },

      setupController: function(controller, model) {
        this._super(controller, model);
        var schedule = this.controllerFor('schedule');
        this.previousDrawerState = schedule.get('showDrawer');
      },

      resetController: function(controller, isExiting) {
        if (isExiting) {
          this.controllerFor('schedule').set('showDrawer', this.previousDrawerState);
        }
      },

      renderTemplate: function(controller, model) {
        this._super(controller, model);
        this.render('team/control-buttons', {
          into:   'schedule',
          outlet: 'control-buttons'
        });
        this.render('team/filter', {
          into:   'schedule',
          outlet: 'filter'
        });
      }
    });


    return TeamRoute;
  });
define("forecast/routes/team/new",
  ["forecast/mixin/person_modal"],
  function(PersonModal) {
    "use strict";

    var TeamNewRoute = Ember.Route.extend(PersonModal, {
      actions: {
        closeModal: function() {
          this.transitionTo('team.index');
        }
      },

      personWasSaved: function(person) {
        log('created person', person.getProperties('id', 'name'));
        var route = this;

        this.transitionTo('person', person).then(function() {
          route.send('notify', {
            text: person.get('name') + ' has been created.',
            type: 'success'
          });
        });
      },

      personWasRejected: function(person) {
        log('failed to create person', person.get('name'));
        person.deleteRecord();
      },

      beforeModel: function(transition) {
        // We're overriding AdminOnlyAccess#beforeModel, so make sure
        // we do the check first.
        if (!this.verifyPermissionsOrTransition()) { return; }

        var subscription = this.controllerFor('subscription');

        if (!subscription.canAddPeople(1)) {
          transition.abort();
          this.send('showPaywallModal', { transition: transition });
        }
      },

      model: function() {
        return this.store.createRecord('person');
      }
    });


    return TeamNewRoute;
  });
define("forecast/routes/team_page",
  ["forecast/utils/model","forecast/mixin/admin-only-access","forecast/mixin/scroll_to_top"],
  function(__dependency1__, AdminOnlyAccess, ScrollToTop) {
    "use strict";
    var isSavedAndActive = __dependency1__.isSavedAndActive;

    var TeamPageRoute = Ember.Route.extend(AdminOnlyAccess, ScrollToTop, {
      actions: {
        addPerson: function() {
          this.transitionTo('team_page.new');
        }
      },

      model: function() {
        return this.store.filter('person', isSavedAndActive);
      }
    });


    return TeamPageRoute;
  });
define("forecast/routes/team_page/archive",
  ["forecast/mixin/admin-only-access"],
  function(AdminOnlyAccess) {
    "use strict";

    var TeamPageArchiveRoute = Ember.Route.extend(AdminOnlyAccess, {
      afterModel: function(person) {
        var route = this;
        var subscription = this.controllerFor('subscription');

        if (person.get('archived')) {
          this.transitionTo('team_page');
          return;
        }

        person.archive()
          .then(function() {
            route.send('notify', {
              text: subscription.personRemovalMessage('archived', person),
              type: 'success'
            });
            route.get('gtm').sendGAEvent('person', 'archive');
          })
          .catch(function() {
            route.send('notify', {
              text: person.get('name') + ' could not be archived.',
              type: 'error'
            });
          });

        this.transitionTo('team_page');
      },

      gtm: Ember.inject.service('google-tag-manager')
    });


    return TeamPageArchiveRoute;
  });
define("forecast/routes/team_page/delete",
  ["forecast/mixin/delete_modal"],
  function(DeleteModal) {
    "use strict";

    var TeamPageDeleteRoute = Ember.Route.extend(DeleteModal, {
      willDelete: function(model) {
        this.transitionTo('team_page');
      },

      deleteWasCanceled: function(model) {
        this.transitionTo('team_page.edit', model);
        this.get('gtm').sendGAEvent('person', 'delete', 'cancel');
      },

      deleteSucceeded: function(model) {
        var subscription = this.controllerFor('subscription');
        log('deleted person', model.getProperties('id', 'name'));
        this.send('notify', {
          text: subscription.personRemovalMessage('deleted', model),
          type: 'success'
        });
        this.get('gtm').sendGAEvent('person', 'delete', 'save');
      },

      canDelete: function(model) {
        return (model.get('id') !== this.realtime.currentUserId)
               && !model.get('archived');
      },

      denyDelete: function(model, transition) {
        this.transitionTo('team_page.edit', model);
      },

      controllerName: 'person/delete',

      gtm: Ember.inject.service('google-tag-manager')
    });


    return TeamPageDeleteRoute;
  });
define("forecast/routes/team_page/edit",
  ["forecast/mixin/person_modal"],
  function(PersonModal) {
    "use strict";

    var TeamPageEditRoute = Ember.Route.extend(PersonModal, {
      actions: {
        closeModal: function(person) {
          this.transitionTo('team_page');
        },
        goToArchiveRoute: function(person) {
          this.transitionTo('team_page.archive', person);
        },
        goToDeleteRoute: function(person) {
          this.transitionTo('team_page.delete', person);
        }
      },

      personWasSaved: function(person) {
        log('updated person', person.getProperties('id', 'name'));
        this.send('notify', {
          text: person.get('name') + ' has been updated.',
          type: 'success'
        });
      },

      personWasRejected: function(person) {
        log('failed to update person', person.getProperties('id', 'name'));
        person.rollbackAttributes();
      },

      dismissDestroyRoute: 'team_page',

      afterModel: function(person, transition) {
        this._super(person, transition);
        if(person.get('archived')) {
          this.transitionTo('team_page');
        }
      }
    });


    return TeamPageEditRoute;
  });
define("forecast/routes/team_page/new",
  ["forecast/mixin/person_modal"],
  function(PersonModal) {
    "use strict";

    var TeamPageNewRoute = Ember.Route.extend(PersonModal, {
      actions: {
        closeModal: function() {
          this.transitionTo('team_page');
        }
      },

      personWasSaved: function(person) {
        log('created person', person.getProperties('id', 'name'));
        var route = this;

        this.transitionTo('team_page').then(function() {
          route.send('notify', {
            text: person.get('name') + ' has been created.',
            type: 'success'
          });
        });
      },

      personWasRejected: function(person) {
        log('failed to create person', person.get('name'));
        person.deleteRecord();
      },

      beforeModel: function(transition) {
        // We're overriding AdminOnlyAccess#beforeModel, so make sure
        // we do the check first.
        if (!this.verifyPermissionsOrTransition()) { return; }

        var subscription = this.controllerFor('subscription');

        if (!subscription.canAddPeople(1)) {
          transition.abort();
          this.send('showPaywallModal', { transition: transition });
        }
      },

      model: function() {
        return this.store.createRecord('person');
      }
    });


    return TeamPageNewRoute;
  });
define("forecast/serializers/application",
  [],
  function() {
    "use strict";
    var ApplicationSerializer = DS.ActiveModelSerializer.extend({
      isNewSerializerAPI: true,

      serialize: function(record, options) {
        var json = this._super(record, options);

        // These attributes should only be updated by the server
        delete json.updated_at;
        delete json.updated_by_id;

        return json;
      }
    });


    return ApplicationSerializer;
  });
define("forecast/serializers/assignment",
  ["forecast/utils/model","forecast/serializers/application"],
  function(__dependency1__, ApplicationSerializer) {
    "use strict";
    var coerceId = __dependency1__.coerceId;

    var AssignmentSerializer = ApplicationSerializer.extend({
      normalize: function(type, hash) {
        hash.ras_id = coerceId(hash.repeated_assignment_set_id);
        return this._super(type, hash);
      },

      serialize: function(record, options) {
        var json = this._super(record, options);
        delete json.ras_id;
        return json;
      }
    });


    return AssignmentSerializer;
  });
define("forecast/serializers/person",
  ["forecast/serializers/application"],
  function(ApplicationSerializer) {
    "use strict";

    var PersonSerializer = ApplicationSerializer.extend({

      serialize: function(snapshot, options) {
        var json = this._super(snapshot, options);

        // Remove read-only attributes for IrId users
        if (snapshot.record.get('_isIridUser')) {
          delete json.first_name;
          delete json.last_name;
          delete json.email;
        }

        return json;
      }
    });


    return PersonSerializer;
  });
define("forecast/serializers/project",
  ["forecast/serializers/application"],
  function(ApplicationSerializer) {
    "use strict";

    var ProjectSerializer = ApplicationSerializer.extend({
      serialize: function(record, options) {
        var json = this._super(record, options);
        delete json.future_scheduled_hours;
        return json;
      }
    });


    return ProjectSerializer;
  });
define("forecast/serializers/singleton",
  ["forecast/serializers/application"],
  function(ApplicationSerializer) {
    "use strict";

    var SingletonSerializer = ApplicationSerializer.extend({
      normalize: function(type, hash, prop) {
        hash.id = hash.id || 'singleton';
        return this._super(type, hash, prop);
      }
    });


    return SingletonSerializer;
  });
define("forecast/serializers/subscription",
  ["forecast/serializers/singleton"],
  function(SingletonSerializer) {
    "use strict";

    var SubscriptionSerializer = SingletonSerializer.extend({
    });


    return SubscriptionSerializer;
  });
define("forecast/services/announcement",
  ["forecast/utils/ajax"],
  function(__dependency1__) {
    "use strict";
    var ajax = __dependency1__.ajax;
    var get = __dependency1__.get;

    var Announcement = Ember.Service.extend({
      fetch: function(callback) {
        get('/announcement').then(function(data) {
          callback(data.announcement);
        });
      },

      dismiss: function() {
        return ajax('/announcement', { type: 'DELETE' });
      }
    });


    return Announcement;
  });
define("forecast/services/assignment-updater",
  ["forecast/utils/model","forecast/utils/bus","forecast/models/repeated_assignment_set"],
  function(__dependency1__, Bus, RAS) {
    "use strict";
    var changedKeysForGA = __dependency1__.changedKeysForGA;

    function isFirstOfSet(repeatedSet, assignment) {
      var repeatedSetStart = repeatedSet.get('first_start_date');
      var changes = assignment.changedAttributes();
      var assignmentStart = changes.start_date
        ? changes.start_date[0]
        : assignment.get('start_date');

      return repeatedSetStart.isSame(assignmentStart, 'day');
    }

    var AssignmentUpdater = Ember.Service.extend({
      gtm: Ember.inject.service('google-tag-manager'),

      updateRepeatedSet: function(repeatedSet, assignment, repeatWeeks, person) {
        if (assignment.get('duration') > 5) {
          assignment.rollbackAttributes();
          return Ember.RSVP.reject("Repeated assignment cannot be more than 5 days long");
        }

        var oldPerson = assignment.get('person');

        if (isFirstOfSet(repeatedSet, assignment)) {
          if (person) { assignment.set('person', person); }
          return repeatedSet.update(assignment, repeatWeeks)
            .then(function(savedSet) {
              Bus.trigger('refresh:repeated_assignment_set', savedSet);
              return [savedSet];
            })
            .catch(function(reason) {
              assignment.rollbackAttributes();
              assignment.set('person', oldPerson);
              throw reason;
            });
        }

        var firstHalf, secondHalf;
        return repeatedSet.splitAt(assignment)
          .then(function(sets) {
            firstHalf = sets[0];
            secondHalf = sets[1];
            if (person) { assignment.set('person', person); }
            return Ember.RSVP.all([
              Ember.RSVP.resolve(firstHalf),
              secondHalf.update(assignment)
            ]);
          })
          .then(function(result) {
            Bus.trigger('refresh:repeated_assignment_set', result[0]);
            Bus.trigger('refresh:repeated_assignment_set', result[1]);
            return result;
          })
          .catch(function(reason) {
            assignment.rollbackAttributes();
            assignment.set('person', oldPerson);
            Bus.trigger('refresh:repeated_assignment_set', secondHalf);
            throw reason;
          });
      },

      updateAssignment: function(assignment, person) {
        var rasId = assignment.get('ras_id');
        var repeatedSet = rasId
          ? assignment.store.peekRecord('repeated_assignment_set', rasId)
          : null;
        var changedKeys = changedKeysForGA(assignment);
        var gtm = this.get('gtm');
        var oldPerson = assignment.get('person');

        if (person) { assignment.set('person', person); }

        assignment.set('repeated_assignment_set', null);
        return assignment.update()
          .then(function(assignment) {
            log('updated assignment', assignment.getProperties('id', 'start_date', 'end_date'));
            gtm.sendGAEvent('assignment', 'edit', 'save:{' + changedKeys + '}');
            if (person) {
              oldPerson.get('assignments').removeObject(assignment);
              person.get('assignments').addObject(assignment);
            }
            return assignment;
          })
          .catch(function(reason) {
            log('failed to update assignment', reason);
            assignment.rollbackAttributes();
            assignment.set('person', oldPerson);
            assignment.set('repeated_assignment_set', repeatedSet);
            throw reason;
          });
      },

      copyRepeatedSet: function(repeatedSet, assignment, to) {
        var gtm = this.get('gtm');
        var logProps = {
          assignment: assignment.getProperties('id', 'start_date', 'end_date'),
          from: assignment.get('person').getProperties('id', 'name'),
          to: to.getProperties('id', 'name')
        };

        // fail-fast when we overlap an assignment that's already loaded
        if (!assignment.canMoveTo(to)) {
          var msg = '%@ is already working on %@ during that time.'.fmt(
            to.get('first_name'),
            assignment.get('project.nameWithCode'));
          log('failed to copy assignment', msg, logProps);
          return Ember.RSVP.reject(msg);
        }

        var copy = assignment.duplicate();
        copy.set('person', to);

        var start = copy.get('start_date');
        var end   = repeatedSet.get('last_end_date');
        var weeks = end.diff(start, 'weeks') + 1;

        return this.createRepeatedAssignmentSet(copy, weeks);
      },

      copyAssignment: function(assignment, to) {
        var gtm = this.get('gtm');
        var logProps = {
          assignment: assignment.getProperties('id', 'start_date', 'end_date'),
          from: assignment.get('person').getProperties('id', 'name'),
          to: to.getProperties('id', 'name')
        };

        // fail-fast when we overlap an assignment that's already loaded
        if (!assignment.canMoveTo(to)) {
          var msg = '%@ is already working on %@ during that time.'.fmt(
            to.get('first_name'),
            assignment.get('project.nameWithCode'));
          log('failed to copy assignment', msg, logProps);
          return Ember.RSVP.reject(msg);
        }

        var copy = assignment.duplicate();
        copy.set('person', to);

        return copy.save()
          .then(function(saved) {
            log('copied assignment', logProps);
            Bus.trigger('create:assignment', saved);
            gtm.sendGAEvent('assignment', 'copy', 'save');
            return saved;
          })
          .catch(function(reason) {
            log('failed to copy assignment', reason, logProps);
            copy.rollbackAttributes(); // Removes it from the store
            throw reason || 'Assignment could not be copied';
          });
      },

      deleteRepeatedSet: function(repeatedSet, assignment, repeatWeeks) {
        if (isFirstOfSet(repeatedSet, assignment)) {
          Bus.trigger('destroy:repeated_assignment_set', repeatedSet);
          return repeatedSet.destroyRecord();
        }

        var newWeeks = assignment.get('start_date')
                                 .diff(repeatedSet.get('first_start_date'), 'weeks');

        return this.extendOrContractRepeatedSet(repeatedSet, assignment, newWeeks);
      },

      deleteAssignment: function(assignment) {
        Bus.trigger('destroy:assignment', assignment);
        return assignment.destroyRecord().then(function() {
          log('deleted assignment', assignment.getProperties('id', 'start_date', 'end_date'));
        });
      },

      extendOrContractRepeatedSet: function(repeatedSet, assignment, repeatWeeks) {
        return repeatedSet.update(assignment, repeatWeeks)
          .then(Ember.run.bind(Bus, 'trigger', 'refresh:repeated_assignment_set', repeatedSet));
      },

      createRepeatedAssignmentSet: function(assignment, repeatWeeks) {
        return RAS.createFromAssignment(assignment, repeatWeeks)
          .then(function(repeatedSet) {
            Bus.trigger('refresh:repeated_assignment_set', repeatedSet);
            log('created repeated set',
                repeatedSet.getProperties('id', 'first_start_date', 'last_end_date'));
            return repeatedSet;
          })
          .catch(function(reason) {
            log('failed to create repeated set', reason);
            assignment.rollbackAttributes();
            throw reason;
          });
      }
    });


    return AssignmentUpdater;
  });
define("forecast/services/features",
  [],
  function() {
    "use strict";
    function flag(idsForFeature) {
      return Ember.computed('accountId', function() {
        var accountId = this.get('accountId');
        return accountId ? idsForFeature.contains(accountId) : false;
      });
    }

    var features = Ember.Service.extend({
      setAccountId: function(accountId) {
        this.set('accountId', accountId);
      },

      fullStory: flag([
         '88888', // Iridesco
        '528216', // AI
        '500952', // ullink
         '88917', // Big Human
        '453949', // Real Impact
         '88915', // o3 World
         '91969', // Humblebee
         '90684', // hyperCision
         '89400', // Fluent
         '89132', // ivaldi
         '89220', // Karbonblack
         '88910', // Area 17
         '88901', // Barrel
         '88908', // steve@plankdesign.com
         '88973', // rick@visualhero.com
         '88987', // gabe@spartansystems.co
         '89738', // jac.gould@nextnetpartners.com
         '90325', // daan.lucas@random.nu
         '90736', // sanjay@svds.com
         '92444', // erin.cummings@weboniselab.com
         '92660', // linda.rasmussen@sportech.net
         '93449', // alex.walker@ometis.co.uk
         '93991', // zara.thomas@iamota.com
        '451121', // yj@modx.com
        '460289', // andreas@maqe.com
        '479103', // brian@interactivestrategies.com
        '484431', // courtney.manchester@beyondthewire.net
        '513750', // jess@bluerocket.us
        '526345', // yvburke@glanbia.ie
        '525404', // Elli Simonen - es@ecapacity.dk - https://iridesco.zendesk.com/agent/tickets/183985
        '518507', // Martin Thompson - martin.thompson@mast-ict.com - https://iridesco.zendesk.com/agent/tickets/184148
        '535942', // Yellow Pencil - clement@yellowpencil.com, farhad@yellowpencil.com (DPM Conf)
         '89567'  // D3 (Hilton Worldwide) - shannon.mcdowell@hilton.com (DPM Conf)
      ])
    });


    return features;
  });
define("forecast/services/google-tag-manager",
  ["forecast/utils/config","forecast/utils/bus"],
  function(Config, Bus) {
    "use strict";

    var DATA_LAYER_KEY = 'dataLayer';

    var gtm = Ember.Service.extend({
      dataLayer: function() {
        return window[DATA_LAYER_KEY] = window[DATA_LAYER_KEY] || [];
      }.property(),

      initialize: function() {
        /* jshint ignore:start */
        (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
        new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
        j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
        '//www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
        })(window,document,'script',DATA_LAYER_KEY,Config.GOOGLE_TAG_MANAGER_ID);
        /* jshint ignore:end */

        log('Initialized Google Tag Manager ID:', Config.GOOGLE_TAG_MANAGER_ID);
      },

      push: function(payload) {
        this.get('dataLayer').push(payload);
      },

      sendEvent: function(event_name, category, action, label, value) {
        this.push({
          event: event_name,
          eventCategory: category || undefined,
          eventAction: action || undefined,
          eventLabel: label || undefined,
          eventValue: value || undefined
        });
      },

      sendGAEvent: function(category, action, label, value) {
        this.sendEvent('gaEvent', category, action, label, value);
      }
    });


    return gtm;
  });
define("forecast/services/hours-drawer",
  ["forecast/utils/ajax","forecast/utils/model","forecast/utils/date"],
  function(__dependency1__, __dependency2__, __dependency3__) {
    "use strict";
    var get = __dependency1__.get;
    var coerceId = __dependency2__.coerceId;
    var makeDate = __dependency3__.makeDate;

    var base_url = '/aggregate';

    function urlFor(type, id) {
      var today = makeDate().format('YYYY-MM-DD'),
          url   = '%@/future_scheduled_hours/%@'.fmt(base_url, today);
      if (id) {
        url += '?' + type + '_id=' + id;
      }
      return url;
    }

    function fetch(type, id) {
      return get(urlFor(type, id)).then(function(hours) {
        return hours.future_scheduled_hours.map(function(hour) {
          return {
            project_id: coerceId(hour.project_id),
            person_id:  coerceId(hour.person_id),
            allocation: hour.allocation
          };
        });
      });
    }

    var HoursDrawer = Ember.Service.extend({
      hoursForProject: function(id) {
        return fetch('project', id);
      },

      hoursForProjects: function() {
        return fetch().then(function(hours) {
          return hours.reduce(function(map, hour) {
            var id = hour.project_id;
            (map[id] || (map[id] = [])).push(hour);
            return map;
          }, {});
        });
      },

      remainingBudgetForProjects: function() {
        return get(base_url + '/remaining_budgeted_hours').then(function(budgets) {
          return budgets.remaining_budgeted_hours.reduce(function(map, budget) {
            map[budget.project_id] = {
              budget_by: budget.budget_by,
              expires_in: budget.expires_in,
              hours: budget.hours,
              is_error: +budget.response_code >= 400
            };
            return map;
          }, {});
        });
      }
    });


    return HoursDrawer;
  });
define("forecast/services/working-time",
  [],
  function() {
    "use strict";
    var workingTime = Ember.Object.extend({
      default: undefined,

      lastUsed: Ember.computed({
        get: function() {
          var last_used = window.localStorage.getItem('last_used_allocation');
          return parseFloat(last_used) || null;
        },
        set: function(key, value) {
          window.localStorage.setItem('last_used_allocation', value);
        }
      }).volatile()
    });


    return workingTime.create();
  });
define("forecast/services/zoom",
  [],
  function() {
    "use strict";
    var zoom = Ember.Service.extend({
      level: 1,
      gtm: Ember.inject.service('google-tag-manager'),

      setLevel: function(newLevel) {
        var oldLevel = this.get('level');
        if (newLevel === oldLevel) { return; }
        var dir = oldLevel > newLevel ? 'out' : 'in';

        switch (newLevel) {
          case 1: case 2:
            this.set('level', newLevel);
        }

        this.get('gtm').sendGAEvent('schedule', 'zoom', dir, newLevel);
      },

      in: function() { this.setLevel(1); },
      out: function() { this.setLevel(2); },

      zoomedOut: Ember.computed('level', {
        get: function() {
          return this.get('level') === 2;
        },
        set: function(key, val) {
          this[val ? 'out' : 'in']();
          return !!val;
        }
      }),

      zoomedIn: Ember.computed.not('zoomedOut'),

      zoomClass: Ember.computed('level', function() {
        return 'zoom-%@x'.fmt(this.get('level'));
      })
    });


    return zoom;
  });
define("forecast/transforms/array",
  [],
  function() {
    "use strict";
    var ArrayTransform = DS.Transform.extend({
      serialize: function(value) {
        if (Ember.isEmpty(value)) {
          return [];
        } else if (Ember.isArray(value)) {
          return value.toArray();
        } else {
          return [value];
        }
      },

      deserialize: function(value) {
        if (Ember.isNone(value)) {
          return [];
        } else if (Ember.isArray(value)) {
          return value;
        } else {
          return [value];
        }
      }
    });


    return ArrayTransform;
  });
define("forecast/transforms/datestamp",
  ["forecast/utils/date"],
  function(__dependency1__) {
    "use strict";
    var makeDate = __dependency1__.makeDate;

    var DatestampTransform = DS.Transform.extend({
      serialize: function(value) {
        return value ? makeDate(value).format('YYYY-MM-DD') : null;
      },
      deserialize: function(value) {
        return value ? makeDate(value) : null;
      }
    });


    return DatestampTransform;
  });
define("forecast/transforms/hours_as_seconds",
  [],
  function() {
    "use strict";
    /*
     * NOTE: the Ember.isEmpty calls are here to ensure we don't try to do
     * math on `null`s, as they are allowed in various places where we have
     * allocation and hours_per_day values
     */
    var HoursAsSecondsTransform = DS.NumberTransform.extend({
      deserialize: function(seconds) {
        if (!Ember.isEmpty(seconds)) { seconds /= 3600; }
        return this._super(seconds);
      },

      serialize: function(hours) {
        if (!Ember.isEmpty(hours)) { hours = Math.round(hours * 3600); }
        return this._super(hours);
      }
    });


    return HoursAsSecondsTransform;
  });
define("forecast/transforms/timestamp",
  ["forecast/utils/date"],
  function(__dependency1__) {
    "use strict";
    var fromUtc = __dependency1__.fromUtc;

    var TimestampTransform = DS.Transform.extend({
      serialize: function(value) {
        return value ? value.toJSON() : null;
      },
      deserialize: function(value) {
        return value ? fromUtc(value) : null;
      }
    });


    return TimestampTransform;
  });
define("forecast/utils/ajax",
  ["forecast/utils/json","forecast/utils/config","exports"],
  function(__dependency1__, Config, __exports__) {
    "use strict";
    var safeParseJSON = __dependency1__.safeParseJSON;

    function defaultOptions() {
      return {
        type:     'GET',
        dataType: 'json',
        contentType: 'application/json; charset=UTF-8',
        headers: {
          'Forecast-Account-ID': window.localStorage.getItem('account_id'),
          'Authorization':       'Bearer ' + window.localStorage.getItem('access_token')
        }
      };
    }

    function ajax(url, options) {
      if (RequestStatus.get('disabled')) {
        return Ember.RSVP.Promise.reject('All requests are disabled');
      }

      // `options.data`, if provided, should be a JSON-serializable object that we
      // stringify before sending to the server
      if (options && options.data) {
        options.data = JSON.stringify(options.data);
      }

      var opts = $.extend(true, defaultOptions(), options || {});
      RequestStatus.startRequest();

      return new Ember.RSVP.Promise(function(resolve, reject) {
        var req = $.ajax(Config.SERVER_URL + url, opts);

        req.done(function(data, status, xhr) {
          Ember.run(null, resolve, { data: data, status: status, xhr: xhr });
        });

        req.fail(function(xhr, status, error) {
          Ember.run(null, reject, { xhr: xhr, status: status, error: error });
        });

        req.always(function() {
          Ember.run(RequestStatus, 'finishRequest');
        });
      });
    }

    function resolveWithData(response) {
      return Ember.RSVP.resolve(response.data);
    }

    function rejectWithError(response) {
      var responseText = response.xhr.responseText;
      var reason = responseText
        ? safeParseJSON(responseText, { errors: [response.error] }).errors[0]
        : response.error;
      return Ember.RSVP.reject(reason);
    }

    function get(url, data) {
      return ajax(url, { type: 'GET', data: data }).then(resolveWithData, rejectWithError);
    }

    function post(url, data) {
      return ajax(url, { type: 'POST', data: data }).then(resolveWithData, rejectWithError);
    }

    function post(url, data) {
      return ajax(url, { type: 'POST', data: data }).then(resolveWithData, rejectWithError);
    }

    function put(url, data) {
      return ajax(url, { type: 'PUT', data: data }).then(resolveWithData, rejectWithError);
    }

    function del(url) {
      return ajax(url, { type: 'DELETE' }).then(resolveWithData, rejectWithError);
    }

    var RequestStatus = Ember.Object.extend({
      currentRequests: 0,
      startRequest: function() {
        this.incrementProperty('currentRequests');
      },
      finishRequest: function() {
        this.decrementProperty('currentRequests');
      },
      inFlight: Ember.computed.gt('currentRequests', 0),
      disabled: false
    }).create();

    __exports__.ajax = ajax;
    __exports__.get = get;
    __exports__.post = post;
    __exports__.put = put;
    __exports__.del = del;
    __exports__.RequestStatus = RequestStatus;
  });
define("forecast/utils/allocation_math",
  ["exports"],
  function(__exports__) {
    "use strict";
    function allocationToInt(x) {
      return Math.round(x * 100);
    }

    function addAllocation(a, b) {
      return (allocationToInt(a) + allocationToInt(b)) / 100;
    }

    function subtractAllocation(a, b) {
      return (allocationToInt(a) - allocationToInt(b)) / 100;
    }

    function multiplyAllocation(a, n) {
      return (allocationToInt(a) * n) / 100;
    }

    function divideAllocation(a, n) {
      return allocationToInt(a / n) / 100;
    }

    __exports__.addAllocation = addAllocation;
    __exports__.subtractAllocation = subtractAllocation;
    __exports__.multiplyAllocation = multiplyAllocation;
    __exports__.divideAllocation = divideAllocation;
  });
define("forecast/utils/array",
  ["exports"],
  function(__exports__) {
    "use strict";
    function intersect(a, b) {
      a = a || [];
      b = b || [];
      return a.filter(function(item) {
        return b.contains(item);
      });
    }

    __exports__.intersect = intersect;
  });
define("forecast/utils/bounded_queue",
  [],
  function() {
    "use strict";
    /*
     * A dirt-simple bounded FIFO queue.
     *
     * Create it with a `max` value:
     *
     *     var bq = BoundedQueue.create({ max: 3 });
     *
     * Push stuff into it, with `push`:
     *
     *     for (var i = 0; i < 10; i++) { bq.push(i); }
     *
     * Get stuff out of it with `toArray`:
     *
     *     bq.toArray() //=> [7, 8, 9]
     */
    var BoundedQueue = Ember.Object.extend({
      max: null,
      _data: function() { return []; }.property(),

      push: function(item) {
        Ember.propertyWillChange(this, '[]');
        var data = this.get('_data');
        data.push(item);
        if (data.length > this.get('max')) { data.shift(); }
        Ember.propertyDidChange(this, '[]');
      },

      '[]': function() {
        return this;
      }.property(),

      toArray: function() {
        return this.get('_data').slice();
      }
    });


    return BoundedQueue;
  });
define("forecast/utils/bus",
  [],
  function() {
    "use strict";
    var Bus = Ember.Object.create({
      trigger: function(eventName) {
        var varargs = [].slice.call(arguments, 1);
        return Ember.sendEvent(this, eventName, varargs);
      },

      on: function(eventName, target, method) {
        return Ember.addListener(this, eventName, target, method);
      },

      once: function(eventName, target, method) {
        return Ember.addListener(this, eventName, target, method, true);
      },

      off: function(eventName, target, method) {
        return Ember.removeListener(this, eventName, target, method);
      }
    });


    return Bus;
  });
define("forecast/utils/computed",
  ["exports"],
  function(__exports__) {
    "use strict";
    /**
     * A conditional computed property. If the `test` property is truthy,
     * its value will be that of the `ifTrue` property, and the `ifFalse`
     * property otherwise.
     *
     * @param {String} test
     * @param {String} ifTrue
     * @param {String} ifFalse
     */
    function ifelse(test, ifTrue, ifFalse) {
      return Ember.computed(test, function() {
        return this.get(test) ? this.get(ifTrue) : this.get(ifFalse);
      });
    }

    ifelse.val = function(test, trueVal, falseVal) {
      return Ember.computed(test, function() {
        return this.get(test) ? trueVal : falseVal;
      });
    };

    ifelse.prop = ifelse;

    /**
     * A simple little countdown timer.
     *
     *    var MyTimer = Ember.Object.extend({
     *      seconds: countdown(),
     *      logSeconds: function() {
     *        console.log('seconds=%@'.fmt(this.get('seconds')));
     *      }.observes('seconds')
     *    });
     *
     *    var timer = MyTimer.create();
     *
     * Start the timer, by `set`ting it to some number:
     *
     *    timer.set('seconds', 3);
     *    //=> LOG: seconds=3
     *    //=> LOG: seconds=2
     *    //=> LOG: seconds=1
     *    //=> LOG: seconds=0
     *
     * The timer will stop when it gets to 0 or when you set it again.
     *
     * To stop the timer, set it to some falsy value (null/undefined/0).
     */
    function countdown() {
      var seconds = 0,
          intervalId;

      function stop() { clearInterval(intervalId); }

      return Ember.computed(function(key, value) {
        if (arguments.length === 1) { return seconds; }

        seconds = value || 0;
        if (seconds === 0) { return seconds; }

        stop();

        var obj = this;
        intervalId = setInterval(function() {
          Ember.propertyWillChange(obj, key);
          if ((--seconds) <= 0) { stop(); }
          Ember.propertyDidChange(obj, key);
        }, 1000);

        return seconds;
      });
    }

    function fcOneWay(dependentKey) {
      return Ember.computed(dependentKey, {
        get: function(key) {
          return this.get(dependentKey);
        },
        set: function(key, value) {
          return value;
        }
      });
    }

    __exports__.ifelse = ifelse;
    __exports__.countdown = countdown;
    __exports__.fcOneWay = fcOneWay;
  });
define("forecast/utils/config",
  [],
  function() {
    "use strict";
    var Config = Object.freeze(window.ForecastENV || {});

    delete window.ForecastENV;


    return Config;
  });
define("forecast/utils/connection",
  ["forecast/utils/computed","forecast/utils/bus"],
  function(__dependency1__, Bus) {
    "use strict";
    var countdown = __dependency1__.countdown;

    var Connection = Ember.Object.extend({
      retryTimeout: null,

      delay: 0,
      retryingIn: countdown(),

      setupListeners: function() {
        Bus.on('connection:online',  this, 'stopRetrying');
        Bus.on('connection:offline', this, 'startRetrying');
      }.on('init'),

      randomUrl: function() {
        return '/index.html?n=' + Math.floor(Math.random() * 1000000);
      },

      ping: function() {
        return $.ajax(this.randomUrl(), {
          type:    'HEAD',
          timeout: 3000
        });
      },

      check: function() {
        this.ping().then(function() {
          Ember.run(Bus, 'trigger', 'connection:online');
        });
      }.on('init'),

      scheduleRetry: function(delay) {
        Ember.run.cancel(this.get('retryTimeout'));
        return Ember.run.later(this, function() {
          this.set('delay', delay * 2);
          this.check();
        }, delay);
      },

      startRetrying: function() {
        var delay = this.get('delay') || 1000;
        this.setProperties({
          retryingIn:   delay / 1000,
          retryTimeout: this.scheduleRetry(delay)
        });
      },

      stopRetrying: function() {
        Ember.run.cancel(this.get('retryTimeout'));
        this.setProperties({
          delay:        0,
          retryingIn:   0,
          retryTimeout: null
        });
      }
    });


    return Connection.create();
  });
define("forecast/utils/countries",
  [],
  function() {
    "use strict";
    // List of countries from this gist:
    // https://gist.github.com/Keeguon/2310008

    var Countries = [
      {name: 'Afghanistan', code: 'AF'},
      {name: 'Åland Islands', code: 'AX'},
      {name: 'Albania', code: 'AL'},
      {name: 'Algeria', code: 'DZ'},
      {name: 'American Samoa', code: 'AS'},
      {name: 'Andorra', code: 'AD'},
      {name: 'Angola', code: 'AO'},
      {name: 'Anguilla', code: 'AI'},
      {name: 'Antarctica', code: 'AQ'},
      {name: 'Antigua and Barbuda', code: 'AG'},
      {name: 'Argentina', code: 'AR'},
      {name: 'Armenia', code: 'AM'},
      {name: 'Aruba', code: 'AW'},
      {name: 'Australia', code: 'AU'},
      {name: 'Austria', code: 'AT'},
      {name: 'Azerbaijan', code: 'AZ'},
      {name: 'Bahamas', code: 'BS'},
      {name: 'Bahrain', code: 'BH'},
      {name: 'Bangladesh', code: 'BD'},
      {name: 'Barbados', code: 'BB'},
      {name: 'Belarus', code: 'BY'},
      {name: 'Belgium', code: 'BE'},
      {name: 'Belize', code: 'BZ'},
      {name: 'Benin', code: 'BJ'},
      {name: 'Bermuda', code: 'BM'},
      {name: 'Bhutan', code: 'BT'},
      {name: 'Bolivia', code: 'BO'},
      {name: 'Bosnia and Herzegovina', code: 'BA'},
      {name: 'Botswana', code: 'BW'},
      {name: 'Bouvet Island', code: 'BV'},
      {name: 'Brazil', code: 'BR'},
      {name: 'British Indian Ocean Territory', code: 'IO'},
      {name: 'Brunei Darussalam', code: 'BN'},
      {name: 'Bulgaria', code: 'BG'},
      {name: 'Burkina Faso', code: 'BF'},
      {name: 'Burundi', code: 'BI'},
      {name: 'Cambodia', code: 'KH'},
      {name: 'Cameroon', code: 'CM'},
      {name: 'Canada', code: 'CA'},
      {name: 'Cape Verde', code: 'CV'},
      {name: 'Cayman Islands', code: 'KY'},
      {name: 'Central African Republic', code: 'CF'},
      {name: 'Chad', code: 'TD'},
      {name: 'Chile', code: 'CL'},
      {name: 'China', code: 'CN'},
      {name: 'Christmas Island', code: 'CX'},
      {name: 'Cocos (Keeling) Islands', code: 'CC'},
      {name: 'Colombia', code: 'CO'},
      {name: 'Comoros', code: 'KM'},
      {name: 'Congo', code: 'CG'},
      {name: 'Congo, The Democratic Republic of the', code: 'CD'},
      {name: 'Cook Islands', code: 'CK'},
      {name: 'Costa Rica', code: 'CR'},
      {name: 'Cote D\'Ivoire', code: 'CI'},
      {name: 'Croatia', code: 'HR'},
      {name: 'Cuba', code: 'CU'},
      {name: 'Cyprus', code: 'CY'},
      {name: 'Czech Republic', code: 'CZ'},
      {name: 'Denmark', code: 'DK'},
      {name: 'Djibouti', code: 'DJ'},
      {name: 'Dominica', code: 'DM'},
      {name: 'Dominican Republic', code: 'DO'},
      {name: 'Ecuador', code: 'EC'},
      {name: 'Egypt', code: 'EG'},
      {name: 'El Salvador', code: 'SV'},
      {name: 'Equatorial Guinea', code: 'GQ'},
      {name: 'Eritrea', code: 'ER'},
      {name: 'Estonia', code: 'EE'},
      {name: 'Ethiopia', code: 'ET'},
      {name: 'Falkland Islands (Malvinas)', code: 'FK'},
      {name: 'Faroe Islands', code: 'FO'},
      {name: 'Fiji', code: 'FJ'},
      {name: 'Finland', code: 'FI'},
      {name: 'France', code: 'FR'},
      {name: 'French Guiana', code: 'GF'},
      {name: 'French Polynesia', code: 'PF'},
      {name: 'French Southern Territories', code: 'TF'},
      {name: 'Gabon', code: 'GA'},
      {name: 'Gambia', code: 'GM'},
      {name: 'Georgia', code: 'GE'},
      {name: 'Germany', code: 'DE'},
      {name: 'Ghana', code: 'GH'},
      {name: 'Gibraltar', code: 'GI'},
      {name: 'Greece', code: 'GR'},
      {name: 'Greenland', code: 'GL'},
      {name: 'Grenada', code: 'GD'},
      {name: 'Guadeloupe', code: 'GP'},
      {name: 'Guam', code: 'GU'},
      {name: 'Guatemala', code: 'GT'},
      {name: 'Guernsey', code: 'GG'},
      {name: 'Guinea', code: 'GN'},
      {name: 'Guinea-Bissau', code: 'GW'},
      {name: 'Guyana', code: 'GY'},
      {name: 'Haiti', code: 'HT'},
      {name: 'Heard Island and Mcdonald Islands', code: 'HM'},
      {name: 'Holy See (Vatican City State)', code: 'VA'},
      {name: 'Honduras', code: 'HN'},
      {name: 'Hong Kong', code: 'HK'},
      {name: 'Hungary', code: 'HU'},
      {name: 'Iceland', code: 'IS'},
      {name: 'India', code: 'IN'},
      {name: 'Indonesia', code: 'ID'},
      {name: 'Iran, Islamic Republic Of', code: 'IR'},
      {name: 'Iraq', code: 'IQ'},
      {name: 'Ireland', code: 'IE'},
      {name: 'Isle of Man', code: 'IM'},
      {name: 'Israel', code: 'IL'},
      {name: 'Italy', code: 'IT'},
      {name: 'Jamaica', code: 'JM'},
      {name: 'Japan', code: 'JP'},
      {name: 'Jersey', code: 'JE'},
      {name: 'Jordan', code: 'JO'},
      {name: 'Kazakhstan', code: 'KZ'},
      {name: 'Kenya', code: 'KE'},
      {name: 'Kiribati', code: 'KI'},
      {name: 'Korea, Democratic People\'S Republic of', code: 'KP'},
      {name: 'Korea, Republic of', code: 'KR'},
      {name: 'Kuwait', code: 'KW'},
      {name: 'Kyrgyzstan', code: 'KG'},
      {name: 'Lao People\'S Democratic Republic', code: 'LA'},
      {name: 'Latvia', code: 'LV'},
      {name: 'Lebanon', code: 'LB'},
      {name: 'Lesotho', code: 'LS'},
      {name: 'Liberia', code: 'LR'},
      {name: 'Libyan Arab Jamahiriya', code: 'LY'},
      {name: 'Liechtenstein', code: 'LI'},
      {name: 'Lithuania', code: 'LT'},
      {name: 'Luxembourg', code: 'LU'},
      {name: 'Macao', code: 'MO'},
      {name: 'Macedonia, The Former Yugoslav Republic of', code: 'MK'},
      {name: 'Madagascar', code: 'MG'},
      {name: 'Malawi', code: 'MW'},
      {name: 'Malaysia', code: 'MY'},
      {name: 'Maldives', code: 'MV'},
      {name: 'Mali', code: 'ML'},
      {name: 'Malta', code: 'MT'},
      {name: 'Marshall Islands', code: 'MH'},
      {name: 'Martinique', code: 'MQ'},
      {name: 'Mauritania', code: 'MR'},
      {name: 'Mauritius', code: 'MU'},
      {name: 'Mayotte', code: 'YT'},
      {name: 'Mexico', code: 'MX'},
      {name: 'Micronesia, Federated States of', code: 'FM'},
      {name: 'Moldova, Republic of', code: 'MD'},
      {name: 'Monaco', code: 'MC'},
      {name: 'Mongolia', code: 'MN'},
      {name: 'Montserrat', code: 'MS'},
      {name: 'Morocco', code: 'MA'},
      {name: 'Mozambique', code: 'MZ'},
      {name: 'Myanmar', code: 'MM'},
      {name: 'Namibia', code: 'NA'},
      {name: 'Nauru', code: 'NR'},
      {name: 'Nepal', code: 'NP'},
      {name: 'Netherlands', code: 'NL'},
      {name: 'Netherlands Antilles', code: 'AN'},
      {name: 'New Caledonia', code: 'NC'},
      {name: 'New Zealand', code: 'NZ'},
      {name: 'Nicaragua', code: 'NI'},
      {name: 'Niger', code: 'NE'},
      {name: 'Nigeria', code: 'NG'},
      {name: 'Niue', code: 'NU'},
      {name: 'Norfolk Island', code: 'NF'},
      {name: 'Northern Mariana Islands', code: 'MP'},
      {name: 'Norway', code: 'NO'},
      {name: 'Oman', code: 'OM'},
      {name: 'Pakistan', code: 'PK'},
      {name: 'Palau', code: 'PW'},
      {name: 'Palestinian Territory, Occupied', code: 'PS'},
      {name: 'Panama', code: 'PA'},
      {name: 'Papua New Guinea', code: 'PG'},
      {name: 'Paraguay', code: 'PY'},
      {name: 'Peru', code: 'PE'},
      {name: 'Philippines', code: 'PH'},
      {name: 'Pitcairn', code: 'PN'},
      {name: 'Poland', code: 'PL'},
      {name: 'Portugal', code: 'PT'},
      {name: 'Puerto Rico', code: 'PR'},
      {name: 'Qatar', code: 'QA'},
      {name: 'Reunion', code: 'RE'},
      {name: 'Romania', code: 'RO'},
      {name: 'Russian Federation', code: 'RU'},
      {name: 'RWANDA', code: 'RW'},
      {name: 'Saint Helena', code: 'SH'},
      {name: 'Saint Kitts and Nevis', code: 'KN'},
      {name: 'Saint Lucia', code: 'LC'},
      {name: 'Saint Pierre and Miquelon', code: 'PM'},
      {name: 'Saint Vincent and the Grenadines', code: 'VC'},
      {name: 'Samoa', code: 'WS'},
      {name: 'San Marino', code: 'SM'},
      {name: 'Sao Tome and Principe', code: 'ST'},
      {name: 'Saudi Arabia', code: 'SA'},
      {name: 'Senegal', code: 'SN'},
      {name: 'Serbia and Montenegro', code: 'CS'},
      {name: 'Seychelles', code: 'SC'},
      {name: 'Sierra Leone', code: 'SL'},
      {name: 'Singapore', code: 'SG'},
      {name: 'Slovakia', code: 'SK'},
      {name: 'Slovenia', code: 'SI'},
      {name: 'Solomon Islands', code: 'SB'},
      {name: 'Somalia', code: 'SO'},
      {name: 'South Africa', code: 'ZA'},
      {name: 'South Georgia and the South Sandwich Islands', code: 'GS'},
      {name: 'Spain', code: 'ES'},
      {name: 'Sri Lanka', code: 'LK'},
      {name: 'Sudan', code: 'SD'},
      {name: 'Suriname', code: 'SR'},
      {name: 'Svalbard and Jan Mayen', code: 'SJ'},
      {name: 'Swaziland', code: 'SZ'},
      {name: 'Sweden', code: 'SE'},
      {name: 'Switzerland', code: 'CH'},
      {name: 'Syrian Arab Republic', code: 'SY'},
      {name: 'Taiwan, Province of China', code: 'TW'},
      {name: 'Tajikistan', code: 'TJ'},
      {name: 'Tanzania, United Republic of', code: 'TZ'},
      {name: 'Thailand', code: 'TH'},
      {name: 'Timor-Leste', code: 'TL'},
      {name: 'Togo', code: 'TG'},
      {name: 'Tokelau', code: 'TK'},
      {name: 'Tonga', code: 'TO'},
      {name: 'Trinidad and Tobago', code: 'TT'},
      {name: 'Tunisia', code: 'TN'},
      {name: 'Turkey', code: 'TR'},
      {name: 'Turkmenistan', code: 'TM'},
      {name: 'Turks and Caicos Islands', code: 'TC'},
      {name: 'Tuvalu', code: 'TV'},
      {name: 'Uganda', code: 'UG'},
      {name: 'Ukraine', code: 'UA'},
      {name: 'United Arab Emirates', code: 'AE'},
      {name: 'United Kingdom', code: 'GB'},
      {name: 'United States', code: 'US'},
      {name: 'United States Minor Outlying Islands', code: 'UM'},
      {name: 'Uruguay', code: 'UY'},
      {name: 'Uzbekistan', code: 'UZ'},
      {name: 'Vanuatu', code: 'VU'},
      {name: 'Venezuela', code: 'VE'},
      {name: 'Vietnam', code: 'VN'},
      {name: 'Virgin Islands, British', code: 'VG'},
      {name: 'Virgin Islands, U.S.', code: 'VI'},
      {name: 'Wallis and Futuna', code: 'WF'},
      {name: 'Western Sahara', code: 'EH'},
      {name: 'Yemen', code: 'YE'},
      {name: 'Zambia', code: 'ZM'},
      {name: 'Zimbabwe', code: 'ZW'}
    ];


    return Countries;
  });
define("forecast/utils/date",
  ["exports"],
  function(__exports__) {
    "use strict";
    function thisMonday() {
      return makeDate().day(1);
    }

    function makeDate(date) {
      if (date === undefined) {
        date = moment();
      }

      if (moment.isMoment(date) && date.isValid()) {
        date = date.clone();
        date.toDate().setHours(12, 0, 0, 0);
        return date;
      }

      if (typeof date === 'string' && /^\d{4}\-\d{2}-\d{2}$/.test(date)) {
        return moment(date + 'T12:00:00.000', 'YYYY-MM-DDTHH:mm:ss.SSS');
      }

      return moment.invalid();
    }

    function toDateStamp(date) {
      if (!(moment.isMoment(date) && date.isValid())) {
        return 'Invalid date';
      }

      var y = date.year(),
        m = date.month() + 1,
        d = date.date();

      m = m < 10 ? '0' + m : m;
      d = d < 10 ? '0' + d : d;

      return y + '-' + m + '-' + d;
    }

    function fromUtc(time) {
      return moment.utc(time);
    }

    function validate(date) {
      return moment.isMoment(date) && date.isValid();
    }

    function numberOfWeekendDays(start, end) {
      var number_of_days,
      weekend_days;
      if(!validate(start) || !validate(end)) {
        return null;
      }
      if(start > end) {
        start = [end, end = start][0];
      }
      number_of_days  = end.diff(start, 'days');
      number_of_days += start.day();
      weekend_days = Math.floor(number_of_days / 7) * 2;
      if(number_of_days % 7 === 6) {
        weekend_days += 1;
      }
      if(start.day() === 0) { // Start day is a Sunday
        weekend_days += 1;
      }
      return weekend_days;
    }

    function numberOfWorkDays(timeline_start, date) {
      var start,
      weekends,
      direction = 1;
      if(!validate(timeline_start) || !validate(date)) {
        return null;
      }
      start = date.diff(timeline_start, 'days');
      if(start !== 0) {
        weekends = numberOfWeekendDays(timeline_start, date);
        if(start < 0) {
          direction = -1;
        }
        start -= weekends * direction;
        if([0,6].contains(date.day())) {
          start += direction;
        }
      }
      return start;
    }

    function isWithinRange(date, range_start, range_end, exclude_ends) {
      if(validate(date) && validate(range_start) && validate(range_end)) {
        if(!exclude_ends) {
          if(date.isSame(range_start, 'day') || date.isSame(range_end, 'day'))
            return true;
        }
        if((date.isAfter(range_start, 'day') && date.isBefore(range_end, 'day')))
          return true;
      }
      return false;
    }

    function isRangeWithinRange(subject_start, subject_end, range_start, range_end) {
      if(validate(subject_start) && validate(subject_end) && validate(range_start) && validate(range_end)) {
        if(isWithinRange(subject_start, range_start, range_end))
          return true;
        if(isWithinRange(subject_end, range_start, range_end))
          return true;
        if(subject_start.isBefore(range_start) && subject_end.isAfter(range_end))
          return true;
      }
      return false;
    }

    function earliestOf(a, b) {
      if(!validate(a) || !validate(b)) {
        return null;
      }
      return a.isBefore(b, 'day') ? a : b;
    }

    function latestOf(a, b) {
      if(!validate(a) || !validate(b)) {
        return null;
      }
      return a.isAfter(b, 'day') ? a : b;
    }

    function shift(date, delta) {
      if(!validate(date) || isNaN(delta)) {
        return null;
      }
      delta = Math.round(delta);
      if(delta === 0) {
        return date;
      }
      var new_date = date.clone(),
        weekends = 0;
      if(delta > 0) {
        new_date.add((delta + Math.floor(delta / 5) * 2), 'days');
      } else {
        new_date.add((delta + Math.ceil(delta / 5) * 2), 'days');
      }
      weekends  = numberOfWeekendDays(date, new_date);
      weekends += weekends % 2;
      if(delta < 0) {
        weekends *= -1;
      }
      return date.clone().add((delta + weekends), 'days');
    }

    function timeAgo(date) {
      if(!validate(date)) {
        return {short: '', long: ''};
      }

      var diff  = null,
        stamp = null,
        now   = moment();

      if(diff = now.diff(date, 'days')) {
        stamp = {short: diff + 'd', long: diff + ' day'};
      } else if(diff = now.diff(date, 'hours')) {
        stamp = {short: diff + 'h', long: diff + ' hour'};
      } else if(diff = now.diff(date, 'minutes')) {
        stamp = {short: diff + 'm', long: diff + ' minute'};
      } else if(now.diff(date, 'minutes') === 0) {
        return {short: '1m', long: '1 minute'};
      } else {
        return {short: '', long: ''}; // if all else fails, show nothing
      }

      if(diff > 1) {
        stamp.long = stamp.long + 's';
      }

      return stamp;
    }


    function isWeekend(date) {
      return date.day() % 6 === 0;
    }

    __exports__.thisMonday = thisMonday;
    __exports__.makeDate = makeDate;
    __exports__.toDateStamp = toDateStamp;
    __exports__.fromUtc = fromUtc;
    __exports__.validate = validate;
    __exports__.numberOfWeekendDays = numberOfWeekendDays;
    __exports__.numberOfWorkDays = numberOfWorkDays;
    __exports__.isWithinRange = isWithinRange;
    __exports__.isRangeWithinRange = isRangeWithinRange;
    __exports__.earliestOf = earliestOf;
    __exports__.latestOf = latestOf;
    __exports__.shift = shift;
    __exports__.timeAgo = timeAgo;
    __exports__.isWeekend = isWeekend;
  });
define("forecast/utils/dom",
  ["exports"],
  function(__exports__) {
    "use strict";
    function verticallyOnScreen(el) {
      var rect = el.getBoundingClientRect(),
          top = rect.bottom - rect.height;
      return rect.bottom > 0 && top < window.innerHeight;
    }


    __exports__.verticallyOnScreen = verticallyOnScreen;
  });
define("forecast/utils/event",
  ["exports"],
  function(__exports__) {
    "use strict";
    function noModifiers(event) {
      return !event.shiftKey && !event.ctrlKey && !event.metaKey;
    }

    function isArrow(keyCode) {
      return keyCode >= 37 && keyCode <= 40;
    }

    function isAlphaNum(keyCode) {
      var isNum   = keyCode >= 48 && keyCode <= 57,
          isAlpha = keyCode >= 65 && keyCode <= 90;
      return isAlpha || isNum;
    }

    function cancelEvent(event) {
      event.stopPropagation();
      event.preventDefault();
    }


    __exports__.noModifiers = noModifiers;
    __exports__.isArrow = isArrow;
    __exports__.isAlphaNum = isAlphaNum;
    __exports__.cancelEvent = cancelEvent;
  });
define("forecast/utils/file",
  ["forecast/utils/ajax","forecast/utils/config","exports"],
  function(__dependency1__, Config, __exports__) {
    "use strict";
    var ajax = __dependency1__.ajax;
    var jQuery = window.jQuery;

    var SUPPORTS_DOWNLOAD_ATTR = ('download' in document.createElement('a'));

    function clientSideDownload(file) {
      var uri = window.URL.createObjectURL(file.blob);
      var link = document.createElement('a');
      document.body.appendChild(link);
      link.href = uri;
      link.download = file.name;
      link.click();
      link.remove();
      // Defer tear down so that the browser (namely FF) can initiate the download
      Ember.run.next(window.URL, 'revokeObjectURL', uri);
    }

    function remoteDownload(url, query) {
      var params = jQuery.extend({}, query, {
        account_id: window.localStorage.getItem('account_id'),
        access_token: window.localStorage.getItem('access_token')
      });
      var uri = Config.SERVER_URL + url + '?' + jQuery.param(params);
      window.location = uri;
    }

    function fetch(url, query, type) {
      var options = { dataType: 'text' };
      url += '?' + $.param(query);
      return ajax(url, options).then(function(response) {
        var disposition = response.xhr.getResponseHeader('Content-Disposition');
        var filename = disposition.replace(/^.*filename="(.*)"$/, '$1');
        return {
          blob: new window.Blob([response.data], { type: type }),
          name: filename
        };
      });
    }

    function download(url, query, type) {
      if (SUPPORTS_DOWNLOAD_ATTR) {
        return fetch(url, query, type).then(clientSideDownload);
      } else {
        remoteDownload(url, query);
        return Ember.RSVP.resolve();
      }
    }


    __exports__.fetch = fetch;
    __exports__.download = download;
  });
define("forecast/utils/ftux",
  ["forecast/utils/ajax"],
  function(__dependency1__) {
    "use strict";
    var ajax = __dependency1__.ajax;
    var get = __dependency1__.get;

    var FTUX = {
      fetch: function(callback) {
        get('/ftux_state').then(function(data) {
          if (data) {
            callback.call(this, data.ftux_state);
          }
        });
      },

      finish: function() {
        ajax('/ftux_state', {
          type: 'PUT',
          data: { ftux_state: { step: 'done' } }
        });
      }
    };


    return FTUX;
  });
define("forecast/utils/json",
  ["exports"],
  function(__exports__) {
    "use strict";
    function safeParseJSON(jsonText, defaultValue) {
      try      { return JSON.parse(jsonText); }
      catch(e) { return defaultValue; }
    }


    __exports__.safeParseJSON = safeParseJSON;
  });
define("forecast/utils/logger",
  ["forecast/utils/bounded_queue","forecast/utils/config"],
  function(BoundedQueue, Config) {
    "use strict";

    function loggerMethod(name, opts) {
      var ignore = opts && opts.ignore;

      return function() {
        var args = [].slice.call(arguments);

        if (this.get('displayLogs')) { console[name].apply(console, args); }

        if (!ignore) {
         this.history.push({
           stamp: Date.now(),
           level: name,
           args: args
         });
        }
      };
    }

    var Logger = Ember.Object.extend({
      // Assigned in AccountRoute
      user   : null,
      account: null,

      // Determine whether or not to send the errors
      sendErrors:  function() {
        var env = Config.ENVIRONMENT;
        return env === 'PRODUCTION' || env === 'STAGING';
      }.property(),

      // Determine whether or not to display the logs
      displayLogs: function() {
        var env = Config.ENVIRONMENT;
        return env !== 'PRODUCTION' && env !== 'TEST';
      }.property(),

      history: BoundedQueue.create({ max: 25 }),

      log:    loggerMethod('log'),
      warn:   loggerMethod('warn'),
      error:  loggerMethod('error', { ignore: true }),
      info:   loggerMethod('info'),
      debug:  loggerMethod('debug', { ignore: true }),
      assert: Ember.Logger.assert,

      userData: function() {
        return {
          id:         this.get('user.id'),
          name:       this.get('user.name'),
          email:      this.get('user.email'),
          harvest_id: this.get('user.person.harvest_user_id'),
          is_admin:   this.get('user.person.admin')
        };
      },

      metaData: function() {
        var events = this.history.toArray().reduce(function(map, item) {
          map['T ' + item.stamp] = item.args.map(function(arg) {
            return typeof arg === 'string' ? arg : JSON.stringify(arg);
          }).join(' ');
          return map;
        }, {});

        return {
          account: {
            id:   this.get('account.id'),
            name: this.get('account.name'),
            harvest_subdomain: this.get('account.harvest_subdomain')
          },
          event_log: events
        };
      },

      reportError: function(error) {
        if (!window.Bugsnag || !this.get('sendErrors')) { return; }
        Bugsnag.user = this.userData();
        Bugsnag.metaData = this.metaData();
        Bugsnag.notifyException(error);
      }
    });


    return Logger;
  });
define("forecast/utils/mockjax",
  ["forecast/utils/date"],
  function(DU) {
    "use strict";
    Ember.$.mockjaxSettings.logging = false;
    Ember.$.mockjaxSettings.responseTime = 0;


    function isFilteredAndStartsThisMonday(fixture) {
      var stamp = 'start_date-' + DU.toDateStamp(DU.thisMonday());
      if (fixture.indexOf('filtered') === -1) { return false; }
      if (fixture.indexOf(stamp) === -1) { return false; }
      return true;
    }

    var Mockjax = {
      host_regex: '(:\/\/[a-z0-9\\-\\.]+)?[\/?]',
      fixtures_dir: '/tests/integration/fixtures/responses',

      // Cache other explicitly registered mock handlers
      fixture_handlers: Em.A(),

      // Explicitely define a URL and the fixture data path (and status) to be returned
      json_fixture: function(url, fixture, status, settings) {
        var options = $.extend({
          url: new RegExp(Mockjax.host_regex + url + '$'),
          dataType: 'json',
          status: status || 200
        }, settings || {});

        switch(typeof(fixture)) {
          case 'function':
            options.response = fixture;
            break;
          case 'object':
            options.responseText = JSON.stringify(fixture);
            break;
          case 'string':
            options.proxy = Mockjax.fixtures_dir + '/' + fixture + '.json';
            break;
          default:
            options.responseText = '';
        }

        Ember.$.mockjax(options);
        Mockjax.fixture_handlers.pushObject(url);
      },

      // Automatically resolve and return fixture data for all requests
      catch_all: function() {
        Ember.$.mockjax(function(settings) {
          var parser = document.createElement('a');
              parser.href = settings.url;

          // retrieve path without file name extensions and leading slash
          var fixture = parser.pathname.replace(/\..*$/, '').slice(1);

          if(!fixture) {
            return false;
          }

          var qp = parser.search ? ('\\' + parser.search) : '';
          if(Mockjax.fixture_handlers.contains(fixture + qp)) {
            return false;
          }

          switch(settings.type) {
            case 'GET':
              var params = [];

              if(fixture.search(/\d$/) === -1) {
                fixture += '/index';
              }

              for(var param in settings.data) {
                if(settings.data.hasOwnProperty(param)){
                  params.pushObject(param + '=' + settings.data[param]);
                }
              }

              // filtered fixtures are looked up from a sub-directory called filtered/
              if(params.length) {
                var dir  = fixture.split('/'),
                    file = dir.pop();
                    params.reverse();
                fixture = dir.join('/') + '/filtered/' + file + '?' + params.join('&');
              }

              fixture = fixture.replace(/[\?\&\=]/g, '-');
              break;
            case 'POST':
              fixture += '/created';
              break;
            case 'PUT':
            case 'DELETE':
              return { status: 204, responseText: '' };
          }

          /* TODO: remove this by figuring out something better
           *
           * Basically, if this is a filtered fixture and starts `thisMonday`, then
           * we stub out an empty response. This only works as long as we don't add
           * new filtered fixtures that start this week - so this is not
           * a long-term solution, just something to get us running for now.
           */
          if (isFilteredAndStartsThisMonday(fixture)) {
            var key = fixture.split('/')[0];
            var obj = {}; obj[key] = [];
            return {
              dataType: 'json',
              responseText: JSON.stringify(obj)
            };
          }

          return {
            dataType: 'json',
            proxy: Mockjax.fixtures_dir + '/' + fixture + '.json'
          };
        });
      },

      clear_all: function() {
        Ember.$.mockjax.clear();
        Mockjax.fixture_handlers = Em.A();
        Mockjax.catch_all();
      }
    };

    Mockjax.json_fixture.GET = function(url, fixture, status, opts) {
      if (!opts) { opts = {}; }
      $.extend(opts, { type: 'GET' });
      Mockjax.json_fixture(url, fixture, status || 200, opts);
    };

    Mockjax.json_fixture.PUT = function(url, fixture, status) {
      Mockjax.json_fixture(url, fixture, status || 201, { type: 'PUT' });
    };

    Mockjax.json_fixture.POST = function(url, fixture, status) {
      Mockjax.json_fixture(url, fixture, status || 200, { type: 'POST' });
    };

    Mockjax.json_fixture.DELETE = function(url, fixture, status) {
      Mockjax.json_fixture(url, fixture, status || 204, { type: 'DELETE' });
    };

    // Karma namespaces its server's root directory as `base` in all URLs
    if(window.location.href.search(/context\.html/, window.location.href) !== -1) {
      Mockjax.fixtures_dir = 'base' + Mockjax.fixtures_dir;
    }


    return Mockjax;
  });
define("forecast/utils/model",
  ["exports"],
  function(__exports__) {
    "use strict";
    function isActive(model) {
      return !model.get('archived');
    }

    function isSaved(model) {
      return !model.get('isNew');
    }

    function isSavedAndActive(model) {
      return isSaved(model) && isActive(model);
    }

    function isArchived(model) {
      return model.get('archived');
    }

    function filterActive(type) {
      return function() {
        return this.store.filter(type, isActive);
      }.property();
    }

    function filterAll(type) {
      return function() {
        return this.store.peekAll(type);
      }.property();
    }

    function coerceId(id) {
      return id == null ? null : id + '';
    }

    function changedKeysForGA(model, additional_keys) {
      var changes = model.changedAttributes();

      switch (model.constructor.modelName) {
        case 'person':
          var teams = changes['teams'];
          if (teams) {
            var old_teams = teams[0] || [];
            var new_teams = teams[1] || [];
            if(old_teams.sort().join() === new_teams.sort().join()) {
              delete changes['teams'];
            }
          }
          break;
        case 'account':
          // This is terribly ugly, but needed, because we’re replacing the
          // `color_lables` array wholesale and would therefore end of with that
          // always being part of `changed_attrs`. This now only includes it if
          // at least one label was changed, and then only those color names
          var old_colors = changes.color_labels[0];
          var new_colors = changes.color_labels[1];
          delete changes.color_labels;

          var changed_colors = old_colors.reject(function(item, idx) {
            return item.label === new_colors[idx].label;
          }).mapBy('name');

          if (changed_colors.length) {
            changes['color_labels:[' + changed_colors + ']'] = '';
          }
          break;
      }

      return Object.keys(changes).pushObjects(additional_keys || []).join(',');
    }

    __exports__.isActive = isActive;
    __exports__.isSaved = isSaved;
    __exports__.isSavedAndActive = isSavedAndActive;
    __exports__.isArchived = isArchived;
    __exports__.filterActive = filterActive;
    __exports__.filterAll = filterAll;
    __exports__.coerceId = coerceId;
    __exports__.changedKeysForGA = changedKeysForGA;
  });
define("forecast/utils/sort_for_humans",
  ["exports"],
  function(__exports__) {
    "use strict";
    /*
     * Case-insensitive Sorting For Humans.
     *
     * Based on the AlphaNum algorithm by Dave Koelle.
     * http://www.davekoelle.com/alphanum.html
     *
     * How it works: it breaks the strings to be into "chunks" based on whether the
     * sub-string is a number or not. For the purposes of this implementation,
     * a "number" is defined as decimal numbers with at least one digit on either
     * side of the decimal point.
     *
     * So "asd123asd" would break into "asd", "123", "asd".
     *
     * It then iterates over those chunks and compares them based on their type.
     *
     * The actual implementation has some optimizations built-in. For example, it
     * doesn't actually break the string into chunks, but scans it one character at
     * a time - why do extra work when we can know that "a129xxx92x49" will come
     * before "z123xxx234xx3425" just by looking at the first character?
     *
     * Usage: just pass the `forHumans` function as the sort comparator to any call
     * to Array.prototype.sort:
     *
     *    ['z10', 'z9', 'z8'].sort(forHumans) ==> ['z8', 'z9', 'z10']
     */

    var num = /^\d+(?:\.\d+)?/,
        get = Ember.get;

    function forHumans(a, b) {
      if (a === b) return 0;

      a = a.toLowerCase();
      b = b.toLowerCase();

      var ai = 0, bi = 0;
      var aa, bb, an, bn;

      for (;;) {
        aa = a.charCodeAt(ai);
        bb = b.charCodeAt(bi);

        // Exit loop if we've reached the end of either string.
        if (!(aa && bb)) { break; }

        if (aa >= 48 && aa <= 57 && bb >= 48 && bb <= 57) {
          // Extract number sequences and compare them
          an = a.slice(ai).match(num)[0];
          bn = b.slice(bi).match(num)[0];

          if (an !== bn) { return an - bn; }

          ai += an.length;
          bi += bn.length;
        } else {
          // Compare character codes
          if (aa !== bb) { return aa - bb; }

          ai++;
          bi++;
        }
      }

      return a.length - b.length;
    }

    function forHumansBy(prop) {
      return function(a, b) {
        return forHumans(get(a, prop), get(b, prop));
      };
    }


    __exports__.forHumans = forHumans;
    __exports__.forHumansBy = forHumansBy;
  });
define("forecast/utils/stream_map",
  ["exports"],
  function(__exports__) {
    "use strict";
    function createStreamMap(streamKey, ownerKey, owners) {
      var map = owners.reduce(function(map, owner) {
        map.set(owner, []);
        return map;
      }, Ember.Map.create());

      function stream(items, owner) {
        if (!owner) { return; } // Special-case for the null Everyone person
        owner.get(streamKey).stream(items);
      }

      return {
        push: function(item) {
          var owner = item.get(ownerKey),
              items = map.get(owner);
          if (!items) { map.set(owner, items = []); }
          items.push(item);
        },

        stream: map.forEach.bind(map, stream)
      };
    }

    __exports__.createStreamMap = createStreamMap;
  });
define("forecast/utils/streamed_array_proxy",
  [],
  function() {
    "use strict";
    /**
     * Provides an interface for updating an Array without replacing its contents
     * ==========================================================================
     *
     * How it works:
     * -------------
     * By passing an array to the `stream` method of an instance of
     * `StreamedArrayProxy` all items that are not already in the receiver will be
     * added while already existing ones are not overwritten. All items that are
     * contained in the receiver but not in the passed array are removed.
     *
     * Example:
     * --------
     *     var k = StreamedArrayProxy.create({ content: ['a', 'b', 'c'] });
     *     k.stream(['a', 'c', 'd']);
     *     k.get('content') === ['a', 'c', 'd'] // 'b' removed, 'd' added
     *
     * When to use it:
     * ---------------
     * This is helpful when you bind and render an array of objects
     * in a template and want to minimize the number of re-renders after you received
     * updated content you want to display.
     * Using `.set()` on the bound array and effectively replacing it with the new
     * content will render all contents, even those that already existed.
     *
     */

    var StreamedArrayProxy = Ember.ArrayProxy.extend({
      stream: function(new_content) {
        Ember.beginPropertyChanges();
        this.clear();
        this.pushObjects(new_content);
        Ember.endPropertyChanges();
        return this;
      }
    });


    return StreamedArrayProxy;
  });
define("forecast/utils/string",
  ["exports"],
  function(__exports__) {
    "use strict";
    function possessive(name) {
      return (name.charAt(name.length - 1) === 's' ? name + "’" : name + "’s");
    }

    function pluralWithCount(count, word, irregular) {
      if (count !== 1) {
          word = irregular || word + 's';
      }
      return count + ' ' + word;
    }

    __exports__.possessive = possessive;
    __exports__.pluralWithCount = pluralWithCount;
  });
define('forecast/templates/account/_harvest_import_buttons', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 3,
            "column": 4
          },
          "end": {
            "line": 5,
            "column": 4
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("      Importing ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("…\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
        return morphs;
      },
      statements: [
        ["content","importButtonText",["loc",[null,[4,16],[4,36]]]]
      ],
      locals: [],
      templates: []
    };
  }());
  var child1 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 5,
            "column": 4
          },
          "end": {
            "line": 7,
            "column": 4
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("      Import ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
        return morphs;
      },
      statements: [
        ["content","importButtonText",["loc",[null,[6,13],[6,33]]]]
      ],
      locals: [],
      templates: []
    };
  }());
  var child2 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 10,
              "column": 4
            },
            "end": {
              "line": 12,
              "column": 4
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      Import Later\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 12,
              "column": 4
            },
            "end": {
              "line": 14,
              "column": 4
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      Back\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 9,
            "column": 2
          },
          "end": {
            "line": 15,
            "column": 2
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","if",[["get","isInHarvestConnectFlow",["loc",[null,[10,10],[10,32]]]]],[],0,1,["loc",[null,[10,4],[14,11]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "triple-curlies"
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 17,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createElement("div");
      dom.setAttribute(el1,"class","list-controls");
      var el2 = dom.createTextNode("\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createElement("button");
      var el3 = dom.createTextNode("\n");
      dom.appendChild(el2, el3);
      var el3 = dom.createComment("");
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("  ");
      dom.appendChild(el2, el3);
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n");
      dom.appendChild(el1, el2);
      var el2 = dom.createComment("");
      dom.appendChild(el1, el2);
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var element0 = dom.childAt(fragment, [0]);
      var element1 = dom.childAt(element0, [1]);
      var morphs = new Array(5);
      morphs[0] = dom.createAttrMorph(element1, 'class');
      morphs[1] = dom.createAttrMorph(element1, 'disabled');
      morphs[2] = dom.createElementMorph(element1);
      morphs[3] = dom.createMorphAt(element1,1,1);
      morphs[4] = dom.createMorphAt(element0,3,3);
      return morphs;
    },
    statements: [
      ["attribute","class",["concat",["button button-primary test-import-button ",["subexpr","if",[["get","isImportDisabled",["loc",[null,[2,63],[2,79]]]],"button-disabled"],[],["loc",[null,[2,58],[2,99]]]]]]],
      ["attribute","disabled",["get","isImportDisabled",["loc",[null,[2,112],[2,128]]]]],
      ["element","action",["doImport"],[],["loc",[null,[2,131],[2,152]]]],
      ["block","if",[["get","isImporting",["loc",[null,[3,10],[3,21]]]]],[],0,1,["loc",[null,[3,4],[7,11]]]],
      ["block","simple-button",[],["action","skipImport"],2,null,["loc",[null,[9,2],[15,20]]]]
    ],
    locals: [],
    templates: [child0, child1, child2]
  };
}())); });

define('forecast/templates/account/about', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 16,
            "column": 10
          },
          "end": {
            "line": 16,
            "column": 143
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("tagging each person by role or team");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }());
  var child1 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 52,
            "column": 6
          },
          "end": {
            "line": 52,
            "column": 121
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("budget remaining in hours");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }());
  var child2 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 54,
            "column": 6
          },
          "end": {
            "line": 54,
            "column": 135
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("overall project health");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }());
  var child3 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 56,
            "column": 6
          },
          "end": {
            "line": 56,
            "column": 135
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("estimates vs. actuals");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }());
  var child4 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 65,
            "column": 4
          },
          "end": {
            "line": 65,
            "column": 79
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("Contact us.");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "triple-curlies"
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 68,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createElement("div");
      dom.setAttribute(el1,"class","container about-page");
      var el2 = dom.createTextNode("\n\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createElement("h1");
      var el3 = dom.createTextNode("Introducing Harvest Forecast");
      dom.appendChild(el2, el3);
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createElement("p");
      var el3 = dom.createTextNode("Forecast is a modern resource planning tool. Our goal is to radically improve the way you organize and schedule people and projects. With Forecast, you will be able to easily see who’s working on what, plan your team’s time around availability and key milestones, and know when you need to hire or adjust your staffing.");
      dom.appendChild(el2, el3);
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createElement("p");
      var el3 = dom.createTextNode("The heart of our application revolves around two key views.");
      dom.appendChild(el2, el3);
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createElement("ul");
      dom.setAttribute(el2,"class","disc");
      var el3 = dom.createTextNode("\n    ");
      dom.appendChild(el2, el3);
      var el3 = dom.createElement("li");
      var el4 = dom.createTextNode("\n      ");
      dom.appendChild(el3, el4);
      var el4 = dom.createElement("strong");
      var el5 = dom.createTextNode("Projects view.");
      dom.appendChild(el4, el5);
      dom.appendChild(el3, el4);
      var el4 = dom.createTextNode(" This shows you all active projects across the company. You can filter this list by teams, colors, and various statuses. You can also drill down to each project to see who is assigned to it, and how much time they plan to spend. Lastly, you’ll also have a bird’s eye view of all the important project milestones so you can be sure to staff around those milestones effectively.\n    ");
      dom.appendChild(el3, el4);
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("\n    ");
      dom.appendChild(el2, el3);
      var el3 = dom.createElement("li");
      var el4 = dom.createTextNode("\n      ");
      dom.appendChild(el3, el4);
      var el4 = dom.createElement("strong");
      var el5 = dom.createTextNode("People view.");
      dom.appendChild(el4, el5);
      dom.appendChild(el3, el4);
      var el4 = dom.createTextNode(" This shows you how busy (or not busy) your team members are and what projects they are staffed on. You can filter this view by teams and availability. This is the primary view for you to resolve any conflicts or over-bookings.\n      ");
      dom.appendChild(el3, el4);
      var el4 = dom.createElement("p");
      var el5 = dom.createTextNode("\n        ");
      dom.appendChild(el4, el5);
      var el5 = dom.createElement("em");
      var el6 = dom.createTextNode("\n          Tip: To dramatically save time, we strongly recommend\n          ");
      dom.appendChild(el5, el6);
      var el6 = dom.createComment("");
      dom.appendChild(el5, el6);
      var el6 = dom.createTextNode(".\n          This allows you to easily filter your team schedule and answer questions like “Do we have any developers available in 2 weeks?”\n        ");
      dom.appendChild(el5, el6);
      dom.appendChild(el4, el5);
      var el5 = dom.createTextNode("\n      ");
      dom.appendChild(el4, el5);
      dom.appendChild(el3, el4);
      var el4 = dom.createTextNode("\n    ");
      dom.appendChild(el3, el4);
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("\n  ");
      dom.appendChild(el2, el3);
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createElement("hr");
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createElement("h1");
      var el3 = dom.createTextNode("The Forecast Way");
      dom.appendChild(el2, el3);
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createElement("p");
      var el3 = dom.createTextNode("These are the core principles driving our product development.");
      dom.appendChild(el2, el3);
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createElement("ul");
      dom.setAttribute(el2,"class","disc");
      var el3 = dom.createTextNode("\n    ");
      dom.appendChild(el2, el3);
      var el3 = dom.createElement("li");
      var el4 = dom.createTextNode("\n      ");
      dom.appendChild(el3, el4);
      var el4 = dom.createElement("strong");
      var el5 = dom.createTextNode("Be visual.");
      dom.appendChild(el4, el5);
      dom.appendChild(el3, el4);
      var el4 = dom.createTextNode(" Through visual means, convey information efficiently, logically and beautifully.\n    ");
      dom.appendChild(el3, el4);
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("\n    ");
      dom.appendChild(el2, el3);
      var el3 = dom.createElement("li");
      var el4 = dom.createTextNode("\n      ");
      dom.appendChild(el3, el4);
      var el4 = dom.createElement("strong");
      var el5 = dom.createTextNode("Allow frictionless editing and easy maintenance.");
      dom.appendChild(el4, el5);
      dom.appendChild(el3, el4);
      var el4 = dom.createTextNode(" The application is designed to be extremely intuitive. If you want to change something, simply put your mouse on it and interact with it. Edits and updates are so easy to make that the information is always up-to-date to reflect reality.\n    ");
      dom.appendChild(el3, el4);
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("\n    ");
      dom.appendChild(el2, el3);
      var el3 = dom.createElement("li");
      var el4 = dom.createTextNode("\n      ");
      dom.appendChild(el3, el4);
      var el4 = dom.createElement("strong");
      var el5 = dom.createTextNode("Be central and transparent.");
      dom.appendChild(el4, el5);
      dom.appendChild(el3, el4);
      var el4 = dom.createTextNode(" Information once locked in a spreadsheet can now be unlocked to the entire team. From project leads to the entire company, Forecast lets people know how they are expected to spend their time and what key milestones are coming up. As priorities shift (as they do in the real world), updates are reflected instantly. The transparency keeps everyone on the same page.\n    ");
      dom.appendChild(el3, el4);
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("\n  ");
      dom.appendChild(el2, el3);
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createElement("hr");
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createElement("h1");
      var el3 = dom.createTextNode("Frequently Asked Questions");
      dom.appendChild(el2, el3);
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createElement("dl");
      var el3 = dom.createTextNode("\n    ");
      dom.appendChild(el2, el3);
      var el3 = dom.createElement("dt");
      var el4 = dom.createTextNode("Is there a way to zoom out?");
      dom.appendChild(el3, el4);
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("\n    ");
      dom.appendChild(el2, el3);
      var el3 = dom.createElement("dd");
      var el4 = dom.createTextNode("We are considering a week over week view in a future version of Forecast.");
      dom.appendChild(el3, el4);
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("\n\n    ");
      dom.appendChild(el2, el3);
      var el3 = dom.createElement("dt");
      var el4 = dom.createTextNode("Can I schedule discrete tasks for my projects?");
      dom.appendChild(el3, el4);
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("\n    ");
      dom.appendChild(el2, el3);
      var el3 = dom.createElement("dd");
      var el4 = dom.createTextNode("Forecast provides a high-level estimate of work at the project level, not the task level. We do not plan to add task scheduling to Forecast. You can use the notes field to link a task to an assignment.");
      dom.appendChild(el3, el4);
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("\n\n    ");
      dom.appendChild(el2, el3);
      var el3 = dom.createElement("dt");
      var el4 = dom.createTextNode("How does Forecast integrate with Harvest?");
      dom.appendChild(el3, el4);
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("\n    ");
      dom.appendChild(el2, el3);
      var el3 = dom.createElement("dd");
      var el4 = dom.createTextNode("\n      Forecast integrates with Harvest by linking and importing your clients, projects, and team from Harvest. This allows us to share data between both apps. In Forecast we show you the\n      ");
      dom.appendChild(el3, el4);
      var el4 = dom.createComment("");
      dom.appendChild(el3, el4);
      var el4 = dom.createTextNode("\n      from Harvest, so you know how much time to schedule. In Harvest, we show you\n      ");
      dom.appendChild(el3, el4);
      var el4 = dom.createComment("");
      dom.appendChild(el3, el4);
      var el4 = dom.createTextNode("\n      and\n      ");
      dom.appendChild(el3, el4);
      var el4 = dom.createComment("");
      dom.appendChild(el3, el4);
      var el4 = dom.createTextNode("\n      on a project analysis page. If you have any questions about how our integration works, please don’t hesitate to get in touch.\n    ");
      dom.appendChild(el3, el4);
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("\n  ");
      dom.appendChild(el2, el3);
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createElement("hr");
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createElement("p");
      var el3 = dom.createTextNode("\n    Have feedback or ideas?\n    ");
      dom.appendChild(el2, el3);
      var el3 = dom.createComment("");
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("\n  ");
      dom.appendChild(el2, el3);
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n");
      dom.appendChild(el1, el2);
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var element0 = dom.childAt(fragment, [0]);
      var element1 = dom.childAt(element0, [21, 11]);
      var morphs = new Array(5);
      morphs[0] = dom.createMorphAt(dom.childAt(element0, [7, 3, 3, 1]),1,1);
      morphs[1] = dom.createMorphAt(element1,1,1);
      morphs[2] = dom.createMorphAt(element1,3,3);
      morphs[3] = dom.createMorphAt(element1,5,5);
      morphs[4] = dom.createMorphAt(dom.childAt(element0, [25]),1,1);
      return morphs;
    },
    statements: [
      ["block","external-link",[],["href","http://support.forecastapp.com/article/23-creating-and-editing-team-tags"],0,null,["loc",[null,[16,10],[16,161]]]],
      ["block","external-link",[],["href","http://support.forecastapp.com/article/62-future-scheduled-hours"],1,null,["loc",[null,[52,6],[52,139]]]],
      ["block","external-link",[],["href","https://www.getharvest.com/help/harvest-and-forecast/overview/predicting-projects"],2,null,["loc",[null,[54,6],[54,153]]]],
      ["block","external-link",[],["href","https://www.getharvest.com/help/harvest-and-forecast/overview/estimates-vs-actuals"],3,null,["loc",[null,[56,6],[56,153]]]],
      ["block","external-link",[],["href","http://support.forecastapp.com/contact"],4,null,["loc",[null,[65,4],[65,97]]]]
    ],
    locals: [],
    templates: [child0, child1, child2, child3, child4]
  };
}())); });

define('forecast/templates/account/clients_archived_page', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 6,
            "column": 4
          },
          "end": {
            "line": 9,
            "column": 4
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("      ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("i");
        dom.setAttribute(el1,"class","icon");
        dom.setAttribute(el1,"data-icon","arrow-left");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n      Back to Active Clients\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }());
  var child1 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 12,
            "column": 2
          },
          "end": {
            "line": 16,
            "column": 2
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("    ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("ol");
        dom.setAttribute(el1,"class","content-list archive-list");
        var el2 = dom.createTextNode("\n      ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
        return morphs;
      },
      statements: [
        ["inline","render",["account.clients_list",["get","content",["loc",[null,[14,38],[14,45]]]]],[],["loc",[null,[14,6],[14,47]]]]
      ],
      locals: [],
      templates: []
    };
  }());
  var child2 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 16,
            "column": 2
          },
          "end": {
            "line": 18,
            "column": 2
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("    ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","empty-content");
        var el2 = dom.createTextNode("You have no archived clients.");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "triple-curlies"
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 20,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createElement("div");
      dom.setAttribute(el1,"class","container");
      var el2 = dom.createTextNode("\n\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createElement("h1");
      var el3 = dom.createTextNode("Archived Clients");
      dom.appendChild(el2, el3);
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createElement("div");
      dom.setAttribute(el2,"class","list-controls");
      var el3 = dom.createTextNode("\n");
      dom.appendChild(el2, el3);
      var el3 = dom.createComment("");
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("  ");
      dom.appendChild(el2, el3);
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n\n");
      dom.appendChild(el1, el2);
      var el2 = dom.createComment("");
      dom.appendChild(el1, el2);
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var element0 = dom.childAt(fragment, [0]);
      var morphs = new Array(2);
      morphs[0] = dom.createMorphAt(dom.childAt(element0, [3]),1,1);
      morphs[1] = dom.createMorphAt(element0,5,5);
      return morphs;
    },
    statements: [
      ["block","link-to",["clients_page"],["tagName","button","class","button button-as-gray-link"],0,null,["loc",[null,[6,4],[9,16]]]],
      ["block","if",[["get","content.length",["loc",[null,[12,8],[12,22]]]]],[],1,2,["loc",[null,[12,2],[18,9]]]]
    ],
    locals: [],
    templates: [child0, child1, child2]
  };
}())); });

define('forecast/templates/account/clients_list', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.3.0",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 6
              },
              "end": {
                "line": 10,
                "column": 6
              }
            }
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("i");
            dom.setAttribute(el1,"class","icon connected-to-harvest");
            dom.setAttribute(el1,"data-icon","harvest");
            dom.setAttribute(el1,"title","This client is linked to Harvest");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 4
            },
            "end": {
              "line": 11,
              "column": 4
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1,"class","button button-small");
          var el2 = dom.createTextNode("\n        Restore\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createElementMorph(element0);
          morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
          morphs[2] = dom.createMorphAt(fragment,5,5,contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["element","action",["unarchiveClient",["get","client",["loc",[null,[4,69],[4,75]]]]],[],["loc",[null,[4,42],[4,77]]]],
          ["content","client.name",["loc",[null,[7,6],[7,21]]]],
          ["block","if",[["get","client.isLinkedToHarvest",["loc",[null,[8,12],[8,36]]]]],[],0,null,["loc",[null,[8,6],[10,13]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.3.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 14,
                  "column": 8
                },
                "end": {
                  "line": 18,
                  "column": 8
                }
              }
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1,"class","projects-count");
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
              return morphs;
            },
            statements: [
              ["inline","plural-ize",[["get","client.activeProjects.length",["loc",[null,[16,25],[16,53]]]],"active project"],[],["loc",[null,[16,12],[16,72]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        var child1 = (function() {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.3.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 19,
                  "column": 8
                },
                "end": {
                  "line": 21,
                  "column": 8
                }
              }
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("i");
              dom.setAttribute(el1,"class","icon connected-to-harvest");
              dom.setAttribute(el1,"data-icon","harvest");
              dom.setAttribute(el1,"title","This client is linked to Harvest");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() { return []; },
            statements: [

            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.3.0",
            "loc": {
              "source": null,
              "start": {
                "line": 12,
                "column": 6
              },
              "end": {
                "line": 22,
                "column": 6
              }
            }
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
            morphs[2] = dom.createMorphAt(fragment,4,4,contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["content","client.name",["loc",[null,[13,8],[13,23]]]],
            ["block","if",[["get","client.activeProjects.length",["loc",[null,[14,14],[14,42]]]]],[],0,null,["loc",[null,[14,8],[18,15]]]],
            ["block","if",[["get","client.isLinkedToHarvest",["loc",[null,[19,14],[19,38]]]]],[],1,null,["loc",[null,[19,8],[21,15]]]]
          ],
          locals: [],
          templates: [child0, child1]
        };
      }());
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 11,
              "column": 4
            },
            "end": {
              "line": 23,
              "column": 4
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","link-to",["clients_page.edit",["get","client",["loc",[null,[12,37],[12,43]]]]],[],0,null,["loc",[null,[12,6],[22,18]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 25,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 1,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("li");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("  ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
        return morphs;
      },
      statements: [
        ["block","if",[["get","client.archived",["loc",[null,[3,10],[3,25]]]]],[],0,1,["loc",[null,[3,4],[23,11]]]]
      ],
      locals: ["client"],
      templates: [child0, child1]
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 26,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      dom.insertBoundary(fragment, null);
      return morphs;
    },
    statements: [
      ["block","each",[["get","sortedClients",["loc",[null,[1,8],[1,21]]]]],["key","id"],0,null,["loc",[null,[1,0],[25,9]]]]
    ],
    locals: [],
    templates: [child0]
  };
}())); });

define('forecast/templates/account/close', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.3.0",
            "loc": {
              "source": null,
              "start": {
                "line": 26,
                "column": 10
              },
              "end": {
                "line": 30,
                "column": 10
              }
            }
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            return morphs;
          },
          statements: [
            ["inline","textarea",[],["placeholder",["subexpr","@mut",[["get","option.prompt",["loc",[null,[27,35],[27,48]]]]],[],[]],"rows","2","value",["subexpr","@mut",[["get","option.explanation",["loc",[null,[29,29],[29,47]]]]],[],[]]],["loc",[null,[27,12],[29,49]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 25,
              "column": 8
            },
            "end": {
              "line": 31,
              "column": 8
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","if",[["get","option.selected",["loc",[null,[26,16],[26,31]]]]],[],0,null,["loc",[null,[26,10],[30,17]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 17,
            "column": 4
          },
          "end": {
            "line": 33,
            "column": 4
          }
        }
      },
      isEmpty: false,
      arity: 1,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("      ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","field");
        var el2 = dom.createTextNode("\n        ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("label");
        dom.setAttribute(el2,"class","radio-label");
        var el3 = dom.createTextNode("\n          ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n          ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("      ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [1]);
        var element1 = dom.childAt(element0, [1]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(element1,1,1);
        morphs[1] = dom.createMorphAt(element1,3,3);
        morphs[2] = dom.createMorphAt(element0,3,3);
        return morphs;
      },
      statements: [
        ["inline","radio-button",[],["name","reason","selection",["subexpr","@mut",[["get","reason",["loc",[null,[21,35],[21,41]]]]],[],[]],"value",["subexpr","@mut",[["get","option",["loc",[null,[22,31],[22,37]]]]],[],[]]],["loc",[null,[20,10],[22,39]]]],
        ["content","option.description",["loc",[null,[23,10],[23,32]]]],
        ["block","if",[["get","option.prompt",["loc",[null,[25,14],[25,27]]]]],[],0,null,["loc",[null,[25,8],[31,15]]]]
      ],
      locals: ["option"],
      templates: [child0]
    };
  }());
  var child1 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 47,
            "column": 4
          },
          "end": {
            "line": 51,
            "column": 4
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("      Permanently Close This Account\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }());
  var child2 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 53,
            "column": 4
          },
          "end": {
            "line": 55,
            "column": 4
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("      Cancel\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }());
  var child3 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 57,
            "column": 4
          },
          "end": {
            "line": 62,
            "column": 4
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("      ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","block-loader");
        var el2 = dom.createTextNode("\n        ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("i");
        dom.setAttribute(el2,"class","icon");
        dom.setAttribute(el2,"data-icon","loader");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n        Closing your account. This may take a few moments…\n      ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "triple-curlies"
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 65,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createElement("div");
      dom.setAttribute(el1,"class","container close-account");
      var el2 = dom.createTextNode("\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createElement("h1");
      var el3 = dom.createTextNode("Close Account");
      dom.appendChild(el2, el3);
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createElement("p");
      var el3 = dom.createTextNode("\n    We’re sorry to see you go! Before you proceed and close your account,\n    please be aware that ");
      dom.appendChild(el2, el3);
      var el3 = dom.createElement("strong");
      dom.setAttribute(el3,"class","close-account-emphasis");
      var el4 = dom.createTextNode("all of your\n    account information will be permanently deleted");
      dom.appendChild(el3, el4);
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode(". There is no undo\n    for this action.\n  ");
      dom.appendChild(el2, el3);
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createElement("p");
      var el3 = dom.createTextNode("\n    Would you mind letting us know why you are closing this account? We’d love\n    to learn how we could have better served your needs.\n  ");
      dom.appendChild(el2, el3);
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createElement("form");
      dom.setAttribute(el2,"class","close-account-form");
      var el3 = dom.createTextNode("\n");
      dom.appendChild(el2, el3);
      var el3 = dom.createComment("");
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("\n    ");
      dom.appendChild(el2, el3);
      var el3 = dom.createElement("div");
      dom.setAttribute(el3,"class","field close-account-last-thoughts");
      var el4 = dom.createTextNode("\n      ");
      dom.appendChild(el3, el4);
      var el4 = dom.createElement("label");
      var el5 = dom.createTextNode("\n        Are you using anything in place of Forecast? Any additional feedback\n        you want to leave with us?\n      ");
      dom.appendChild(el4, el5);
      dom.appendChild(el3, el4);
      var el4 = dom.createTextNode("\n      ");
      dom.appendChild(el3, el4);
      var el4 = dom.createComment("");
      dom.appendChild(el3, el4);
      var el4 = dom.createTextNode("\n    ");
      dom.appendChild(el3, el4);
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("\n\n    ");
      dom.appendChild(el2, el3);
      var el3 = dom.createElement("p");
      var el4 = dom.createTextNode("Thank you for your time!");
      dom.appendChild(el3, el4);
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("\n\n");
      dom.appendChild(el2, el3);
      var el3 = dom.createComment("");
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("\n");
      dom.appendChild(el2, el3);
      var el3 = dom.createComment("");
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("\n");
      dom.appendChild(el2, el3);
      var el3 = dom.createComment("");
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("  ");
      dom.appendChild(el2, el3);
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n");
      dom.appendChild(el1, el2);
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var element2 = dom.childAt(fragment, [0, 7]);
      var morphs = new Array(5);
      morphs[0] = dom.createMorphAt(element2,1,1);
      morphs[1] = dom.createMorphAt(dom.childAt(element2, [3]),3,3);
      morphs[2] = dom.createMorphAt(element2,7,7);
      morphs[3] = dom.createMorphAt(element2,9,9);
      morphs[4] = dom.createMorphAt(element2,11,11);
      return morphs;
    },
    statements: [
      ["block","each",[["get","model.options",["loc",[null,[17,12],[17,25]]]]],["key","value"],0,null,["loc",[null,[17,4],[33,13]]]],
      ["inline","textarea",[],["placeholder",["subexpr","@mut",[["get","option.prompt",["loc",[null,[40,29],[40,42]]]]],[],[]],"rows","3","value",["subexpr","@mut",[["get","feedback",["loc",[null,[42,23],[42,31]]]]],[],[]]],["loc",[null,[40,6],[42,33]]]],
      ["block","simple-button",[],["class","button-primary-red test-close-account","action","closeAccount","disabled",["subexpr","@mut",[["get","isCancelingAccount",["loc",[null,[49,30],[49,48]]]]],[],[]]],1,null,["loc",[null,[47,4],[51,22]]]],
      ["block","simple-button",[],["action","cancel","disabled",["subexpr","@mut",[["get","isCancelingAccount",["loc",[null,[53,46],[53,64]]]]],[],[]]],2,null,["loc",[null,[53,4],[55,22]]]],
      ["block","if",[["get","isCancelingAccount",["loc",[null,[57,10],[57,28]]]]],[],3,null,["loc",[null,[57,4],[62,11]]]]
    ],
    locals: [],
    templates: [child0, child1, child2, child3]
  };
}())); });

define('forecast/templates/account/grouped_projects_list', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 4
            },
            "end": {
              "line": 6,
              "column": 4
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","icon connected-to-harvest");
          dom.setAttribute(el1,"data-icon","harvest");
          dom.setAttribute(el1,"title","This client is linked to Harvest");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.3.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 17,
                  "column": 8
                },
                "end": {
                  "line": 19,
                  "column": 8
                }
              }
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("i");
              dom.setAttribute(el1,"class","icon connected-to-harvest");
              dom.setAttribute(el1,"data-icon","harvest");
              dom.setAttribute(el1,"title","This project is linked to Harvest");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() { return []; },
            statements: [

            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.3.0",
            "loc": {
              "source": null,
              "start": {
                "line": 10,
                "column": 6
              },
              "end": {
                "line": 20,
                "column": 6
              }
            }
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1,"class","button button-small");
            var el2 = dom.createTextNode("\n          Restore\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","test-name");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(3);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]),1,1);
            morphs[2] = dom.createMorphAt(fragment,5,5,contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["element","action",["unarchiveProject",["get","project",["loc",[null,[11,72],[11,79]]]]],[],["loc",[null,[11,44],[11,81]]]],
            ["content","project.nameWithCode",["loc",[null,[15,10],[15,34]]]],
            ["block","if",[["get","project.isLinkedToHarvest",["loc",[null,[17,14],[17,39]]]]],[],0,null,["loc",[null,[17,8],[19,15]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      var child1 = (function() {
        var child0 = (function() {
          var child0 = (function() {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.3.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 27,
                    "column": 10
                  },
                  "end": {
                    "line": 29,
                    "column": 10
                  }
                }
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("span");
                dom.setAttribute(el1,"class","notes");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
                return morphs;
              },
              statements: [
                ["content","project.notes",["loc",[null,[28,32],[28,49]]]]
              ],
              locals: [],
              templates: []
            };
          }());
          var child1 = (function() {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.3.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 30,
                    "column": 10
                  },
                  "end": {
                    "line": 32,
                    "column": 10
                  }
                }
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("i");
                dom.setAttribute(el1,"class","icon connected-to-harvest");
                dom.setAttribute(el1,"data-icon","harvest");
                dom.setAttribute(el1,"title","This project is linked to Harvest");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() { return []; },
              statements: [

              ],
              locals: [],
              templates: []
            };
          }());
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.3.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 21,
                  "column": 8
                },
                "end": {
                  "line": 33,
                  "column": 8
                }
              }
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1,"class","test-name");
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(4);
              morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
              morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]),1,1);
              morphs[2] = dom.createMorphAt(fragment,5,5,contextualElement);
              morphs[3] = dom.createMorphAt(fragment,6,6,contextualElement);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [
              ["inline","color-block",[],["color",["subexpr","@mut",[["get","project.color",["loc",[null,[22,30],[22,43]]]]],[],[]],"labels",["subexpr","@mut",[["get","colorLabels",["loc",[null,[23,31],[23,42]]]]],[],[]]],["loc",[null,[22,10],[23,44]]]],
              ["content","project.nameWithCode",["loc",[null,[25,12],[25,36]]]],
              ["block","if",[["get","project.notes",["loc",[null,[27,16],[27,29]]]]],[],0,null,["loc",[null,[27,10],[29,17]]]],
              ["block","if",[["get","project.isLinkedToHarvest",["loc",[null,[30,16],[30,41]]]]],[],1,null,["loc",[null,[30,10],[32,17]]]]
            ],
            locals: [],
            templates: [child0, child1]
          };
        }());
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.3.0",
            "loc": {
              "source": null,
              "start": {
                "line": 20,
                "column": 6
              },
              "end": {
                "line": 34,
                "column": 6
              }
            }
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","link-to",["projects_page.edit",["get","project",["loc",[null,[21,40],[21,47]]]]],[],0,null,["loc",[null,[21,8],[33,20]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 2
            },
            "end": {
              "line": 36,
              "column": 2
            }
          }
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
          return morphs;
        },
        statements: [
          ["block","if",[["get","project.archived",["loc",[null,[10,12],[10,28]]]]],[],0,1,["loc",[null,[10,6],[34,13]]]]
        ],
        locals: ["project"],
        templates: [child0, child1]
      };
    }());
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": [
            "multiple-nodes",
            "wrong-type"
          ]
        },
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 37,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 1,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("li");
        dom.setAttribute(el1,"class","header");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("  ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [1]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(element1,1,1);
        morphs[1] = dom.createMorphAt(element1,3,3);
        morphs[2] = dom.createMorphAt(fragment,3,3,contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["content","group.client.name",["loc",[null,[3,4],[3,25]]]],
        ["block","if",[["get","group.client.isLinkedToHarvest",["loc",[null,[4,10],[4,40]]]]],[],0,null,["loc",[null,[4,4],[6,11]]]],
        ["block","each",[["get","group.projects",["loc",[null,[8,10],[8,24]]]]],["key","id"],1,null,["loc",[null,[8,2],[36,11]]]]
      ],
      locals: ["group"],
      templates: [child0, child1]
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 38,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      dom.insertBoundary(fragment, null);
      return morphs;
    },
    statements: [
      ["block","each",[["get","sortedProjectsByClient",["loc",[null,[1,8],[1,30]]]]],["key","client.id"],0,null,["loc",[null,[1,0],[37,9]]]]
    ],
    locals: [],
    templates: [child0]
  };
}())); });

define('forecast/templates/account/harvest_projects', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 1,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("li");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("label");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [1, 1]);
        var morphs = new Array(3);
        morphs[0] = dom.createAttrMorph(element0, 'class');
        morphs[1] = dom.createMorphAt(element0,1,1);
        morphs[2] = dom.createMorphAt(element0,3,3);
        return morphs;
      },
      statements: [
        ["attribute","class",["concat",["checkbox-label ",["subexpr","if",[["get","project.previouslyImported",["loc",[null,[3,38],[3,64]]]],"label-disabled"],[],["loc",[null,[3,33],[3,83]]]]]]],
        ["inline","input",[],["type","checkbox","checked",["subexpr","@mut",[["get","project.imported",["loc",[null,[5,22],[5,38]]]]],[],[]],"disabled",["subexpr","@mut",[["get","project.previouslyImported",["loc",[null,[6,23],[6,49]]]]],[],[]]],["loc",[null,[4,6],[6,51]]]],
        ["content","project.nameWithCode",["loc",[null,[7,6],[7,30]]]]
      ],
      locals: ["project"],
      templates: []
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 12,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      return morphs;
    },
    statements: [
      ["block","each",[["get","sortedVisibleProjects",["loc",[null,[1,8],[1,29]]]]],["key","id"],0,null,["loc",[null,[1,0],[10,9]]]]
    ],
    locals: [],
    templates: [child0]
  };
}())); });

define('forecast/templates/account/people_list', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.3.0",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 6
              },
              "end": {
                "line": 10,
                "column": 6
              }
            }
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("i");
            dom.setAttribute(el1,"class","icon connected-to-harvest");
            dom.setAttribute(el1,"data-icon","harvest");
            dom.setAttribute(el1,"title","This person is linked to Harvest");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 4
            },
            "end": {
              "line": 11,
              "column": 4
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1,"class","button button-small");
          var el2 = dom.createTextNode("\n        Restore\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createElementMorph(element1);
          morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
          morphs[2] = dom.createMorphAt(fragment,5,5,contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["element","action",["unarchivePerson",["get","person.model",["loc",[null,[4,69],[4,81]]]]],[],["loc",[null,[4,42],[4,83]]]],
          ["content","person.model.name",["loc",[null,[7,6],[7,27]]]],
          ["block","if",[["get","person.model.isLinkedToHarvest",["loc",[null,[8,12],[8,42]]]]],[],0,null,["loc",[null,[8,6],[10,13]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.3.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 17,
                  "column": 8
                },
                "end": {
                  "line": 19,
                  "column": 8
                }
              }
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1,"class","teams");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
              return morphs;
            },
            statements: [
              ["inline","sorted-list",[["get","person.model.teams",["loc",[null,[18,44],[18,62]]]]],[],["loc",[null,[18,30],[18,64]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        var child1 = (function() {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.3.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 20,
                  "column": 8
                },
                "end": {
                  "line": 22,
                  "column": 8
                }
              }
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1,"class","is-online");
              var el2 = dom.createTextNode("Online Now");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() { return []; },
            statements: [

            ],
            locals: [],
            templates: []
          };
        }());
        var child2 = (function() {
          var child0 = (function() {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.3.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 22,
                    "column": 8
                  },
                  "end": {
                    "line": 26,
                    "column": 8
                  }
                }
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("span");
                dom.setAttribute(el1,"class","last-seen-online");
                var el2 = dom.createTextNode("\n            ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode(" ago\n          ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n        ");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
                return morphs;
              },
              statements: [
                ["inline","time-ago",[["get","person.lastSeenOnline",["loc",[null,[24,23],[24,44]]]]],[],["loc",[null,[24,12],[24,46]]]]
              ],
              locals: [],
              templates: []
            };
          }());
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.3.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 22,
                  "column": 8
                },
                "end": {
                  "line": 26,
                  "column": 8
                }
              }
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [
              ["block","if",[["get","person.lastSeenOnline",["loc",[null,[22,18],[22,39]]]]],[],0,null,["loc",[null,[22,8],[26,8]]]]
            ],
            locals: [],
            templates: [child0]
          };
        }());
        var child3 = (function() {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.3.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 27,
                  "column": 8
                },
                "end": {
                  "line": 29,
                  "column": 8
                }
              }
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("i");
              dom.setAttribute(el1,"class","icon connected-to-harvest");
              dom.setAttribute(el1,"data-icon","harvest");
              dom.setAttribute(el1,"title","This person is linked to Harvest");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() { return []; },
            statements: [

            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.3.0",
            "loc": {
              "source": null,
              "start": {
                "line": 12,
                "column": 6
              },
              "end": {
                "line": 30,
                "column": 6
              }
            }
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("img");
            dom.setAttribute(el1,"class","photo");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","test-name");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(6);
            morphs[0] = dom.createAttrMorph(element0, 'src');
            morphs[1] = dom.createAttrMorph(element0, 'alt');
            morphs[2] = dom.createMorphAt(dom.childAt(fragment, [3]),0,0);
            morphs[3] = dom.createMorphAt(fragment,5,5,contextualElement);
            morphs[4] = dom.createMorphAt(fragment,6,6,contextualElement);
            morphs[5] = dom.createMorphAt(fragment,7,7,contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["attribute","src",["get","person.model.avatar_url",["loc",[null,[14,19],[14,42]]]]],
            ["attribute","alt",["get","person.model.name",["loc",[null,[15,19],[15,36]]]]],
            ["content","person.model.name",["loc",[null,[16,32],[16,53]]]],
            ["block","if",[["get","person.model.teams",["loc",[null,[17,14],[17,32]]]]],[],0,null,["loc",[null,[17,8],[19,15]]]],
            ["block","if",[["get","person.isOnline",["loc",[null,[20,14],[20,29]]]]],[],1,2,["loc",[null,[20,8],[26,15]]]],
            ["block","if",[["get","person.model.isLinkedToHarvest",["loc",[null,[27,14],[27,44]]]]],[],3,null,["loc",[null,[27,8],[29,15]]]]
          ],
          locals: [],
          templates: [child0, child1, child2, child3]
        };
      }());
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 11,
              "column": 4
            },
            "end": {
              "line": 31,
              "column": 4
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","link-to",["team_page.edit",["get","person.model",["loc",[null,[12,34],[12,46]]]]],[],0,null,["loc",[null,[12,6],[30,18]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 33,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 1,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("li");
        dom.setAttribute(el1,"class","hide-from-fullstory");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("  ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
        return morphs;
      },
      statements: [
        ["block","if",[["get","person.model.archived",["loc",[null,[3,10],[3,31]]]]],[],0,1,["loc",[null,[3,4],[31,11]]]]
      ],
      locals: ["person"],
      templates: [child0, child1]
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 34,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      dom.insertBoundary(fragment, null);
      return morphs;
    },
    statements: [
      ["block","each",[["get","sortedWrappedPeople",["loc",[null,[1,8],[1,27]]]]],["key","id"],0,null,["loc",[null,[1,0],[33,9]]]]
    ],
    locals: [],
    templates: [child0]
  };
}())); });

define('forecast/templates/account/projects_archived_page', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 6,
            "column": 4
          },
          "end": {
            "line": 9,
            "column": 4
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("      ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("i");
        dom.setAttribute(el1,"class","icon");
        dom.setAttribute(el1,"data-icon","arrow-left");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n      Back to Active Projects\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }());
  var child1 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 12,
            "column": 2
          },
          "end": {
            "line": 16,
            "column": 2
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("    ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("ol");
        dom.setAttribute(el1,"class","content-list project-list archive-list");
        var el2 = dom.createTextNode("\n      ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
        return morphs;
      },
      statements: [
        ["inline","render",["account.grouped_projects_list",["get","content",["loc",[null,[14,47],[14,54]]]]],[],["loc",[null,[14,6],[14,56]]]]
      ],
      locals: [],
      templates: []
    };
  }());
  var child2 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 16,
            "column": 2
          },
          "end": {
            "line": 18,
            "column": 2
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("    ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","empty-content");
        var el2 = dom.createTextNode("You have no archived projects.");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "triple-curlies"
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 21,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createElement("div");
      dom.setAttribute(el1,"class","container");
      var el2 = dom.createTextNode("\n\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createElement("h1");
      var el3 = dom.createTextNode("Archived Projects");
      dom.appendChild(el2, el3);
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createElement("div");
      dom.setAttribute(el2,"class","list-controls");
      var el3 = dom.createTextNode("\n");
      dom.appendChild(el2, el3);
      var el3 = dom.createComment("");
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("  ");
      dom.appendChild(el2, el3);
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n\n");
      dom.appendChild(el1, el2);
      var el2 = dom.createComment("");
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n");
      dom.appendChild(el1, el2);
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var element0 = dom.childAt(fragment, [0]);
      var morphs = new Array(2);
      morphs[0] = dom.createMorphAt(dom.childAt(element0, [3]),1,1);
      morphs[1] = dom.createMorphAt(element0,5,5);
      return morphs;
    },
    statements: [
      ["block","link-to",["projects_page"],["tagName","button","class","button button-as-gray-link"],0,null,["loc",[null,[6,4],[9,16]]]],
      ["block","if",[["get","content.length",["loc",[null,[12,8],[12,22]]]]],[],1,2,["loc",[null,[12,2],[18,9]]]]
    ],
    locals: [],
    templates: [child0, child1, child2]
  };
}())); });

define('forecast/templates/account/projects_import_page', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 6
            },
            "end": {
              "line": 8,
              "column": 141
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("see project health and estimates vs. actuals");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 30,
              "column": 8
            },
            "end": {
              "line": 40,
              "column": 8
            }
          }
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          dom.setAttribute(el1,"class","header");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          var el3 = dom.createTextNode("\n              ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n              ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1, 1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createMorphAt(element0,1,1);
          morphs[2] = dom.createMorphAt(element0,3,3);
          morphs[3] = dom.createMorphAt(fragment,3,3,contextualElement);
          return morphs;
        },
        statements: [
          ["attribute","class",["concat",["checkbox-label ",["subexpr","if",[["get","client.previouslyImported",["loc",[null,[32,46],[32,71]]]],"label-disabled"],[],["loc",[null,[32,41],[32,90]]]]]]],
          ["inline","input",[],["type","checkbox","checked",["subexpr","@mut",[["get","client.imported",["loc",[null,[34,30],[34,45]]]]],[],[]],"disabled",["subexpr","@mut",[["get","client.previouslyImported",["loc",[null,[35,31],[35,56]]]]],[],[]]],["loc",[null,[33,14],[35,58]]]],
          ["content","client.name",["loc",[null,[36,14],[36,29]]]],
          ["inline","render",["account.harvest_projects",["get","client.harvest_projects",["loc",[null,[39,46],[39,69]]]]],[],["loc",[null,[39,10],[39,71]]]]
        ],
        locals: ["client"],
        templates: []
      };
    }());
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 2,
            "column": 2
          },
          "end": {
            "line": 46,
            "column": 2
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("\n    ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h1");
        var el2 = dom.createTextNode("Import your Clients and Projects from Harvest");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n    ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("p");
        var el2 = dom.createTextNode("\n      Import and link your existing clients and projects and start staffing them immediately.\n      You’ll then be able to\n      ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n      in Harvest for your linked projects.\n    ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n    ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("p");
        var el2 = dom.createTextNode("\n      For the best experience, we ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("strong");
        var el3 = dom.createTextNode("strongly recommend");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" only importing projects\n      you are actively staffing. You can always import more projects as needed later.\n    ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n    ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1,"class","import-form");
        var el2 = dom.createTextNode("\n      ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n      ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","import-controls");
        var el3 = dom.createTextNode("\n        Select: ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("a");
        dom.setAttribute(el3,"class","test-check-all");
        var el4 = dom.createTextNode("All");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode(" / ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("a");
        dom.setAttribute(el3,"class","test-uncheck-all");
        var el4 = dom.createTextNode("None");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        dom.setAttribute(el3,"class","checkbox-label");
        var el4 = dom.createTextNode("\n          ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n          Hide linked projects\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n      ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ol");
        dom.setAttribute(el2,"class","import-list project-list");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("      ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n      ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [7]);
        var element2 = dom.childAt(element1, [3]);
        var element3 = dom.childAt(element2, [1]);
        var element4 = dom.childAt(element2, [3]);
        var morphs = new Array(7);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [3]),1,1);
        morphs[1] = dom.createMorphAt(element1,1,1);
        morphs[2] = dom.createElementMorph(element3);
        morphs[3] = dom.createElementMorph(element4);
        morphs[4] = dom.createMorphAt(dom.childAt(element2, [5]),1,1);
        morphs[5] = dom.createMorphAt(dom.childAt(element1, [5]),1,1);
        morphs[6] = dom.createMorphAt(element1,7,7);
        return morphs;
      },
      statements: [
        ["block","external-link",[],["href","http://getharvest.com/harvest-and-forecast?utm_source=forecastapp"],0,null,["loc",[null,[8,6],[8,159]]]],
        ["inline","partial",["account/harvest_import_buttons"],[],["loc",[null,[17,6],[17,50]]]],
        ["element","action",["checkAll"],[],["loc",[null,[20,42],[20,63]]]],
        ["element","action",["uncheckAll"],[],["loc",[null,[20,102],[20,125]]]],
        ["inline","input",[],["type","checkbox","class","test-hide-linked","checked",["subexpr","@mut",[["get","hideLinked",["loc",[null,[24,26],[24,36]]]]],[],[]]],["loc",[null,[22,10],[24,38]]]],
        ["block","each",[["get","sortedVisibleClients",["loc",[null,[30,16],[30,36]]]]],["key","id"],1,null,["loc",[null,[30,8],[40,17]]]],
        ["inline","partial",["account/harvest_import_buttons"],[],["loc",[null,[43,6],[43,50]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }());
  var child1 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 49,
              "column": 4
            },
            "end": {
              "line": 51,
              "column": 4
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      Connect to Harvest\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 46,
            "column": 2
          },
          "end": {
            "line": 53,
            "column": 2
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("\n    ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h1");
        var el2 = dom.createTextNode("You are not connected to Harvest.");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,3,3,contextualElement);
        return morphs;
      },
      statements: [
        ["block","link-to",["settings.harvest_connect"],["tagName","button","class","button button-primary"],0,null,["loc",[null,[49,4],[51,16]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "triple-curlies"
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 56,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createElement("div");
      dom.setAttribute(el1,"id","projects-list");
      dom.setAttribute(el1,"class","container");
      var el2 = dom.createTextNode("\n");
      dom.appendChild(el1, el2);
      var el2 = dom.createComment("");
      dom.appendChild(el1, el2);
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n\n");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);
      return morphs;
    },
    statements: [
      ["block","if",[["get","isConnectedToHarvest",["loc",[null,[2,8],[2,28]]]]],[],0,1,["loc",[null,[2,2],[53,9]]]]
    ],
    locals: [],
    templates: [child0, child1]
  };
}())); });

define('forecast/templates/account/team_archived_page', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 6,
            "column": 4
          },
          "end": {
            "line": 9,
            "column": 4
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("      ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("i");
        dom.setAttribute(el1,"class","icon");
        dom.setAttribute(el1,"data-icon","arrow-left");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n      Back to Active People\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }());
  var child1 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 12,
            "column": 2
          },
          "end": {
            "line": 16,
            "column": 2
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("    ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("ol");
        dom.setAttribute(el1,"class","content-list archive-list");
        var el2 = dom.createTextNode("\n      ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
        return morphs;
      },
      statements: [
        ["inline","render",["account.people_list",["get","content",["loc",[null,[14,37],[14,44]]]]],[],["loc",[null,[14,6],[14,46]]]]
      ],
      locals: [],
      templates: []
    };
  }());
  var child2 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 16,
            "column": 2
          },
          "end": {
            "line": 18,
            "column": 2
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("    ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","empty-content");
        var el2 = dom.createTextNode("You have no archived people.");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "triple-curlies"
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 21,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createElement("div");
      dom.setAttribute(el1,"class","container");
      var el2 = dom.createTextNode("\n\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createElement("h1");
      var el3 = dom.createTextNode("Archived People");
      dom.appendChild(el2, el3);
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createElement("div");
      dom.setAttribute(el2,"class","list-controls");
      var el3 = dom.createTextNode("\n");
      dom.appendChild(el2, el3);
      var el3 = dom.createComment("");
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("  ");
      dom.appendChild(el2, el3);
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n\n");
      dom.appendChild(el1, el2);
      var el2 = dom.createComment("");
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n");
      dom.appendChild(el1, el2);
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var element0 = dom.childAt(fragment, [0]);
      var morphs = new Array(2);
      morphs[0] = dom.createMorphAt(dom.childAt(element0, [3]),1,1);
      morphs[1] = dom.createMorphAt(element0,5,5);
      return morphs;
    },
    statements: [
      ["block","link-to",["team_page"],["tagName","button","class","button button-as-gray-link"],0,null,["loc",[null,[6,4],[9,16]]]],
      ["block","if",[["get","content.length",["loc",[null,[12,8],[12,22]]]]],[],1,2,["loc",[null,[12,2],[18,9]]]]
    ],
    locals: [],
    templates: [child0, child1, child2]
  };
}())); });

define('forecast/templates/account/team_import_page', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 27,
              "column": 8
            },
            "end": {
              "line": 36,
              "column": 8
            }
          }
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          var el3 = dom.createTextNode("\n              ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n              ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1, 1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createMorphAt(element0,1,1);
          morphs[2] = dom.createMorphAt(element0,3,3);
          return morphs;
        },
        statements: [
          ["attribute","class",["concat",["hide-from-fullstory checkbox-label ",["subexpr","if",[["get","person.previouslyImported",["loc",[null,[29,66],[29,91]]]],"label-disabled"],[],["loc",[null,[29,61],[29,110]]]]]]],
          ["inline","input",[],["type","checkbox","checked",["subexpr","@mut",[["get","person.imported",["loc",[null,[31,30],[31,45]]]]],[],[]],"disabled",["subexpr","@mut",[["get","person.previouslyImported",["loc",[null,[32,31],[32,56]]]]],[],[]]],["loc",[null,[30,14],[32,58]]]],
          ["content","person.name",["loc",[null,[33,14],[33,29]]]]
        ],
        locals: ["person"],
        templates: []
      };
    }());
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 2,
            "column": 2
          },
          "end": {
            "line": 41,
            "column": 2
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("\n    ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h1");
        var el2 = dom.createTextNode("Import your Team from Harvest");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n    ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("p");
        var el2 = dom.createTextNode("\n      Import your team from Harvest and start planning their time across projects.\n      Note that importing ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("strong");
        var el3 = dom.createTextNode("does not");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" provide people with access to your Forecast account.\n      You can choose who to invite later from the Schedule or Team page.\n    ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n    ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("p");
        var el2 = dom.createTextNode("\n      For the best experience, we ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("strong");
        var el3 = dom.createTextNode("strongly recommend");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" only importing people you\n      are actively staffing. You can always import more people as needed later.\n    ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n    ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1,"class","import-form");
        var el2 = dom.createTextNode("\n      ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n      ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","import-controls");
        var el3 = dom.createTextNode("\n        Select: ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("a");
        dom.setAttribute(el3,"class","test-check-all");
        var el4 = dom.createTextNode("All");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode(" /\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("a");
        dom.setAttribute(el3,"class","test-uncheck-all");
        var el4 = dom.createTextNode("None");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        dom.setAttribute(el3,"class","checkbox-label");
        var el4 = dom.createTextNode("\n          ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(" Hide linked people\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n      ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ol");
        dom.setAttribute(el2,"class","import-list people-list");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("      ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n      ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [7]);
        var element2 = dom.childAt(element1, [3]);
        var element3 = dom.childAt(element2, [1]);
        var element4 = dom.childAt(element2, [3]);
        var morphs = new Array(6);
        morphs[0] = dom.createMorphAt(element1,1,1);
        morphs[1] = dom.createElementMorph(element3);
        morphs[2] = dom.createElementMorph(element4);
        morphs[3] = dom.createMorphAt(dom.childAt(element2, [5]),1,1);
        morphs[4] = dom.createMorphAt(dom.childAt(element1, [5]),1,1);
        morphs[5] = dom.createMorphAt(element1,7,7);
        return morphs;
      },
      statements: [
        ["inline","partial",["account/harvest_import_buttons"],[],["loc",[null,[16,6],[16,50]]]],
        ["element","action",["checkAll"],[],["loc",[null,[19,42],[19,63]]]],
        ["element","action",["uncheckAll"],[],["loc",[null,[20,36],[20,59]]]],
        ["inline","input",[],["type","checkbox","checked",["subexpr","@mut",[["get","hideLinked",["loc",[null,[22,42],[22,52]]]]],[],[]],"class","test-hide-linked"],["loc",[null,[22,10],[22,79]]]],
        ["block","each",[["get","sortedVisiblePeople",["loc",[null,[27,16],[27,35]]]]],["key","id"],0,null,["loc",[null,[27,8],[36,17]]]],
        ["inline","partial",["account/harvest_import_buttons"],[],["loc",[null,[39,6],[39,50]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }());
  var child1 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 44,
              "column": 4
            },
            "end": {
              "line": 46,
              "column": 4
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      Go to settings\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 41,
            "column": 2
          },
          "end": {
            "line": 48,
            "column": 2
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("\n    ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h1");
        var el2 = dom.createTextNode("You are not connected to Harvest");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,3,3,contextualElement);
        return morphs;
      },
      statements: [
        ["block","link-to",["settings.harvest_connect"],["tagName","button","class","button"],0,null,["loc",[null,[44,4],[46,16]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "triple-curlies"
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 51,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createElement("div");
      dom.setAttribute(el1,"id","people-list");
      dom.setAttribute(el1,"class","container");
      var el2 = dom.createTextNode("\n");
      dom.appendChild(el1, el2);
      var el2 = dom.createComment("");
      dom.appendChild(el1, el2);
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n\n");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);
      return morphs;
    },
    statements: [
      ["block","if",[["get","isConnectedToHarvest",["loc",[null,[2,8],[2,28]]]]],[],0,1,["loc",[null,[2,2],[48,9]]]]
    ],
    locals: [],
    templates: [child0, child1]
  };
}())); });

define('forecast/templates/account/upgrade', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 22,
            "column": 12
          },
          "end": {
            "line": 24,
            "column": 12
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("              ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("span");
        dom.setAttribute(el1,"class","total-people-input-span");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
        return morphs;
      },
      statements: [
        ["content","totalPeople",["loc",[null,[23,52],[23,67]]]]
      ],
      locals: [],
      templates: []
    };
  }());
  var child1 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 25,
              "column": 14
            },
            "end": {
              "line": 29,
              "column": 14
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","input",[],["class","input-big","required","required","value",["subexpr","@mut",[["get","totalPeople",["loc",[null,[28,30],[28,41]]]]],[],[]]],["loc",[null,[26,16],[28,43]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 24,
            "column": 12
          },
          "end": {
            "line": 30,
            "column": 12
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","form-field",[],["label","","for","totalPeople","of",["subexpr","@mut",[["get","this",["loc",[null,[25,58],[25,62]]]]],[],[]]],0,null,["loc",[null,[25,14],[29,29]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }());
  var child2 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 33,
            "column": 12
          },
          "end": {
            "line": 35,
            "column": 12
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("              ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("span");
        dom.setAttribute(el1,"class","discount-original");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
        return morphs;
      },
      statements: [
        ["inline","cents-to-dollars",[["get","baseAmountPerPerson",["loc",[null,[34,65],[34,84]]]]],[],["loc",[null,[34,46],[34,86]]]]
      ],
      locals: [],
      templates: []
    };
  }());
  var child3 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 42,
            "column": 6
          },
          "end": {
            "line": 44,
            "column": 6
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("        ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","form-helper discount-helper");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
        return morphs;
      },
      statements: [
        ["content","discountMessage",["loc",[null,[43,49],[43,68]]]]
      ],
      locals: [],
      templates: []
    };
  }());
  var child4 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 52,
            "column": 8
          },
          "end": {
            "line": 57,
            "column": 8
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("          ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
        return morphs;
      },
      statements: [
        ["inline","input",[],["class","input-big","required","required","autofocus","autofocus","value",["subexpr","@mut",[["get","address.line_1",["loc",[null,[56,24],[56,38]]]]],[],[]]],["loc",[null,[53,10],[56,40]]]]
      ],
      locals: [],
      templates: []
    };
  }());
  var child5 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 58,
            "column": 8
          },
          "end": {
            "line": 61,
            "column": 8
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("          ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
        return morphs;
      },
      statements: [
        ["inline","input",[],["class","input-big","value",["subexpr","@mut",[["get","address.line_2",["loc",[null,[60,24],[60,38]]]]],[],[]]],["loc",[null,[59,10],[60,40]]]]
      ],
      locals: [],
      templates: []
    };
  }());
  var child6 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 63,
            "column": 10
          },
          "end": {
            "line": 67,
            "column": 10
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("            ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
        return morphs;
      },
      statements: [
        ["inline","input",[],["class","input-big","required","required","value",["subexpr","@mut",[["get","address.city",["loc",[null,[66,26],[66,38]]]]],[],[]]],["loc",[null,[64,12],[66,40]]]]
      ],
      locals: [],
      templates: []
    };
  }());
  var child7 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 68,
            "column": 10
          },
          "end": {
            "line": 72,
            "column": 10
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("            ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
        return morphs;
      },
      statements: [
        ["inline","input",[],["class","input-big","required","required","value",["subexpr","@mut",[["get","address.state",["loc",[null,[71,26],[71,39]]]]],[],[]]],["loc",[null,[69,12],[71,41]]]]
      ],
      locals: [],
      templates: []
    };
  }());
  var child8 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 73,
            "column": 10
          },
          "end": {
            "line": 77,
            "column": 10
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("            ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
        return morphs;
      },
      statements: [
        ["inline","input",[],["class","input-big","required","required","value",["subexpr","@mut",[["get","address.postal_code",["loc",[null,[76,26],[76,45]]]]],[],[]]],["loc",[null,[74,12],[76,47]]]]
      ],
      locals: [],
      templates: []
    };
  }());
  var child9 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 79,
            "column": 8
          },
          "end": {
            "line": 86,
            "column": 8
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("          ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
        return morphs;
      },
      statements: [
        ["inline","fc-select",[],["class","input-appearance input-select-big","from",["subexpr","@mut",[["get","countries",["loc",[null,[81,27],[81,36]]]]],[],[]],"valueKey","code","labelKey","name","selectedValue",["subexpr","@mut",[["get","address.country",["loc",[null,[84,36],[84,51]]]]],[],[]],"onchange",["subexpr","action",[["subexpr","mut",[["get","address.country",["loc",[null,[85,44],[85,59]]]]],[],["loc",[null,[85,39],[85,60]]]]],["value","code"],["loc",[null,[85,31],[85,74]]]]],["loc",[null,[80,10],[85,76]]]]
      ],
      locals: [],
      templates: []
    };
  }());
  var child10 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 97,
            "column": 8
          },
          "end": {
            "line": 101,
            "column": 8
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("          ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
        return morphs;
      },
      statements: [
        ["inline","input",[],["class","input-big","required","required","value",["subexpr","@mut",[["get","receipt_recipient",["loc",[null,[100,24],[100,41]]]]],[],[]]],["loc",[null,[98,10],[100,43]]]]
      ],
      locals: [],
      templates: []
    };
  }());
  var child11 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 109,
            "column": 8
          },
          "end": {
            "line": 113,
            "column": 8
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("          Enter Credit Card\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "triple-curlies"
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 126,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createElement("div");
      dom.setAttribute(el1,"class","container upgrade-page hide-from-fullstory");
      var el2 = dom.createTextNode("\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createElement("h1");
      var el3 = dom.createTextNode("Upgrade to a Paid Plan");
      dom.appendChild(el2, el3);
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createElement("p");
      var el3 = dom.createTextNode("\n    You are currently scheduling\n    ");
      dom.appendChild(el2, el3);
      var el3 = dom.createElement("strong");
      var el4 = dom.createComment("");
      dom.appendChild(el3, el4);
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("\n    in your account. Forecast charges per person per month, and provides\n    unlimited clients and projects.\n  ");
      dom.appendChild(el2, el3);
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createElement("form");
      dom.setAttribute(el2,"class","upgrade-form");
      var el3 = dom.createTextNode("\n\n    ");
      dom.appendChild(el2, el3);
      var el3 = dom.createElement("section");
      dom.setAttribute(el3,"class","upgrade-form-table");
      var el4 = dom.createTextNode("\n      ");
      dom.appendChild(el3, el4);
      var el4 = dom.createElement("table");
      dom.setAttribute(el4,"class","plan-table");
      var el5 = dom.createTextNode("\n        ");
      dom.appendChild(el4, el5);
      var el5 = dom.createElement("thead");
      var el6 = dom.createTextNode("\n          ");
      dom.appendChild(el5, el6);
      var el6 = dom.createElement("th");
      var el7 = dom.createTextNode("Total People");
      dom.appendChild(el6, el7);
      dom.appendChild(el5, el6);
      var el6 = dom.createTextNode("\n          ");
      dom.appendChild(el5, el6);
      var el6 = dom.createElement("th");
      var el7 = dom.createTextNode("Price Per Person");
      dom.appendChild(el6, el7);
      dom.appendChild(el5, el6);
      var el6 = dom.createTextNode("\n          ");
      dom.appendChild(el5, el6);
      var el6 = dom.createElement("th");
      var el7 = dom.createTextNode("Total Amount");
      dom.appendChild(el6, el7);
      dom.appendChild(el5, el6);
      var el6 = dom.createTextNode("\n        ");
      dom.appendChild(el5, el6);
      dom.appendChild(el4, el5);
      var el5 = dom.createTextNode("\n        ");
      dom.appendChild(el4, el5);
      var el5 = dom.createElement("tbody");
      var el6 = dom.createTextNode("\n          ");
      dom.appendChild(el5, el6);
      var el6 = dom.createElement("td");
      var el7 = dom.createTextNode("\n");
      dom.appendChild(el6, el7);
      var el7 = dom.createComment("");
      dom.appendChild(el6, el7);
      var el7 = dom.createTextNode("          ");
      dom.appendChild(el6, el7);
      dom.appendChild(el5, el6);
      var el6 = dom.createTextNode("\n          ");
      dom.appendChild(el5, el6);
      var el6 = dom.createElement("td");
      var el7 = dom.createTextNode("\n");
      dom.appendChild(el6, el7);
      var el7 = dom.createComment("");
      dom.appendChild(el6, el7);
      var el7 = dom.createTextNode("            ");
      dom.appendChild(el6, el7);
      var el7 = dom.createComment("");
      dom.appendChild(el6, el7);
      var el7 = dom.createTextNode("\n          ");
      dom.appendChild(el6, el7);
      dom.appendChild(el5, el6);
      var el6 = dom.createTextNode("\n          ");
      dom.appendChild(el5, el6);
      var el6 = dom.createElement("td");
      var el7 = dom.createTextNode(" ");
      dom.appendChild(el6, el7);
      var el7 = dom.createComment("");
      dom.appendChild(el6, el7);
      var el7 = dom.createTextNode(" / month ");
      dom.appendChild(el6, el7);
      dom.appendChild(el5, el6);
      var el6 = dom.createTextNode("\n        ");
      dom.appendChild(el5, el6);
      dom.appendChild(el4, el5);
      var el5 = dom.createTextNode("\n      ");
      dom.appendChild(el4, el5);
      dom.appendChild(el3, el4);
      var el4 = dom.createTextNode("\n\n");
      dom.appendChild(el3, el4);
      var el4 = dom.createComment("");
      dom.appendChild(el3, el4);
      var el4 = dom.createTextNode("    ");
      dom.appendChild(el3, el4);
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("\n\n    ");
      dom.appendChild(el2, el3);
      var el3 = dom.createElement("section");
      dom.setAttribute(el3,"class","form-address");
      var el4 = dom.createTextNode("\n      ");
      dom.appendChild(el3, el4);
      var el4 = dom.createElement("div");
      dom.setAttribute(el4,"class","upgrade-form-label");
      var el5 = dom.createTextNode("\n        Billing Address\n      ");
      dom.appendChild(el4, el5);
      dom.appendChild(el3, el4);
      var el4 = dom.createTextNode("\n      ");
      dom.appendChild(el3, el4);
      var el4 = dom.createElement("div");
      dom.setAttribute(el4,"class","upgrade-form-inputs labels-inside-big-inputs");
      var el5 = dom.createTextNode("\n");
      dom.appendChild(el4, el5);
      var el5 = dom.createComment("");
      dom.appendChild(el4, el5);
      var el5 = dom.createComment("");
      dom.appendChild(el4, el5);
      var el5 = dom.createTextNode("        ");
      dom.appendChild(el4, el5);
      var el5 = dom.createElement("div");
      dom.setAttribute(el5,"class","address-city-state-code");
      var el6 = dom.createTextNode("\n");
      dom.appendChild(el5, el6);
      var el6 = dom.createComment("");
      dom.appendChild(el5, el6);
      var el6 = dom.createComment("");
      dom.appendChild(el5, el6);
      var el6 = dom.createComment("");
      dom.appendChild(el5, el6);
      var el6 = dom.createTextNode("        ");
      dom.appendChild(el5, el6);
      dom.appendChild(el4, el5);
      var el5 = dom.createTextNode("\n");
      dom.appendChild(el4, el5);
      var el5 = dom.createComment("");
      dom.appendChild(el4, el5);
      var el5 = dom.createTextNode("      ");
      dom.appendChild(el4, el5);
      dom.appendChild(el3, el4);
      var el4 = dom.createTextNode("\n    ");
      dom.appendChild(el3, el4);
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("\n\n    ");
      dom.appendChild(el2, el3);
      var el3 = dom.createElement("hr");
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("\n\n    ");
      dom.appendChild(el2, el3);
      var el3 = dom.createElement("section");
      var el4 = dom.createTextNode("\n      ");
      dom.appendChild(el3, el4);
      var el4 = dom.createElement("div");
      dom.setAttribute(el4,"class","upgrade-form-label");
      var el5 = dom.createTextNode("\n        Receipt Recipient\n      ");
      dom.appendChild(el4, el5);
      dom.appendChild(el3, el4);
      var el4 = dom.createTextNode("\n      ");
      dom.appendChild(el3, el4);
      var el4 = dom.createElement("div");
      dom.setAttribute(el4,"class","upgrade-form-inputs labels-inside-big-inputs");
      var el5 = dom.createTextNode("\n");
      dom.appendChild(el4, el5);
      var el5 = dom.createComment("");
      dom.appendChild(el4, el5);
      var el5 = dom.createTextNode("      ");
      dom.appendChild(el4, el5);
      dom.appendChild(el3, el4);
      var el4 = dom.createTextNode("\n    ");
      dom.appendChild(el3, el4);
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("\n\n    ");
      dom.appendChild(el2, el3);
      var el3 = dom.createElement("hr");
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("\n\n    ");
      dom.appendChild(el2, el3);
      var el3 = dom.createElement("section");
      var el4 = dom.createTextNode("\n      ");
      dom.appendChild(el3, el4);
      var el4 = dom.createElement("div");
      dom.setAttribute(el4,"class","field submit");
      var el5 = dom.createTextNode("\n");
      dom.appendChild(el4, el5);
      var el5 = dom.createComment("");
      dom.appendChild(el4, el5);
      var el5 = dom.createTextNode("\n        ");
      dom.appendChild(el4, el5);
      var el5 = dom.createElement("small");
      var el6 = dom.createTextNode("\n          Submitting will open a form to fill in your credit card information.\n          ");
      dom.appendChild(el5, el6);
      var el6 = dom.createElement("br");
      dom.appendChild(el5, el6);
      var el6 = dom.createTextNode("\n          You will be charged after you complete that form.\n        ");
      dom.appendChild(el5, el6);
      dom.appendChild(el4, el5);
      var el5 = dom.createTextNode("\n      ");
      dom.appendChild(el4, el5);
      dom.appendChild(el3, el4);
      var el4 = dom.createTextNode("\n    ");
      dom.appendChild(el3, el4);
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("\n\n  ");
      dom.appendChild(el2, el3);
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n\n");
      dom.appendChild(el1, el2);
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var element0 = dom.childAt(fragment, [0]);
      var element1 = dom.childAt(element0, [5]);
      var element2 = dom.childAt(element1, [1]);
      var element3 = dom.childAt(element2, [1, 3]);
      var element4 = dom.childAt(element3, [3]);
      var element5 = dom.childAt(element1, [3, 3]);
      var element6 = dom.childAt(element5, [4]);
      var morphs = new Array(14);
      morphs[0] = dom.createMorphAt(dom.childAt(element0, [3, 1]),0,0);
      morphs[1] = dom.createMorphAt(dom.childAt(element3, [1]),1,1);
      morphs[2] = dom.createMorphAt(element4,1,1);
      morphs[3] = dom.createMorphAt(element4,3,3);
      morphs[4] = dom.createMorphAt(dom.childAt(element3, [5]),1,1);
      morphs[5] = dom.createMorphAt(element2,3,3);
      morphs[6] = dom.createMorphAt(element5,1,1);
      morphs[7] = dom.createMorphAt(element5,2,2);
      morphs[8] = dom.createMorphAt(element6,1,1);
      morphs[9] = dom.createMorphAt(element6,2,2);
      morphs[10] = dom.createMorphAt(element6,3,3);
      morphs[11] = dom.createMorphAt(element5,6,6);
      morphs[12] = dom.createMorphAt(dom.childAt(element1, [7, 3]),1,1);
      morphs[13] = dom.createMorphAt(dom.childAt(element1, [11, 1]),1,1);
      return morphs;
    },
    statements: [
      ["inline","plural-ize",[["get","activePeople",["loc",[null,[6,25],[6,37]]]],"person"],[],["loc",[null,[6,12],[6,48]]]],
      ["block","if",[["get","protectFromAutofill",["loc",[null,[22,18],[22,37]]]]],[],0,1,["loc",[null,[22,12],[30,19]]]],
      ["block","if",[["get","isDiscounted",["loc",[null,[33,18],[33,30]]]]],[],2,null,["loc",[null,[33,12],[35,19]]]],
      ["inline","cents-to-dollars",[["get","amountPerPerson",["loc",[null,[36,31],[36,46]]]]],[],["loc",[null,[36,12],[36,48]]]],
      ["inline","cents-to-dollars",[["get","totalAmount",["loc",[null,[38,34],[38,45]]]]],["nan","?"],["loc",[null,[38,15],[38,55]]]],
      ["block","if",[["get","isDiscounted",["loc",[null,[42,12],[42,24]]]]],[],3,null,["loc",[null,[42,6],[44,13]]]],
      ["block","form-field",[],["label","Address 1","for","address.line_1","of",["subexpr","@mut",[["get","this",["loc",[null,[52,64],[52,68]]]]],[],[]]],4,null,["loc",[null,[52,8],[57,23]]]],
      ["block","form-field",[],["label","Address 2 (optional)","for","address.line_2","of",["subexpr","@mut",[["get","this",["loc",[null,[58,75],[58,79]]]]],[],[]]],5,null,["loc",[null,[58,8],[61,23]]]],
      ["block","form-field",[],["label","City","for","address.city","of",["subexpr","@mut",[["get","this",["loc",[null,[63,59],[63,63]]]]],[],[]]],6,null,["loc",[null,[63,10],[67,25]]]],
      ["block","form-field",[],["label","State","for","address.state","of",["subexpr","@mut",[["get","this",["loc",[null,[68,61],[68,65]]]]],[],[]]],7,null,["loc",[null,[68,10],[72,25]]]],
      ["block","form-field",[],["label","Postal Code","for","address.postal_code","of",["subexpr","@mut",[["get","this",["loc",[null,[73,73],[73,77]]]]],[],[]]],8,null,["loc",[null,[73,10],[77,25]]]],
      ["block","form-field",[],["label","Country","for","address.country","of",["subexpr","@mut",[["get","this",["loc",[null,[79,63],[79,67]]]]],[],[]]],9,null,["loc",[null,[79,8],[86,23]]]],
      ["block","form-field",[],["label","Email Address","for","receipt_recipient","of",["subexpr","@mut",[["get","this",["loc",[null,[97,71],[97,75]]]]],[],[]]],10,null,["loc",[null,[97,8],[101,23]]]],
      ["block","simple-button",[],["class","button-big button-primary","disabled",["subexpr","@mut",[["get","isSubmitDisabled",["loc",[null,[110,34],[110,50]]]]],[],[]],"action","captureCard"],11,null,["loc",[null,[109,8],[113,26]]]]
    ],
    locals: [],
    templates: [child0, child1, child2, child3, child4, child5, child6, child7, child8, child9, child10, child11]
  };
}())); });

define('forecast/templates/application', [], function(){ return Ember.HTMLBars.template((function() {
  return {
    meta: {
      "fragmentReason": {
        "name": "triple-curlies"
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 8,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createElement("main");
      var el2 = dom.createTextNode("\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createComment("");
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createComment("");
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createComment("");
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n");
      dom.appendChild(el1, el2);
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var element0 = dom.childAt(fragment, [0]);
      var morphs = new Array(4);
      morphs[0] = dom.createAttrMorph(element0, 'class');
      morphs[1] = dom.createMorphAt(element0,1,1);
      morphs[2] = dom.createMorphAt(element0,3,3);
      morphs[3] = dom.createMorphAt(element0,5,5);
      return morphs;
    },
    statements: [
      ["attribute","class",["concat",[["subexpr","if",[["get","realtime.isViewOnly",["loc",[null,[1,18],[1,37]]]],"is-view-only"],[],["loc",[null,[1,13],[1,54]]]]]]],
      ["content","outlet",["loc",[null,[2,2],[2,12]]]],
      ["inline","outlet",["offline"],[],["loc",[null,[4,2],[4,22]]]],
      ["inline","outlet",["reloadWarning"],[],["loc",[null,[6,2],[6,28]]]]
    ],
    locals: [],
    templates: []
  };
}())); });

define('forecast/templates/application/reload', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 15,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1,"class","test-reload-modal");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h2");
        var el4 = dom.createTextNode("Forecast has been updated!");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("\n        Please reload for the updates to take effect.\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("br");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        Sorry for the trouble!\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3,"type","submit");
        dom.setAttribute(el3,"class","button button-primary");
        var el4 = dom.createTextNode("Reload now");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 16,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      dom.insertBoundary(fragment, null);
      return morphs;
    },
    statements: [
      ["block","modal-overlay",[],[],0,null,["loc",[null,[1,0],[15,18]]]]
    ],
    locals: [],
    templates: [child0]
  };
}())); });

define('forecast/templates/assignments/confirm_for_repeated_set', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 4
            },
            "end": {
              "line": 8,
              "column": 4
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("section");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("h2");
          var el3 = dom.createTextNode("You’re changing a repeating assignment.");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("p");
          dom.setAttribute(el2,"class","sub-h2");
          var el3 = dom.createTextNode("Which assignments in the series would you like to change?");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.3.0",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 4
              },
              "end": {
                "line": 13,
                "column": 4
              }
            }
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("section");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("h2");
            var el3 = dom.createTextNode("You’re deleting a repeating assignment.");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("p");
            dom.setAttribute(el2,"class","sub-h2");
            var el3 = dom.createTextNode("Which assignments in the series would you like to delete?");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      var child1 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.3.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 13,
                  "column": 4
                },
                "end": {
                  "line": 18,
                  "column": 4
                }
              }
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("section");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("h2");
              var el3 = dom.createTextNode("You’re copying a repeating assignment.");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("p");
              dom.setAttribute(el2,"class","sub-h2");
              var el3 = dom.createTextNode("Which assignments in the series would you like to copy?");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() { return []; },
            statements: [

            ],
            locals: [],
            templates: []
          };
        }());
        var child1 = (function() {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.3.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 18,
                  "column": 4
                },
                "end": {
                  "line": 31,
                  "column": 4
                }
              }
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("section");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("h2");
              var el3 = dom.createTextNode("You’re updating a repeated series.");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("p");
              dom.setAttribute(el2,"class","sub-h2");
              var el3 = dom.createTextNode("\n          Are you sure you want to change the series from\n          ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("strong");
              var el4 = dom.createTextNode("\n            ");
              dom.appendChild(el3, el4);
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n          ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n          to\n          ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("strong");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n          long?\n        ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n    ");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element7 = dom.childAt(fragment, [1, 3]);
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(dom.childAt(element7, [1]),1,1);
              morphs[1] = dom.createMorphAt(dom.childAt(element7, [3]),0,0);
              return morphs;
            },
            statements: [
              ["inline","plural-ize",[["get","model.repeated_assignment_set.weeks",["loc",[null,[24,25],[24,60]]]],"week"],[],["loc",[null,[24,12],[24,69]]]],
              ["inline","plural-ize",[["get","repeatWeeks",["loc",[null,[27,31],[27,42]]]],"week"],[],["loc",[null,[27,18],[27,51]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.3.0",
            "loc": {
              "source": null,
              "start": {
                "line": 13,
                "column": 4
              },
              "end": {
                "line": 31,
                "column": 4
              }
            }
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","if",[["get","isConfirmingCopy",["loc",[null,[13,14],[13,30]]]]],[],0,1,["loc",[null,[13,4],[31,4]]]]
          ],
          locals: [],
          templates: [child0, child1]
        };
      }());
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 4
            },
            "end": {
              "line": 31,
              "column": 4
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","if",[["get","isConfirmingDelete",["loc",[null,[8,14],[8,32]]]]],[],0,1,["loc",[null,[8,4],[31,4]]]]
        ],
        locals: [],
        templates: [child0, child1]
      };
    }());
    var child2 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.3.0",
            "loc": {
              "source": null,
              "start": {
                "line": 35,
                "column": 8
              },
              "end": {
                "line": 37,
                "column": 8
              }
            }
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          Yes, Update Series\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.3.0",
            "loc": {
              "source": null,
              "start": {
                "line": 39,
                "column": 8
              },
              "end": {
                "line": 41,
                "column": 8
              }
            }
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          Cancel\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 33,
              "column": 4
            },
            "end": {
              "line": 43,
              "column": 4
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("section");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element6 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(element6,1,1);
          morphs[1] = dom.createMorphAt(element6,3,3);
          return morphs;
        },
        statements: [
          ["block","simple-button",[],["class","button-primary test-confirm-extend","action","confirmAllFuture","disabled",["subexpr","@mut",[["get","confirmInFlight",["loc",[null,[35,103],[35,118]]]]],[],[]]],0,null,["loc",[null,[35,8],[37,26]]]],
          ["block","simple-button",[],["action","cancel","disabled",["subexpr","@mut",[["get","confirmInFlight",["loc",[null,[39,50],[39,65]]]]],[],[]]],1,null,["loc",[null,[39,8],[41,26]]]]
        ],
        locals: [],
        templates: [child0, child1]
      };
    }());
    var child3 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.3.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 46,
                  "column": 10
                },
                "end": {
                  "line": 48,
                  "column": 10
                }
              }
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            Just This One\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() { return []; },
            statements: [

            ],
            locals: [],
            templates: []
          };
        }());
        var child1 = (function() {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.3.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 53,
                  "column": 10
                },
                "end": {
                  "line": 55,
                  "column": 10
                }
              }
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            This and All Future\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() { return []; },
            statements: [

            ],
            locals: [],
            templates: []
          };
        }());
        var child2 = (function() {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.3.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 60,
                  "column": 10
                },
                "end": {
                  "line": 62,
                  "column": 10
                }
              }
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1,"class","icon");
              dom.setAttribute(el1,"data-icon","loader");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() { return []; },
            statements: [

            ],
            locals: [],
            templates: []
          };
        }());
        var child3 = (function() {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.3.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 63,
                  "column": 10
                },
                "end": {
                  "line": 65,
                  "column": 10
                }
              }
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            Cancel\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() { return []; },
            statements: [

            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.3.0",
            "loc": {
              "source": null,
              "start": {
                "line": 43,
                "column": 4
              },
              "end": {
                "line": 68,
                "column": 4
              }
            }
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("section");
            dom.setAttribute(el1,"class","repeat-big-confirmation-submit");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2,"class","field");
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("          ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("span");
            var el4 = dom.createTextNode("This assignment will no longer be in the series.");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2,"class","field");
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("          ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("span");
            var el4 = dom.createTextNode("This and all future assignments in the series will be changed.");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2,"class","field cancel");
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("        ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element4 = dom.childAt(fragment, [1]);
            var element5 = dom.childAt(element4, [5]);
            var morphs = new Array(4);
            morphs[0] = dom.createMorphAt(dom.childAt(element4, [1]),1,1);
            morphs[1] = dom.createMorphAt(dom.childAt(element4, [3]),1,1);
            morphs[2] = dom.createMorphAt(element5,1,1);
            morphs[3] = dom.createMorphAt(element5,2,2);
            return morphs;
          },
          statements: [
            ["block","simple-button",[],["class","button-primary","action","confirmJustOne","disabled",["subexpr","@mut",[["get","confirmInFlight",["loc",[null,[46,83],[46,98]]]]],[],[]]],0,null,["loc",[null,[46,10],[48,28]]]],
            ["block","simple-button",[],["class","button-primary","action","confirmAllFuture","disabled",["subexpr","@mut",[["get","confirmInFlight",["loc",[null,[53,85],[53,100]]]]],[],[]]],1,null,["loc",[null,[53,10],[55,28]]]],
            ["block","if",[["get","confirmInFlight",["loc",[null,[60,16],[60,31]]]]],[],2,null,["loc",[null,[60,10],[62,17]]]],
            ["block","simple-button",[],["action","cancel","disabled",["subexpr","@mut",[["get","confirmInFlight",["loc",[null,[63,52],[63,67]]]]],[],[]]],3,null,["loc",[null,[63,10],[65,28]]]]
          ],
          locals: [],
          templates: [child0, child1, child2, child3]
        };
      }());
      var child1 = (function() {
        var child0 = (function() {
          var child0 = (function() {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.3.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 71,
                    "column": 10
                  },
                  "end": {
                    "line": 73,
                    "column": 10
                  }
                }
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            Just This One\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() { return []; },
              statements: [

              ],
              locals: [],
              templates: []
            };
          }());
          var child1 = (function() {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.3.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 78,
                    "column": 10
                  },
                  "end": {
                    "line": 80,
                    "column": 10
                  }
                }
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            This and All Future\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() { return []; },
              statements: [

              ],
              locals: [],
              templates: []
            };
          }());
          var child2 = (function() {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.3.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 85,
                    "column": 10
                  },
                  "end": {
                    "line": 87,
                    "column": 10
                  }
                }
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("span");
                dom.setAttribute(el1,"class","icon");
                dom.setAttribute(el1,"data-icon","loader");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() { return []; },
              statements: [

              ],
              locals: [],
              templates: []
            };
          }());
          var child3 = (function() {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.3.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 88,
                    "column": 10
                  },
                  "end": {
                    "line": 90,
                    "column": 10
                  }
                }
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            Cancel\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() { return []; },
              statements: [

              ],
              locals: [],
              templates: []
            };
          }());
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.3.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 68,
                  "column": 4
                },
                "end": {
                  "line": 93,
                  "column": 4
                }
              }
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("section");
              dom.setAttribute(el1,"class","repeat-big-confirmation-submit");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2,"class","field");
              var el3 = dom.createTextNode("\n");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("          ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("span");
              var el4 = dom.createTextNode("Only this assignment will be copied.");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n        ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2,"class","field");
              var el3 = dom.createTextNode("\n");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("          ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("span");
              var el4 = dom.createTextNode("This and all future assignments in the series will be copied.");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n        ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2,"class","field cancel");
              var el3 = dom.createTextNode("\n");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("        ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element2 = dom.childAt(fragment, [1]);
              var element3 = dom.childAt(element2, [5]);
              var morphs = new Array(4);
              morphs[0] = dom.createMorphAt(dom.childAt(element2, [1]),1,1);
              morphs[1] = dom.createMorphAt(dom.childAt(element2, [3]),1,1);
              morphs[2] = dom.createMorphAt(element3,1,1);
              morphs[3] = dom.createMorphAt(element3,2,2);
              return morphs;
            },
            statements: [
              ["block","simple-button",[],["class","button-primary","action","confirmJustOne","disabled",["subexpr","@mut",[["get","confirmInFlight",["loc",[null,[71,83],[71,98]]]]],[],[]]],0,null,["loc",[null,[71,10],[73,28]]]],
              ["block","simple-button",[],["class","button-primary","action","confirmAllFuture","disabled",["subexpr","@mut",[["get","confirmInFlight",["loc",[null,[78,85],[78,100]]]]],[],[]]],1,null,["loc",[null,[78,10],[80,28]]]],
              ["block","if",[["get","confirmInFlight",["loc",[null,[85,16],[85,31]]]]],[],2,null,["loc",[null,[85,10],[87,17]]]],
              ["block","simple-button",[],["action","cancel","disabled",["subexpr","@mut",[["get","confirmInFlight",["loc",[null,[88,52],[88,67]]]]],[],[]]],3,null,["loc",[null,[88,10],[90,28]]]]
            ],
            locals: [],
            templates: [child0, child1, child2, child3]
          };
        }());
        var child1 = (function() {
          var child0 = (function() {
            var child0 = (function() {
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.3.0",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 96,
                      "column": 10
                    },
                    "end": {
                      "line": 98,
                      "column": 10
                    }
                  }
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("            Just This One\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes() { return []; },
                statements: [

                ],
                locals: [],
                templates: []
              };
            }());
            var child1 = (function() {
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.3.0",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 103,
                      "column": 10
                    },
                    "end": {
                      "line": 105,
                      "column": 10
                    }
                  }
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("            This and All Future\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes() { return []; },
                statements: [

                ],
                locals: [],
                templates: []
              };
            }());
            var child2 = (function() {
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.3.0",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 110,
                      "column": 10
                    },
                    "end": {
                      "line": 112,
                      "column": 10
                    }
                  }
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("            ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("span");
                  dom.setAttribute(el1,"class","icon");
                  dom.setAttribute(el1,"data-icon","loader");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes() { return []; },
                statements: [

                ],
                locals: [],
                templates: []
              };
            }());
            var child3 = (function() {
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.3.0",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 113,
                      "column": 10
                    },
                    "end": {
                      "line": 115,
                      "column": 10
                    }
                  }
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("            Cancel\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes() { return []; },
                statements: [

                ],
                locals: [],
                templates: []
              };
            }());
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.3.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 93,
                    "column": 4
                  },
                  "end": {
                    "line": 118,
                    "column": 4
                  }
                }
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("      ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("section");
                dom.setAttribute(el1,"class","repeat-big-confirmation-submit");
                var el2 = dom.createTextNode("\n        ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2,"class","field");
                var el3 = dom.createTextNode("\n");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("          ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("span");
                var el4 = dom.createTextNode("Only this assignment will be deleted.");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n        ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n\n        ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2,"class","field");
                var el3 = dom.createTextNode("\n");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("          ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("span");
                var el4 = dom.createTextNode("This and all future assignments in the series will be deleted.");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n        ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n\n        ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2,"class","field cancel");
                var el3 = dom.createTextNode("\n");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("        ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n      ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n    ");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element0 = dom.childAt(fragment, [1]);
                var element1 = dom.childAt(element0, [5]);
                var morphs = new Array(4);
                morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]),1,1);
                morphs[1] = dom.createMorphAt(dom.childAt(element0, [3]),1,1);
                morphs[2] = dom.createMorphAt(element1,1,1);
                morphs[3] = dom.createMorphAt(element1,2,2);
                return morphs;
              },
              statements: [
                ["block","simple-button",[],["class","button-primary","action","confirmJustOne","disabled",["subexpr","@mut",[["get","confirmInFlight",["loc",[null,[96,83],[96,98]]]]],[],[]]],0,null,["loc",[null,[96,10],[98,28]]]],
                ["block","simple-button",[],["class","button-primary","action","confirmAllFuture","disabled",["subexpr","@mut",[["get","confirmInFlight",["loc",[null,[103,85],[103,100]]]]],[],[]]],1,null,["loc",[null,[103,10],[105,28]]]],
                ["block","if",[["get","confirmInFlight",["loc",[null,[110,16],[110,31]]]]],[],2,null,["loc",[null,[110,10],[112,17]]]],
                ["block","simple-button",[],["action","cancel","disabled",["subexpr","@mut",[["get","confirmInFlight",["loc",[null,[113,52],[113,67]]]]],[],[]]],3,null,["loc",[null,[113,10],[115,28]]]]
              ],
              locals: [],
              templates: [child0, child1, child2, child3]
            };
          }());
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.3.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 93,
                  "column": 4
                },
                "end": {
                  "line": 118,
                  "column": 4
                }
              }
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [
              ["block","if",[["get","isConfirmingDelete",["loc",[null,[93,14],[93,32]]]]],[],0,null,["loc",[null,[93,4],[118,4]]]]
            ],
            locals: [],
            templates: [child0]
          };
        }());
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.3.0",
            "loc": {
              "source": null,
              "start": {
                "line": 68,
                "column": 4
              },
              "end": {
                "line": 118,
                "column": 4
              }
            }
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","if",[["get","isConfirmingCopy",["loc",[null,[68,14],[68,30]]]]],[],0,1,["loc",[null,[68,4],[118,4]]]]
          ],
          locals: [],
          templates: [child0, child1]
        };
      }());
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 43,
              "column": 4
            },
            "end": {
              "line": 118,
              "column": 4
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","if",[["get","isConfirmingUpdate",["loc",[null,[43,14],[43,32]]]]],[],0,1,["loc",[null,[43,4],[118,4]]]]
        ],
        locals: [],
        templates: [child0, child1]
      };
    }());
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 120,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1,"class","confirm-repeat");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("  ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element8 = dom.childAt(fragment, [1]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(element8,1,1);
        morphs[1] = dom.createMorphAt(element8,3,3);
        return morphs;
      },
      statements: [
        ["block","if",[["get","isConfirmingUpdate",["loc",[null,[3,10],[3,28]]]]],[],0,1,["loc",[null,[3,4],[31,11]]]],
        ["block","if",[["get","isConfirmingExtend",["loc",[null,[33,10],[33,28]]]]],[],2,3,["loc",[null,[33,4],[118,11]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3]
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 121,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      dom.insertBoundary(fragment, null);
      return morphs;
    },
    statements: [
      ["block","modal-overlay",[],["modalClass",["subexpr","@mut",[["get","modalClass",["loc",[null,[1,28],[1,38]]]]],[],[]],"close","cancel"],0,null,["loc",[null,[1,0],[120,18]]]]
    ],
    locals: [],
    templates: [child0]
  };
}())); });

define('forecast/templates/assignments/copy', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 6
            },
            "end": {
              "line": 8,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("h2");
          dom.setAttribute(el1,"class","hide-from-fullstory");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("’s Time Off\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
          return morphs;
        },
        statements: [
          ["content","model.person.first_name",["loc",[null,[6,10],[6,37]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 6
            },
            "end": {
              "line": 15,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("h2");
          dom.setAttribute(el1,"class","hide-from-fullstory");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("’s Assignment\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          var el3 = dom.createTextNode("\n            (");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(")\n          ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(element0,1,1);
          morphs[1] = dom.createMorphAt(dom.childAt(element0, [3]),1,1);
          return morphs;
        },
        statements: [
          ["content","model.person.first_name",["loc",[null,[10,10],[10,37]]]],
          ["inline","plural-ize",[["get","model.totalAllocation",["loc",[null,[12,26],[12,47]]]],"hr"],[],["loc",[null,[12,13],[12,54]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.3.0",
            "loc": {
              "source": null,
              "start": {
                "line": 22,
                "column": 8
              },
              "end": {
                "line": 30,
                "column": 8
              }
            }
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
            return morphs;
          },
          statements: [
            ["inline","fc-prompt",[],["label","Select Person…"],["loc",[null,[28,10],[28,46]]]],
            ["content","fc-divider",["loc",[null,[29,10],[29,24]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 19,
              "column": 6
            },
            "end": {
              "line": 31,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","fc-select",[],["from",["subexpr","@mut",[["get","availablePeople",["loc",[null,[22,26],[22,41]]]]],[],[]],"valueKey","id","labelKey","name","selected",["subexpr","@mut",[["get","selectedPerson",["loc",[null,[25,30],[25,44]]]]],[],[]],"onchange",["subexpr","action",[["subexpr","mut",[["get","selectedPerson",["loc",[null,[26,43],[26,57]]]]],[],["loc",[null,[26,38],[26,58]]]]],[],["loc",[null,[26,30],[26,59]]]],"class","input-appearance hide-from-fullstory"],0,null,["loc",[null,[22,8],[30,22]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 45,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        dom.setAttribute(el2,"class","form-options");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3,"type","submit");
        dom.setAttribute(el3,"class","button button-primary gtm-form-submit");
        var el4 = dom.createTextNode("\n        Copy\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3,"type","submit");
        dom.setAttribute(el3,"class","button button-cancel gtm-form-cancel");
        var el4 = dom.createTextNode("\n        Cancel\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [1]);
        var element2 = dom.childAt(element1, [5]);
        var element3 = dom.childAt(element2, [1]);
        var element4 = dom.childAt(element2, [3]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(dom.childAt(element1, [1]),1,1);
        morphs[1] = dom.createMorphAt(dom.childAt(element1, [3]),1,1);
        morphs[2] = dom.createElementMorph(element3);
        morphs[3] = dom.createElementMorph(element4);
        return morphs;
      },
      statements: [
        ["block","if",[["get","model.project.isTimeOff",["loc",[null,[4,12],[4,35]]]]],[],0,1,["loc",[null,[4,6],[15,13]]]],
        ["block","form-field",[],["label","Copy to","for","selectedPerson","of",["subexpr","@mut",[["get","this",["loc",[null,[20,32],[20,36]]]]],[],[]],"validateOnBlur",false],2,null,["loc",[null,[19,6],[31,21]]]],
        ["element","action",["copy"],[],["loc",[null,[36,14],[36,31]]]],
        ["element","action",["cancelCopy"],[],["loc",[null,[40,14],[40,37]]]]
      ],
      locals: [],
      templates: [child0, child1, child2]
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 46,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      dom.insertBoundary(fragment, null);
      return morphs;
    },
    statements: [
      ["block","modal-overlay",[],["close","cancelCopy"],0,null,["loc",[null,[1,0],[45,18]]]]
    ],
    locals: [],
    templates: [child0]
  };
}())); });

define('forecast/templates/assignments/form', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 6
            },
            "end": {
              "line": 6,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("h2");
          var el2 = dom.createTextNode("Edit Time Off");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 6
            },
            "end": {
              "line": 8,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("h2");
          var el2 = dom.createTextNode("Edit Assignment");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.3.0",
            "loc": {
              "source": null,
              "start": {
                "line": 13,
                "column": 8
              },
              "end": {
                "line": 20,
                "column": 8
              }
            }
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("% of ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" h/d\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element3 = dom.childAt(fragment, [3]);
            var morphs = new Array(4);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            morphs[1] = dom.createAttrMorph(element3, 'class');
            morphs[2] = dom.createMorphAt(element3,1,1);
            morphs[3] = dom.createMorphAt(element3,3,3);
            return morphs;
          },
          statements: [
            ["inline","decimal-input",[],["class","allocation-input test-allocation-input","num",["subexpr","@mut",[["get","model.allocation",["loc",[null,[15,30],[15,46]]]]],[],[]],"placeholder","0.00"],["loc",[null,[14,10],[16,46]]]],
            ["attribute","class",["concat",["allocation-meta ",["subexpr","if",[["get","isOverAllocated",["loc",[null,[17,44],[17,59]]]],"warn"],[],["loc",[null,[17,39],[17,68]]]]]]],
            ["content","allocationPercent",["loc",[null,[18,12],[18,33]]]],
            ["content","maxAllocation",["loc",[null,[18,38],[18,55]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.3.0",
            "loc": {
              "source": null,
              "start": {
                "line": 22,
                "column": 8
              },
              "end": {
                "line": 30,
                "column": 8
              }
            }
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","allocation-meta");
            var el2 = dom.createTextNode("\n            across ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" (");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(")\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [3]);
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            morphs[1] = dom.createMorphAt(element2,1,1);
            morphs[2] = dom.createMorphAt(element2,3,3);
            return morphs;
          },
          statements: [
            ["inline","decimal-input",[],["class","total-allocation-input","num",["subexpr","@mut",[["get","totalAllocation",["loc",[null,[24,30],[24,45]]]]],[],[]],"onBlur",["subexpr","action",[["get","syncTotalAllocation",["loc",[null,[25,41],[25,60]]]]],[],["loc",[null,[25,33],[25,61]]]],"placeholder","0.00"],["loc",[null,[23,10],[26,46]]]],
            ["content","durationLabel",["loc",[null,[28,19],[28,36]]]],
            ["content","durationWeeks",["loc",[null,[28,38],[28,55]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 12,
              "column": 6
            },
            "end": {
              "line": 31,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","form-field",[],["label","Hours/Day","for","allocation","of",["subexpr","@mut",[["get","this",["loc",[null,[13,60],[13,64]]]]],[],[]]],0,null,["loc",[null,[13,8],[20,23]]]],
          ["block","form-field",[],["label","Total Hours","for","totalAllocation","of",["subexpr","@mut",[["get","this",["loc",[null,[22,67],[22,71]]]]],[],[]]],1,null,["loc",[null,[22,8],[30,23]]]]
        ],
        locals: [],
        templates: [child0, child1]
      };
    }());
    var child3 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 33,
              "column": 6
            },
            "end": {
              "line": 35,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","range-select",[],["start",["subexpr","@mut",[["get","start_date",["loc",[null,[34,29],[34,39]]]]],[],[]],"end",["subexpr","@mut",[["get","end_date",["loc",[null,[34,44],[34,52]]]]],[],[]]],["loc",[null,[34,8],[34,54]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child4 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 37,
              "column": 6
            },
            "end": {
              "line": 42,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","textarea",[],["placeholder","Optional details or related link","rows","2","maxlength","1000","value",["subexpr","@mut",[["get","model.notes",["loc",[null,[41,25],[41,36]]]]],[],[]]],["loc",[null,[38,8],[41,38]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child5 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.3.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 53,
                  "column": 10
                },
                "end": {
                  "line": 57,
                  "column": 10
                }
              }
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("small");
              dom.setAttribute(el1,"class","form-helper");
              var el2 = dom.createTextNode("\n              Upon saving, this assignment will be reassigned to ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode(".\n            ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
              return morphs;
            },
            statements: [
              ["content","person.name",["loc",[null,[55,65],[55,80]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.3.0",
            "loc": {
              "source": null,
              "start": {
                "line": 45,
                "column": 8
              },
              "end": {
                "line": 58,
                "column": 8
              }
            }
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["inline","fc-select",[],["class","input-appearance hide-from-fullstory test-person-input","from",["subexpr","@mut",[["get","sortedAvailablePeople",["loc",[null,[47,27],[47,48]]]]],[],[]],"valueKey","id","labelKey","name","selected",["subexpr","@mut",[["get","person",["loc",[null,[50,31],[50,37]]]]],[],[]],"onchange",["subexpr","action",[["subexpr","mut",[["get","person",["loc",[null,[51,44],[51,50]]]]],[],["loc",[null,[51,39],[51,51]]]]],[],["loc",[null,[51,31],[51,52]]]]],["loc",[null,[46,10],[51,54]]]],
            ["block","if",[["get","isReassigning",["loc",[null,[53,16],[53,29]]]]],[],0,null,["loc",[null,[53,10],[57,17]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 44,
              "column": 6
            },
            "end": {
              "line": 59,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","form-field",[],["label","Person","for","person","of",["subexpr","@mut",[["get","this",["loc",[null,[45,53],[45,57]]]]],[],[]]],0,null,["loc",[null,[45,8],[58,23]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    var child6 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.3.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 63,
                  "column": 10
                },
                "end": {
                  "line": 70,
                  "column": 10
                }
              }
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("label");
              dom.setAttribute(el1,"class","form-repeat-checkbox");
              var el2 = dom.createTextNode("\n              ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n              Repeat weekly\n            ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
              return morphs;
            },
            statements: [
              ["inline","input",[],["classNames","test-repeat-checkbox","type","checkbox","checked",["subexpr","@mut",[["get","isRepeated",["loc",[null,[67,30],[67,40]]]]],[],[]]],["loc",[null,[65,14],[67,42]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        var child1 = (function() {
          var child0 = (function() {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.3.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 73,
                    "column": 14
                  },
                  "end": {
                    "line": 75,
                    "column": 14
                  }
                }
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                Repeats weekly\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() { return []; },
              statements: [

              ],
              locals: [],
              templates: []
            };
          }());
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.3.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 71,
                  "column": 10
                },
                "end": {
                  "line": 84,
                  "column": 10
                }
              }
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1,"class","form-repeat-weeks");
              var el2 = dom.createTextNode("\n");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("              for\n              ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n              weeks\n            ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element1 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(element1,1,1);
              morphs[1] = dom.createMorphAt(element1,3,3);
              return morphs;
            },
            statements: [
              ["block","if",[["get","model.repeated_assignment_set",["loc",[null,[73,20],[73,49]]]]],[],0,null,["loc",[null,[73,14],[75,21]]]],
              ["inline","input",[],["classNames","input-small repeat-weeks-input test-repeat-weeks","type","text","maxlength",2,"value",["subexpr","@mut",[["get","repeatWeeks",["loc",[null,[80,28],[80,39]]]]],[],[]],"autoselect",true],["loc",[null,[77,14],[81,39]]]]
            ],
            locals: [],
            templates: [child0]
          };
        }());
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.3.0",
            "loc": {
              "source": null,
              "start": {
                "line": 62,
                "column": 8
              },
              "end": {
                "line": 85,
                "column": 8
              }
            }
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            morphs[1] = dom.createMorphAt(fragment,1,1,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","unless",[["get","model.repeated_assignment_set",["loc",[null,[63,20],[63,49]]]]],[],0,null,["loc",[null,[63,10],[70,21]]]],
            ["block","if",[["get","isRepeated",["loc",[null,[71,16],[71,26]]]]],[],1,null,["loc",[null,[71,10],[84,17]]]]
          ],
          locals: [],
          templates: [child0, child1]
        };
      }());
      var child1 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.3.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 86,
                  "column": 10
                },
                "end": {
                  "line": 93,
                  "column": 10
                }
              }
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("label");
              dom.setAttribute(el1,"class","form-repeat-checkbox form-cannot-repeat");
              var el2 = dom.createTextNode("\n              ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("input");
              dom.setAttribute(el2,"type","checkbox");
              dom.setAttribute(el2,"disabled","disabled");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n              Repeat weekly\n            ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() { return []; },
            statements: [

            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.3.0",
            "loc": {
              "source": null,
              "start": {
                "line": 85,
                "column": 8
              },
              "end": {
                "line": 94,
                "column": 8
              }
            }
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","tool-tip",[],["text","Repeated assignments must be shorter than 5 days","position","bottom-right","align","left"],0,null,["loc",[null,[86,10],[93,23]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 61,
              "column": 6
            },
            "end": {
              "line": 95,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","if",[["get","canRepeat",["loc",[null,[62,14],[62,23]]]]],[],0,1,["loc",[null,[62,8],[94,15]]]]
        ],
        locals: [],
        templates: [child0, child1]
      };
    }());
    var child7 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 103,
              "column": 8
            },
            "end": {
              "line": 109,
              "column": 8
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          dom.setAttribute(el1,"href","#");
          dom.setAttribute(el1,"class","test-form-copy-button");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("i");
          dom.setAttribute(el2,"class","icon");
          dom.setAttribute(el2,"data-icon","copy");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            Copy\n          ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createElementMorph(element0);
          return morphs;
        },
        statements: [
          ["element","action",["copyAssignment",["get","model",["loc",[null,[105,39],[105,44]]]]],[],["loc",[null,[105,13],[105,46]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": [
            "multiple-nodes"
          ]
        },
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 123,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        dom.setAttribute(el2,"class","form-options");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3,"type","submit");
        dom.setAttribute(el3,"class","button button-primary gtm-form-submit");
        var el4 = dom.createTextNode("\n        Update\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","form-bottom-right-action");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("a");
        dom.setAttribute(el4,"href","#");
        dom.setAttribute(el4,"class","test-form-delete-button");
        var el5 = dom.createTextNode("\n          ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("i");
        dom.setAttribute(el5,"class","icon");
        dom.setAttribute(el5,"data-icon","trash");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n          Delete\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","modal-addition");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element4 = dom.childAt(fragment, [1]);
        var element5 = dom.childAt(element4, [3]);
        var element6 = dom.childAt(element4, [5]);
        var element7 = dom.childAt(element6, [1]);
        var element8 = dom.childAt(element6, [3]);
        var element9 = dom.childAt(element8, [3]);
        var morphs = new Array(10);
        morphs[0] = dom.createMorphAt(dom.childAt(element4, [1]),1,1);
        morphs[1] = dom.createMorphAt(element5,1,1);
        morphs[2] = dom.createMorphAt(element5,3,3);
        morphs[3] = dom.createMorphAt(element5,5,5);
        morphs[4] = dom.createMorphAt(element5,7,7);
        morphs[5] = dom.createMorphAt(element5,9,9);
        morphs[6] = dom.createElementMorph(element7);
        morphs[7] = dom.createMorphAt(element8,1,1);
        morphs[8] = dom.createElementMorph(element9);
        morphs[9] = dom.createMorphAt(dom.childAt(fragment, [3]),1,1);
        return morphs;
      },
      statements: [
        ["block","if",[["get","model.project.isTimeOff",["loc",[null,[4,12],[4,35]]]]],[],0,1,["loc",[null,[4,6],[8,13]]]],
        ["block","if",[["get","model.project.isNotTimeOff",["loc",[null,[12,12],[12,38]]]]],[],2,null,["loc",[null,[12,6],[31,13]]]],
        ["block","form-field",[],["for","dates","of",["subexpr","@mut",[["get","this",["loc",[null,[33,35],[33,39]]]]],[],[]],"label","Dates"],3,null,["loc",[null,[33,6],[35,21]]]],
        ["block","form-field",[],["for","notes","of",["subexpr","@mut",[["get","this",["loc",[null,[37,35],[37,39]]]]],[],[]]],4,null,["loc",[null,[37,6],[42,21]]]],
        ["block","if",[["get","canReassign",["loc",[null,[44,12],[44,23]]]]],[],5,null,["loc",[null,[44,6],[59,13]]]],
        ["block","form-field",[],["classNames","form-repeat","for","repeatWeeks","of",["subexpr","@mut",[["get","this",["loc",[null,[61,66],[61,70]]]]],[],[]],"label",""],6,null,["loc",[null,[61,6],[95,21]]]],
        ["element","action",["save"],[],["loc",[null,[99,74],[99,91]]]],
        ["block","unless",[["get","model.isCWTO",["loc",[null,[103,18],[103,30]]]]],[],7,null,["loc",[null,[103,8],[109,19]]]],
        ["element","action",["deleteAssignment",["get","model",["loc",[null,[111,39],[111,44]]]]],[],["loc",[null,[111,11],[111,46]]]],
        ["inline","last-updated",[],["updated_at",["subexpr","@mut",[["get","model.updated_at",["loc",[null,[120,30],[120,46]]]]],[],[]],"updated_by",["subexpr","@mut",[["get","model.updated_by",["loc",[null,[121,30],[121,46]]]]],[],[]]],["loc",[null,[120,4],[121,48]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6, child7]
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 124,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      dom.insertBoundary(fragment, null);
      return morphs;
    },
    statements: [
      ["block","modal-overlay",[],["close","save","suppressAutofocus",true],0,null,["loc",[null,[1,0],[123,18]]]]
    ],
    locals: [],
    templates: [child0]
  };
}())); });

define('forecast/templates/authenticated', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 9,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
        return morphs;
      },
      statements: [
        ["inline","render",["welcome",["get","ftux",["loc",[null,[10,21],[10,25]]]]],[],["loc",[null,[10,2],[10,27]]]]
      ],
      locals: [],
      templates: []
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type",
          "multiple-nodes"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 12,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n\n");
      dom.appendChild(el0, el1);
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n\n");
      dom.appendChild(el0, el1);
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n\n");
      dom.appendChild(el0, el1);
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n\n");
      dom.appendChild(el0, el1);
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(5);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
      morphs[2] = dom.createMorphAt(fragment,4,4,contextualElement);
      morphs[3] = dom.createMorphAt(fragment,6,6,contextualElement);
      morphs[4] = dom.createMorphAt(fragment,8,8,contextualElement);
      dom.insertBoundary(fragment, 0);
      dom.insertBoundary(fragment, null);
      return morphs;
    },
    statements: [
      ["inline","partial",["shared/header"],[],["loc",[null,[1,0],[1,27]]]],
      ["inline","render",["notifications"],[],["loc",[null,[3,0],[3,26]]]],
      ["content","outlet",["loc",[null,[5,0],[5,10]]]],
      ["inline","outlet",["modal"],[],["loc",[null,[7,0],[7,18]]]],
      ["block","if",[["get","ftux",["loc",[null,[9,6],[9,10]]]]],[],0,null,["loc",[null,[9,0],[11,7]]]]
    ],
    locals: [],
    templates: [child0]
  };
}())); });

define('forecast/templates/billing/_delinquent_header_message', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 2
            },
            "end": {
              "line": 4,
              "column": 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    Account past due – ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("strong");
          var el2 = dom.createTextNode("Update Card");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": [
            "wrong-type"
          ]
        },
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","link-to",["billing.update_card"],["class","billing-header-message test-admin-delinquent-message"],0,null,["loc",[null,[2,2],[4,14]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }());
  var child1 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 5,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("span");
        dom.setAttribute(el1,"class","billing-header-message is-disabled test-view-only-delinquent-message");
        var el2 = dom.createTextNode("\n   Account past due\n  ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 10,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      dom.insertBoundary(fragment, null);
      return morphs;
    },
    statements: [
      ["block","if",[["get","realtime.isAdmin",["loc",[null,[1,6],[1,22]]]]],[],0,1,["loc",[null,[1,0],[9,7]]]]
    ],
    locals: [],
    templates: [child0, child1]
  };
}())); });

define('forecast/templates/billing/_trial_header_message', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 2
            },
            "end": {
              "line": 4,
              "column": 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" left in your trial – ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("strong");
          var el2 = dom.createTextNode("Upgrade");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","plural-ize",[["get","daysLeft",["loc",[null,[3,17],[3,25]]]],"day"],[],["loc",[null,[3,4],[3,33]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": [
            "wrong-type"
          ]
        },
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","link-to",["account.upgrade"],["class","billing-header-message test-admin-trial-message"],0,null,["loc",[null,[2,2],[4,14]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }());
  var child1 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 5,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("span");
        dom.setAttribute(el1,"class","billing-header-message is-disabled test-view-only-trial-message");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" days left in your trial\n  ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
        return morphs;
      },
      statements: [
        ["content","daysLeft",["loc",[null,[7,4],[7,16]]]]
      ],
      locals: [],
      templates: []
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 10,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      dom.insertBoundary(fragment, null);
      return morphs;
    },
    statements: [
      ["block","if",[["get","realtime.isAdmin",["loc",[null,[1,6],[1,22]]]]],[],0,1,["loc",[null,[1,0],[9,7]]]]
    ],
    locals: [],
    templates: [child0, child1]
  };
}())); });

define('forecast/templates/billing/needs_reactivation_modal', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.3.0",
            "loc": {
              "source": null,
              "start": {
                "line": 22,
                "column": 14
              },
              "end": {
                "line": 24,
                "column": 14
              }
            }
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","discount-original");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
            return morphs;
          },
          statements: [
            ["inline","cents-to-dollars",[["get","baseAmountPerPerson",["loc",[null,[23,67],[23,86]]]]],[],["loc",[null,[23,48],[23,88]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.3.0",
            "loc": {
              "source": null,
              "start": {
                "line": 31,
                "column": 10
              },
              "end": {
                "line": 33,
                "column": 10
              }
            }
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","form-helper discount-helper");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
            return morphs;
          },
          statements: [
            ["content","discountMessage",["loc",[null,[32,53],[32,72]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      var child2 = (function() {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.3.0",
            "loc": {
              "source": null,
              "start": {
                "line": 42,
                "column": 23
              },
              "end": {
                "line": 42,
                "column": 69
              }
            }
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("close this account");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 6
            },
            "end": {
              "line": 44,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("\n          Please update your credit card information to reactivate your\n          subscription and start your billing cycle anew.\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","billing-plan-modal-table");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("table");
          dom.setAttribute(el2,"class","plan-table");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("thead");
          var el4 = dom.createTextNode("\n              ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("th");
          var el5 = dom.createTextNode("Total People");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n              ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("th");
          var el5 = dom.createTextNode("Price Per Person");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n              ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("th");
          var el5 = dom.createTextNode("Total Amount");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("tbody");
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("td");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("td");
          var el5 = dom.createTextNode("\n");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("              ");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n            ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("td");
          var el5 = dom.createTextNode(" ");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode(" / month ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n          ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("\n          If this is a mistake, please contact us at\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("a");
          dom.setAttribute(el2,"href","mailto:support@forecastapp.com?subject=Feedback for Forecast");
          var el3 = dom.createTextNode("support@forecastapp.com");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(".\n          And don’t worry, all your data is still safe and secure with us.\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("\n          You can also ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" if you wish.\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [3]);
          var element2 = dom.childAt(element1, [1, 3]);
          var element3 = dom.childAt(element2, [3]);
          var morphs = new Array(6);
          morphs[0] = dom.createMorphAt(dom.childAt(element2, [1]),0,0);
          morphs[1] = dom.createMorphAt(element3,1,1);
          morphs[2] = dom.createMorphAt(element3,3,3);
          morphs[3] = dom.createMorphAt(dom.childAt(element2, [5]),1,1);
          morphs[4] = dom.createMorphAt(element1,3,3);
          morphs[5] = dom.createMorphAt(dom.childAt(fragment, [7]),1,1);
          return morphs;
        },
        statements: [
          ["content","totalPeople",["loc",[null,[20,16],[20,31]]]],
          ["block","if",[["get","isDiscounted",["loc",[null,[22,20],[22,32]]]]],[],0,null,["loc",[null,[22,14],[24,21]]]],
          ["inline","cents-to-dollars",[["get","amountPerPerson",["loc",[null,[25,33],[25,48]]]]],[],["loc",[null,[25,14],[25,50]]]],
          ["inline","cents-to-dollars",[["get","totalAmount",["loc",[null,[27,36],[27,47]]]]],["nan","?"],["loc",[null,[27,17],[27,57]]]],
          ["block","if",[["get","isDiscounted",["loc",[null,[31,16],[31,28]]]]],[],1,null,["loc",[null,[31,10],[33,17]]]],
          ["block","link-to",["account.close"],[],2,null,["loc",[null,[42,23],[42,81]]]]
        ],
        locals: [],
        templates: [child0, child1, child2]
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 44,
              "column": 6
            },
            "end": {
              "line": 48,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("\n          Only people with edit permissions can upgrade. Give one of them a shout!\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 51,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 4
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("section");
          dom.setAttribute(el1,"class","modal-cta");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          dom.setAttribute(el2,"type","submit");
          dom.setAttribute(el2,"class","button button-big button-primary gtm-form-submit");
          var el3 = dom.createTextNode("\n          Update Credit Card\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1, 1]);
          var morphs = new Array(1);
          morphs[0] = dom.createElementMorph(element0);
          return morphs;
        },
        statements: [
          ["element","action",["showCardForm"],[],["loc",[null,[55,16],[55,41]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 61,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h1");
        var el4 = dom.createTextNode("Your account is past due.");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("  ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element4 = dom.childAt(fragment, [1]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(element4, [1]),3,3);
        morphs[1] = dom.createMorphAt(element4,3,3);
        return morphs;
      },
      statements: [
        ["block","if",[["get","realtime.isAdmin",["loc",[null,[6,12],[6,28]]]]],[],0,1,["loc",[null,[6,6],[48,13]]]],
        ["block","if",[["get","realtime.isAdmin",["loc",[null,[51,10],[51,26]]]]],[],2,null,["loc",[null,[51,4],[59,11]]]]
      ],
      locals: [],
      templates: [child0, child1, child2]
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 62,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      dom.insertBoundary(fragment, null);
      return morphs;
    },
    statements: [
      ["block","modal-overlay",[],["modalClass","wide-modal billing-plan-modal test-reactivate-plan-modal"],0,null,["loc",[null,[1,0],[61,18]]]]
    ],
    locals: [],
    templates: [child0]
  };
}())); });

define('forecast/templates/billing/needs_upgrade_modal', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.3.0",
            "loc": {
              "source": null,
              "start": {
                "line": 12,
                "column": 10
              },
              "end": {
                "line": 12,
                "column": 84
              }
            }
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("contact us");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 6
            },
            "end": {
              "line": 22,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("\n          Please upgrade to a paid account to continue using Forecast.\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("\n          If you have any questions, or need more time for your trial, please\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(".\n          Don’t worry, all the data you put in during your trial is safe and secure with us.\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          dom.setAttribute(el2,"type","submit");
          dom.setAttribute(el2,"class","button button-big button-primary gtm-form-submit");
          var el3 = dom.createTextNode("\n            Upgrade Your Forecast Account\n          ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [5, 1]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [3]),1,1);
          morphs[1] = dom.createElementMorph(element0);
          return morphs;
        },
        statements: [
          ["block","external-link",[],["href","http://support.forecastapp.com/contact"],0,null,["loc",[null,[12,10],[12,102]]]],
          ["element","action",["navigateToUpgradePage"],[],["loc",[null,[18,18],[18,52]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 22,
              "column": 6
            },
            "end": {
              "line": 26,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("\n          Only people with edit permissions can upgrade. Give one of them a shout!\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.3.0",
            "loc": {
              "source": null,
              "start": {
                "line": 31,
                "column": 19
              },
              "end": {
                "line": 31,
                "column": 65
              }
            }
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("close this account");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 29,
              "column": 2
            },
            "end": {
              "line": 33,
              "column": 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("section");
          dom.setAttribute(el1,"class","modal-addition");
          var el2 = dom.createTextNode("\n      You can also ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" if you wish.\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
          return morphs;
        },
        statements: [
          ["block","link-to",["account.close"],[],0,null,["loc",[null,[31,19],[31,77]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": [
            "multiple-nodes",
            "wrong-type"
          ]
        },
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 34,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h1");
        var el4 = dom.createTextNode("Your Forecast trial has expired!");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]),3,3);
        morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","if",[["get","realtime.isAdmin",["loc",[null,[6,12],[6,28]]]]],[],0,1,["loc",[null,[6,6],[26,13]]]],
        ["block","if",[["get","realtime.isAdmin",["loc",[null,[29,8],[29,24]]]]],[],2,null,["loc",[null,[29,2],[33,9]]]]
      ],
      locals: [],
      templates: [child0, child1, child2]
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 35,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      dom.insertBoundary(fragment, null);
      return morphs;
    },
    statements: [
      ["block","modal-overlay",[],["modalClass","wide-modal text-center test-trial-expired"],0,null,["loc",[null,[1,0],[34,18]]]]
    ],
    locals: [],
    templates: [child0]
  };
}())); });

define('forecast/templates/billing/paywall', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 21,
            "column": 14
          },
          "end": {
            "line": 26,
            "column": 14
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("                ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
        return morphs;
      },
      statements: [
        ["inline","input",[],["class","input-big","required","required","autofocus","autofocus","value",["subexpr","@mut",[["get","addedPeople",["loc",[null,[25,30],[25,41]]]]],[],[]]],["loc",[null,[22,16],[25,43]]]]
      ],
      locals: [],
      templates: []
    };
  }());
  var child1 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 29,
            "column": 14
          },
          "end": {
            "line": 31,
            "column": 14
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("                ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("span");
        dom.setAttribute(el1,"class","discount-original");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
        return morphs;
      },
      statements: [
        ["inline","cents-to-dollars",[["get","baseAmountPerPerson",["loc",[null,[30,67],[30,86]]]]],[],["loc",[null,[30,48],[30,88]]]]
      ],
      locals: [],
      templates: []
    };
  }());
  var child2 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 38,
            "column": 8
          },
          "end": {
            "line": 40,
            "column": 8
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("          ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","form-helper discount-helper");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
        return morphs;
      },
      statements: [
        ["content","discountMessage",["loc",[null,[39,51],[39,70]]]]
      ],
      locals: [],
      templates: []
    };
  }());
  var child3 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 59,
            "column": 8
          },
          "end": {
            "line": 63,
            "column": 8
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("          Confirm Plan Update\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }());
  var child4 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 65,
            "column": 8
          },
          "end": {
            "line": 69,
            "column": 8
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("          Cancel\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "triple-curlies"
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 75,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createElement("div");
      dom.setAttribute(el1,"class","modal-overlay hide-from-fullstory");
      var el2 = dom.createTextNode("\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createElement("div");
      dom.setAttribute(el2,"class","modal wide-modal billing-plan-modal");
      var el3 = dom.createTextNode("\n    ");
      dom.appendChild(el2, el3);
      var el3 = dom.createElement("form");
      var el4 = dom.createTextNode("\n      ");
      dom.appendChild(el3, el4);
      var el4 = dom.createElement("section");
      var el5 = dom.createTextNode("\n        ");
      dom.appendChild(el4, el5);
      var el5 = dom.createElement("h1");
      var el6 = dom.createTextNode("Update Your Plan");
      dom.appendChild(el5, el6);
      dom.appendChild(el4, el5);
      var el5 = dom.createTextNode("\n        ");
      dom.appendChild(el4, el5);
      var el5 = dom.createElement("p");
      var el6 = dom.createTextNode("\n          You have reached the maximum number of people on your plan. To add\n          more people, please update your plan below.\n        ");
      dom.appendChild(el5, el6);
      dom.appendChild(el4, el5);
      var el5 = dom.createTextNode("\n      ");
      dom.appendChild(el4, el5);
      dom.appendChild(el3, el4);
      var el4 = dom.createTextNode("\n\n      ");
      dom.appendChild(el3, el4);
      var el4 = dom.createElement("section");
      dom.setAttribute(el4,"class","billing-plan-modal-table");
      var el5 = dom.createTextNode("\n        ");
      dom.appendChild(el4, el5);
      var el5 = dom.createElement("table");
      dom.setAttribute(el5,"class","plan-table");
      var el6 = dom.createTextNode("\n          ");
      dom.appendChild(el5, el6);
      var el6 = dom.createElement("thead");
      var el7 = dom.createTextNode("\n            ");
      dom.appendChild(el6, el7);
      var el7 = dom.createElement("th");
      var el8 = dom.createTextNode("Additional People");
      dom.appendChild(el7, el8);
      dom.appendChild(el6, el7);
      var el7 = dom.createTextNode("\n            ");
      dom.appendChild(el6, el7);
      var el7 = dom.createElement("th");
      var el8 = dom.createTextNode("Price Per Person");
      dom.appendChild(el7, el8);
      dom.appendChild(el6, el7);
      var el7 = dom.createTextNode("\n            ");
      dom.appendChild(el6, el7);
      var el7 = dom.createElement("th");
      var el8 = dom.createTextNode("Additional Amount");
      dom.appendChild(el7, el8);
      dom.appendChild(el6, el7);
      var el7 = dom.createTextNode("\n          ");
      dom.appendChild(el6, el7);
      dom.appendChild(el5, el6);
      var el6 = dom.createTextNode("\n          ");
      dom.appendChild(el5, el6);
      var el6 = dom.createElement("tbody");
      var el7 = dom.createTextNode("\n            ");
      dom.appendChild(el6, el7);
      var el7 = dom.createElement("td");
      var el8 = dom.createTextNode("\n");
      dom.appendChild(el7, el8);
      var el8 = dom.createComment("");
      dom.appendChild(el7, el8);
      var el8 = dom.createTextNode("            ");
      dom.appendChild(el7, el8);
      dom.appendChild(el6, el7);
      var el7 = dom.createTextNode("\n            ");
      dom.appendChild(el6, el7);
      var el7 = dom.createElement("td");
      var el8 = dom.createTextNode("\n");
      dom.appendChild(el7, el8);
      var el8 = dom.createComment("");
      dom.appendChild(el7, el8);
      var el8 = dom.createTextNode("              ");
      dom.appendChild(el7, el8);
      var el8 = dom.createComment("");
      dom.appendChild(el7, el8);
      var el8 = dom.createTextNode("\n            ");
      dom.appendChild(el7, el8);
      dom.appendChild(el6, el7);
      var el7 = dom.createTextNode("\n            ");
      dom.appendChild(el6, el7);
      var el7 = dom.createElement("td");
      var el8 = dom.createComment("");
      dom.appendChild(el7, el8);
      var el8 = dom.createTextNode(" /month");
      dom.appendChild(el7, el8);
      dom.appendChild(el6, el7);
      var el7 = dom.createTextNode("\n          ");
      dom.appendChild(el6, el7);
      dom.appendChild(el5, el6);
      var el6 = dom.createTextNode("\n        ");
      dom.appendChild(el5, el6);
      dom.appendChild(el4, el5);
      var el5 = dom.createTextNode("\n\n");
      dom.appendChild(el4, el5);
      var el5 = dom.createComment("");
      dom.appendChild(el4, el5);
      var el5 = dom.createTextNode("      ");
      dom.appendChild(el4, el5);
      dom.appendChild(el3, el4);
      var el4 = dom.createTextNode("\n\n      ");
      dom.appendChild(el3, el4);
      var el4 = dom.createElement("section");
      var el5 = dom.createTextNode("\n        ");
      dom.appendChild(el4, el5);
      var el5 = dom.createElement("p");
      var el6 = dom.createTextNode("\n          Your new plan will be\n          ");
      dom.appendChild(el5, el6);
      var el6 = dom.createElement("strong");
      dom.setAttribute(el6,"class","orange-total");
      var el7 = dom.createComment("");
      dom.appendChild(el6, el7);
      var el7 = dom.createTextNode("/month");
      dom.appendChild(el6, el7);
      dom.appendChild(el5, el6);
      var el6 = dom.createTextNode("\n          and supports scheduling up to\n          ");
      dom.appendChild(el5, el6);
      var el6 = dom.createElement("strong");
      var el7 = dom.createComment("");
      dom.appendChild(el6, el7);
      dom.appendChild(el5, el6);
      var el6 = dom.createTextNode(".\n        ");
      dom.appendChild(el5, el6);
      dom.appendChild(el4, el5);
      var el5 = dom.createTextNode("\n        ");
      dom.appendChild(el4, el5);
      var el5 = dom.createElement("p");
      var el6 = dom.createTextNode("\n          This new total will be charged to your\n          ");
      dom.appendChild(el5, el6);
      var el6 = dom.createElement("strong");
      var el7 = dom.createComment("");
      dom.appendChild(el6, el7);
      var el7 = dom.createTextNode(" card ending in ");
      dom.appendChild(el6, el7);
      var el7 = dom.createComment("");
      dom.appendChild(el6, el7);
      dom.appendChild(el5, el6);
      var el6 = dom.createTextNode("\n          at your next payment date of\n          ");
      dom.appendChild(el5, el6);
      var el6 = dom.createElement("strong");
      var el7 = dom.createComment("");
      dom.appendChild(el6, el7);
      dom.appendChild(el5, el6);
      var el6 = dom.createTextNode(".\n        ");
      dom.appendChild(el5, el6);
      dom.appendChild(el4, el5);
      var el5 = dom.createTextNode("\n      ");
      dom.appendChild(el4, el5);
      dom.appendChild(el3, el4);
      var el4 = dom.createTextNode("\n\n      ");
      dom.appendChild(el3, el4);
      var el4 = dom.createElement("section");
      var el5 = dom.createTextNode("\n");
      dom.appendChild(el4, el5);
      var el5 = dom.createComment("");
      dom.appendChild(el4, el5);
      var el5 = dom.createTextNode("\n");
      dom.appendChild(el4, el5);
      var el5 = dom.createComment("");
      dom.appendChild(el4, el5);
      var el5 = dom.createTextNode("      ");
      dom.appendChild(el4, el5);
      dom.appendChild(el3, el4);
      var el4 = dom.createTextNode("\n    ");
      dom.appendChild(el3, el4);
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("\n  ");
      dom.appendChild(el2, el3);
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n");
      dom.appendChild(el1, el2);
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n\n");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var element0 = dom.childAt(fragment, [0, 1, 1]);
      var element1 = dom.childAt(element0, [3]);
      var element2 = dom.childAt(element1, [1, 3]);
      var element3 = dom.childAt(element2, [3]);
      var element4 = dom.childAt(element0, [5]);
      var element5 = dom.childAt(element4, [1]);
      var element6 = dom.childAt(element4, [3]);
      var element7 = dom.childAt(element6, [1]);
      var element8 = dom.childAt(element0, [7]);
      var morphs = new Array(12);
      morphs[0] = dom.createMorphAt(dom.childAt(element2, [1]),1,1);
      morphs[1] = dom.createMorphAt(element3,1,1);
      morphs[2] = dom.createMorphAt(element3,3,3);
      morphs[3] = dom.createMorphAt(dom.childAt(element2, [5]),0,0);
      morphs[4] = dom.createMorphAt(element1,3,3);
      morphs[5] = dom.createMorphAt(dom.childAt(element5, [1]),0,0);
      morphs[6] = dom.createMorphAt(dom.childAt(element5, [3]),0,0);
      morphs[7] = dom.createMorphAt(element7,0,0);
      morphs[8] = dom.createMorphAt(element7,2,2);
      morphs[9] = dom.createMorphAt(dom.childAt(element6, [3]),0,0);
      morphs[10] = dom.createMorphAt(element8,1,1);
      morphs[11] = dom.createMorphAt(element8,3,3);
      return morphs;
    },
    statements: [
      ["block","form-field",[],["label","","for","addedPeople","of",["subexpr","@mut",[["get","this",["loc",[null,[21,58],[21,62]]]]],[],[]]],0,null,["loc",[null,[21,14],[26,29]]]],
      ["block","if",[["get","isDiscounted",["loc",[null,[29,20],[29,32]]]]],[],1,null,["loc",[null,[29,14],[31,21]]]],
      ["inline","cents-to-dollars",[["get","amountPerPerson",["loc",[null,[32,33],[32,48]]]]],[],["loc",[null,[32,14],[32,50]]]],
      ["inline","cents-to-dollars",[["get","totalAddedAmount",["loc",[null,[34,35],[34,51]]]]],["nan","?"],["loc",[null,[34,16],[34,61]]]],
      ["block","if",[["get","isDiscounted",["loc",[null,[38,14],[38,26]]]]],[],2,null,["loc",[null,[38,8],[40,15]]]],
      ["inline","cents-to-dollars",[["get","totalAmount",["loc",[null,[46,58],[46,69]]]]],["nan","?"],["loc",[null,[46,39],[46,79]]]],
      ["inline","plural-ize",[["get","totalScheduledPeople",["loc",[null,[48,31],[48,51]]]],"person"],[],["loc",[null,[48,18],[48,62]]]],
      ["content","card.brand",["loc",[null,[52,18],[52,32]]]],
      ["content","card.last_four",["loc",[null,[52,48],[52,66]]]],
      ["inline","format-date",[["get","nextBillingDate",["loc",[null,[54,32],[54,47]]]],"DD MMM YYYY"],[],["loc",[null,[54,18],[54,63]]]],
      ["block","simple-button",[],["class","button-big button-primary gtm-form-submit","disabled",["subexpr","@mut",[["get","isSubmitDisabled",["loc",[null,[60,34],[60,50]]]]],[],[]],"action","upgrade"],3,null,["loc",[null,[59,8],[63,26]]]],
      ["block","simple-button",[],["class","button-big gtm-form-cancel","disabled",["subexpr","@mut",[["get","isSubmitDisabled",["loc",[null,[66,34],[66,50]]]]],[],[]],"action","cancel"],4,null,["loc",[null,[65,8],[69,26]]]]
    ],
    locals: [],
    templates: [child0, child1, child2, child3, child4]
  };
}())); });

define('forecast/templates/billing/trial_auto_extend_modal', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 12,
              "column": 8
            },
            "end": {
              "line": 13,
              "column": 37
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                         get in touch");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 26,
              "column": 4
            },
            "end": {
              "line": 27,
              "column": 36
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                     Getting Started");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": [
            "multiple-nodes"
          ]
        },
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 29,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h1");
        var el4 = dom.createTextNode("Welcome back to Forecast!");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("\n        Since you’ve been gone, we’ve been busy.\n        To give you some time to check out the latest changes,\n        we’ve ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("strong");
        var el5 = dom.createTextNode("reopened your trial for 14 more days!");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("\n        We’re here to help. If you have any questions, just\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(".\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4,"type","submit");
        dom.setAttribute(el4,"class","button button-big button-primary gtm-form-submit test-dismiss");
        var el5 = dom.createTextNode("\n                Take Forecast for Another Spin\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","modal-addition");
        var el2 = dom.createTextNode("\n    Need a recap? Check out our\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" video.\n  ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [1, 1]);
        var element1 = dom.childAt(element0, [7, 1]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [5]),1,1);
        morphs[1] = dom.createElementMorph(element1);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [3]),1,1);
        return morphs;
      },
      statements: [
        ["block","external-link",[],["href","http://support.forecastapp.com/contact"],0,null,["loc",[null,[12,8],[13,55]]]],
        ["element","action",["closeTrialAutoExtendModal"],[],["loc",[null,[18,16],[18,54]]]],
        ["block","external-link",[],["href","http://support.forecastapp.com/article/47-getting-started-with-harvest-forecast"],1,null,["loc",[null,[26,4],[27,54]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 30,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      dom.insertBoundary(fragment, null);
      return morphs;
    },
    statements: [
      ["block","modal-overlay",[],["modalClass","wide-modal text-center test-trial-auto-extend-modal"],0,null,["loc",[null,[1,0],[29,18]]]]
    ],
    locals: [],
    templates: [child0]
  };
}())); });

define('forecast/templates/billing/update_address', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 6
            },
            "end": {
              "line": 11,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","input",[],["required","required","value",["subexpr","@mut",[["get","address.line_1",["loc",[null,[10,22],[10,36]]]]],[],[]]],["loc",[null,[9,8],[10,38]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 13,
              "column": 6
            },
            "end": {
              "line": 16,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","input",[],["placeholder","Optional","value",["subexpr","@mut",[["get","address.line_2",["loc",[null,[15,22],[15,36]]]]],[],[]]],["loc",[null,[14,8],[15,38]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 18,
              "column": 6
            },
            "end": {
              "line": 21,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","input",[],["required","required","value",["subexpr","@mut",[["get","address.city",["loc",[null,[20,22],[20,34]]]]],[],[]]],["loc",[null,[19,8],[20,36]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child3 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 23,
              "column": 6
            },
            "end": {
              "line": 26,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","input",[],["required","required","value",["subexpr","@mut",[["get","address.state",["loc",[null,[25,22],[25,35]]]]],[],[]]],["loc",[null,[24,8],[25,37]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child4 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 28,
              "column": 6
            },
            "end": {
              "line": 31,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","input",[],["required","required","value",["subexpr","@mut",[["get","address.postal_code",["loc",[null,[30,22],[30,41]]]]],[],[]]],["loc",[null,[29,8],[30,43]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child5 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 33,
              "column": 6
            },
            "end": {
              "line": 40,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","fc-select",[],["class","input-appearance","from",["subexpr","@mut",[["get","countries",["loc",[null,[35,25],[35,34]]]]],[],[]],"valueKey","code","labelKey","name","selectedValue",["subexpr","@mut",[["get","address.country",["loc",[null,[38,34],[38,49]]]]],[],[]],"onchange",["subexpr","action",[["subexpr","mut",[["get","address.country",["loc",[null,[39,42],[39,57]]]]],[],["loc",[null,[39,37],[39,58]]]]],["value","code"],["loc",[null,[39,29],[39,72]]]]],["loc",[null,[34,8],[39,74]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child6 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 44,
              "column": 6
            },
            "end": {
              "line": 49,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Update Address\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child7 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 51,
              "column": 6
            },
            "end": {
              "line": 55,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Cancel\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 58,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h2");
        var el4 = dom.createTextNode("Update Billing Address");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        dom.setAttribute(el2,"class","form-options");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [1]);
        var element1 = dom.childAt(element0, [3]);
        var element2 = dom.childAt(element0, [5]);
        var morphs = new Array(8);
        morphs[0] = dom.createMorphAt(element1,1,1);
        morphs[1] = dom.createMorphAt(element1,3,3);
        morphs[2] = dom.createMorphAt(element1,5,5);
        morphs[3] = dom.createMorphAt(element1,7,7);
        morphs[4] = dom.createMorphAt(element1,9,9);
        morphs[5] = dom.createMorphAt(element1,11,11);
        morphs[6] = dom.createMorphAt(element2,1,1);
        morphs[7] = dom.createMorphAt(element2,3,3);
        return morphs;
      },
      statements: [
        ["block","form-field",[],["label","Address 1","for","address.line_1","of",["subexpr","@mut",[["get","this",["loc",[null,[8,62],[8,66]]]]],[],[]]],0,null,["loc",[null,[8,6],[11,21]]]],
        ["block","form-field",[],["label","Address 2","for","address.line_2","of",["subexpr","@mut",[["get","this",["loc",[null,[13,62],[13,66]]]]],[],[]]],1,null,["loc",[null,[13,6],[16,21]]]],
        ["block","form-field",[],["label","City","for","address.city","of",["subexpr","@mut",[["get","this",["loc",[null,[18,55],[18,59]]]]],[],[]]],2,null,["loc",[null,[18,6],[21,21]]]],
        ["block","form-field",[],["label","State","for","address.state","of",["subexpr","@mut",[["get","this",["loc",[null,[23,57],[23,61]]]]],[],[]]],3,null,["loc",[null,[23,6],[26,21]]]],
        ["block","form-field",[],["label","Code","for","address.postal_code","of",["subexpr","@mut",[["get","this",["loc",[null,[28,62],[28,66]]]]],[],[]]],4,null,["loc",[null,[28,6],[31,21]]]],
        ["block","form-field",[],["label","Country","for","address.country","of",["subexpr","@mut",[["get","this",["loc",[null,[33,61],[33,65]]]]],[],[]]],5,null,["loc",[null,[33,6],[40,21]]]],
        ["block","simple-button",[],["class","button-primary test-submit","type","submit","disabled",["subexpr","@mut",[["get","isSubmitDisabled",["loc",[null,[46,32],[46,48]]]]],[],[]],"action","save"],6,null,["loc",[null,[44,6],[49,24]]]],
        ["block","simple-button",[],["type","submit","disabled",["subexpr","@mut",[["get","isSubmitDisabled",["loc",[null,[52,32],[52,48]]]]],[],[]],"action","close"],7,null,["loc",[null,[51,6],[55,24]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6, child7]
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 59,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      dom.insertBoundary(fragment, null);
      return morphs;
    },
    statements: [
      ["block","modal-overlay",[],["modelClass","hide-from-fullstory","close","close"],0,null,["loc",[null,[1,0],[58,18]]]]
    ],
    locals: [],
    templates: [child0]
  };
}())); });

define('forecast/templates/billing/update_plan', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 20,
              "column": 12
            },
            "end": {
              "line": 24,
              "column": 12
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","input",[],["class","input-big test-total-people","required","required","value",["subexpr","@mut",[["get","totalPeople",["loc",[null,[23,26],[23,37]]]]],[],[]]],["loc",[null,[21,12],[23,39]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 27,
              "column": 12
            },
            "end": {
              "line": 29,
              "column": 12
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("              ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","discount-original");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
          return morphs;
        },
        statements: [
          ["inline","cents-to-dollars",[["get","baseAmountPerPerson",["loc",[null,[28,65],[28,84]]]]],[],["loc",[null,[28,46],[28,86]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 35,
              "column": 6
            },
            "end": {
              "line": 37,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","form-helper discount-helper");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
          return morphs;
        },
        statements: [
          ["content","discountMessage",["loc",[null,[36,49],[36,68]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child3 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 56,
              "column": 6
            },
            "end": {
              "line": 60,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Confirm Plan Update\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child4 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 62,
              "column": 6
            },
            "end": {
              "line": 66,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Cancel\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 69,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h1");
        var el4 = dom.createTextNode("Update Your Plan");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("\n        You are currently scheduling ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(" of the ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        people your plan supports. Update your plan below.\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        dom.setAttribute(el2,"class","billing-plan-modal-table");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("table");
        dom.setAttribute(el3,"class","plan-table");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("thead");
        var el5 = dom.createTextNode("\n          ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("th");
        var el6 = dom.createTextNode("Total People");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n          ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("th");
        var el6 = dom.createTextNode("Price Per Person");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n          ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("th");
        var el6 = dom.createTextNode("Total Amount");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("tbody");
        var el5 = dom.createTextNode("\n          ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("          ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n          ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("            ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n          ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode(" /month");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("\n        Your new plan will be\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("strong");
        dom.setAttribute(el4,"class","orange-total");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("/month");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        and supports scheduling up to\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("strong");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(".\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("\n        This new total will be charged to your\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("strong");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode(" card ending in ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        at your next payment date of\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("strong");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(".\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [1]);
        var element1 = dom.childAt(element0, [1, 3]);
        var element2 = dom.childAt(element0, [3]);
        var element3 = dom.childAt(element2, [1, 3]);
        var element4 = dom.childAt(element3, [3]);
        var element5 = dom.childAt(element0, [5]);
        var element6 = dom.childAt(element5, [1]);
        var element7 = dom.childAt(element5, [3]);
        var element8 = dom.childAt(element7, [1]);
        var element9 = dom.childAt(element0, [7]);
        var morphs = new Array(14);
        morphs[0] = dom.createMorphAt(element1,1,1);
        morphs[1] = dom.createMorphAt(element1,3,3);
        morphs[2] = dom.createMorphAt(dom.childAt(element3, [1]),1,1);
        morphs[3] = dom.createMorphAt(element4,1,1);
        morphs[4] = dom.createMorphAt(element4,3,3);
        morphs[5] = dom.createMorphAt(dom.childAt(element3, [5]),0,0);
        morphs[6] = dom.createMorphAt(element2,3,3);
        morphs[7] = dom.createMorphAt(dom.childAt(element6, [1]),0,0);
        morphs[8] = dom.createMorphAt(dom.childAt(element6, [3]),0,0);
        morphs[9] = dom.createMorphAt(element8,0,0);
        morphs[10] = dom.createMorphAt(element8,2,2);
        morphs[11] = dom.createMorphAt(dom.childAt(element7, [3]),0,0);
        morphs[12] = dom.createMorphAt(element9,1,1);
        morphs[13] = dom.createMorphAt(element9,3,3);
        return morphs;
      },
      statements: [
        ["content","activePeople",["loc",[null,[6,37],[6,53]]]],
        ["content","purchasedPeople",["loc",[null,[6,61],[6,80]]]],
        ["block","form-field",[],["label","","for","totalPeople","of",["subexpr","@mut",[["get","this",["loc",[null,[20,56],[20,60]]]]],[],[]]],0,null,["loc",[null,[20,12],[24,27]]]],
        ["block","if",[["get","isDiscounted",["loc",[null,[27,18],[27,30]]]]],[],1,null,["loc",[null,[27,12],[29,19]]]],
        ["inline","cents-to-dollars",[["get","amountPerPerson",["loc",[null,[30,31],[30,46]]]]],[],["loc",[null,[30,12],[30,48]]]],
        ["inline","cents-to-dollars",[["get","totalAmount",["loc",[null,[32,33],[32,44]]]]],["nan","?"],["loc",[null,[32,14],[32,54]]]],
        ["block","if",[["get","isDiscounted",["loc",[null,[35,12],[35,24]]]]],[],2,null,["loc",[null,[35,6],[37,13]]]],
        ["inline","cents-to-dollars",[["get","totalAmount",["loc",[null,[43,56],[43,67]]]]],["nan","?"],["loc",[null,[43,37],[43,77]]]],
        ["inline","plural-ize",[["get","totalScheduledPeople",["loc",[null,[45,29],[45,49]]]],"person"],[],["loc",[null,[45,16],[45,60]]]],
        ["content","card.brand",["loc",[null,[49,16],[49,30]]]],
        ["content","card.last_four",["loc",[null,[49,46],[49,64]]]],
        ["inline","format-date",[["get","nextBillingDate",["loc",[null,[51,30],[51,45]]]],"DD MMM YYYY"],[],["loc",[null,[51,16],[51,61]]]],
        ["block","simple-button",[],["class","button-big button-primary test-submit gtm-form-submit","disabled",["subexpr","@mut",[["get","isSubmitDisabled",["loc",[null,[57,32],[57,48]]]]],[],[]],"action","update"],3,null,["loc",[null,[56,6],[60,24]]]],
        ["block","simple-button",[],["class","button-big gtm-form-cancel","disabled",["subexpr","@mut",[["get","isSubmitDisabled",["loc",[null,[63,32],[63,48]]]]],[],[]],"action","close"],4,null,["loc",[null,[62,6],[66,24]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3, child4]
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 70,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      dom.insertBoundary(fragment, null);
      return morphs;
    },
    statements: [
      ["block","modal-overlay",[],["modalClass","wide-modal billing-plan-modal hide-from-fullstory","close","close"],0,null,["loc",[null,[1,0],[69,18]]]]
    ],
    locals: [],
    templates: [child0]
  };
}())); });

define('forecast/templates/billing/update_receipt_recipient', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 6
            },
            "end": {
              "line": 13,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","input",[],["placeholder","Email","class","test-receipt-recipient","required","required","value",["subexpr","@mut",[["get","receipt_recipient",["loc",[null,[12,22],[12,39]]]]],[],[]]],["loc",[null,[9,8],[12,41]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 17,
              "column": 6
            },
            "end": {
              "line": 22,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Update Email\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 24,
              "column": 6
            },
            "end": {
              "line": 29,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Cancel\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 32,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h2");
        var el4 = dom.createTextNode("Update Receipt Recipient");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        dom.setAttribute(el2,"class","form-options");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [1]);
        var element1 = dom.childAt(element0, [5]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [3]),1,1);
        morphs[1] = dom.createMorphAt(element1,1,1);
        morphs[2] = dom.createMorphAt(element1,3,3);
        return morphs;
      },
      statements: [
        ["block","form-field",[],["label","Email","for","receipt_recipient","of",["subexpr","@mut",[["get","this",["loc",[null,[8,61],[8,65]]]]],[],[]]],0,null,["loc",[null,[8,6],[13,21]]]],
        ["block","simple-button",[],["class","button-primary test-submit","type","submit","disabled",["subexpr","@mut",[["get","isSubmitDisabled",["loc",[null,[19,32],[19,48]]]]],[],[]],"action","save"],1,null,["loc",[null,[17,6],[22,24]]]],
        ["block","simple-button",[],["class","test-cancel","type","submit","disabled",["subexpr","@mut",[["get","isSubmitDisabled",["loc",[null,[26,32],[26,48]]]]],[],[]],"action","close"],2,null,["loc",[null,[24,6],[29,24]]]]
      ],
      locals: [],
      templates: [child0, child1, child2]
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 34,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      return morphs;
    },
    statements: [
      ["block","modal-overlay",[],["modalClass","hide-from-fullstory","close","close"],0,null,["loc",[null,[1,0],[32,18]]]]
    ],
    locals: [],
    templates: [child0]
  };
}())); });

define('forecast/templates/clients/_context_menu', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 2
            },
            "end": {
              "line": 8,
              "column": 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          dom.setAttribute(el1,"href","#");
          var el2 = dom.createTextNode("Archive");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          dom.setAttribute(el1,"href","#");
          dom.setAttribute(el1,"class","delete-action");
          var el2 = dom.createTextNode("Delete");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(fragment, [3]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createElementMorph(element0);
          morphs[2] = dom.createElementMorph(element1);
          return morphs;
        },
        statements: [
          ["attribute","class",["concat",[["subexpr","if",[["get","model.hasActiveProjects",["loc",[null,[5,19],[5,42]]]],"is-disabled"],[],["loc",[null,[5,14],[5,58]]]]]]],
          ["element","action",["archiveClient",["get","model",["loc",[null,[4,41],[4,46]]]]],[],["loc",[null,[4,16],[4,48]]]],
          ["element","action",["goToDeleteRoute",["get","model",["loc",[null,[6,43],[6,48]]]]],[],["loc",[null,[6,16],[6,50]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": [
            "wrong-type"
          ]
        },
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","drop-down",[],["classNames","form-settings-dropdown","alignment","left"],0,null,["loc",[null,[2,2],[8,16]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 10,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      dom.insertBoundary(fragment, null);
      return morphs;
    },
    statements: [
      ["block","unless",[["get","model.isNew",["loc",[null,[1,10],[1,21]]]]],[],0,null,["loc",[null,[1,0],[9,11]]]]
    ],
    locals: [],
    templates: [child0]
  };
}())); });

define('forecast/templates/clients/delete', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.3.0",
            "loc": {
              "source": null,
              "start": {
                "line": 16,
                "column": 10
              },
              "end": {
                "line": 18,
                "column": 10
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
            return morphs;
          },
          statements: [
            ["content","project.nameWithCode",["loc",[null,[17,16],[17,40]]]]
          ],
          locals: ["project"],
          templates: []
        };
      }());
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 12,
              "column": 4
            },
            "end": {
              "line": 21,
              "column": 4
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("section");
          dom.setAttribute(el1,"class","delete-client-projects-list");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("strong");
          var el3 = dom.createTextNode("Projects that will be deleted:");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("ul");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 3]),1,1);
          return morphs;
        },
        statements: [
          ["block","each",[["get","sortedProjects",["loc",[null,[16,18],[16,32]]]]],["key","id"],0,null,["loc",[null,[16,10],[18,19]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 24,
              "column": 6
            },
            "end": {
              "line": 28,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","input",[],["class","confirm-input","required","required","value",["subexpr","@mut",[["get","confirmText",["loc",[null,[27,22],[27,33]]]]],[],[]]],["loc",[null,[25,8],[27,35]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 42,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h2");
        var el4 = dom.createTextNode("Delete ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("strong");
        var el5 = dom.createTextNode("Caution:");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        This action will permanently delete this client, including all of its\n        projects below. There is no undo. Proceed?\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        dom.setAttribute(el2,"class","form-delete-confirm");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3,"class","button button-primary-red gtm-form-submit");
        var el4 = dom.createTextNode("\n        Delete\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3,"class","button button-cancel gtm-form-cancel");
        var el4 = dom.createTextNode("\n        Cancel\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [1]);
        var element1 = dom.childAt(element0, [7]);
        var element2 = dom.childAt(element1, [1]);
        var element3 = dom.childAt(element1, [3]);
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [1, 1]),1,1);
        morphs[1] = dom.createMorphAt(element0,3,3);
        morphs[2] = dom.createMorphAt(dom.childAt(element0, [5]),1,1);
        morphs[3] = dom.createElementMorph(element2);
        morphs[4] = dom.createElementMorph(element3);
        return morphs;
      },
      statements: [
        ["content","model.name",["loc",[null,[4,17],[4,31]]]],
        ["block","if",[["get","hasProjects",["loc",[null,[12,10],[12,21]]]]],[],0,null,["loc",[null,[12,4],[21,11]]]],
        ["block","form-field",[],["label","Type YOLO to confirm","for","confirmText","of",["subexpr","@mut",[["get","this",["loc",[null,[24,70],[24,74]]]]],[],[]],"validateOnBlur",false],1,null,["loc",[null,[24,6],[28,21]]]],
        ["element","action",["doDelete"],[],["loc",[null,[33,14],[33,35]]]],
        ["element","action",["cancelDelete"],[],["loc",[null,[37,14],[37,39]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 43,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      dom.insertBoundary(fragment, null);
      return morphs;
    },
    statements: [
      ["block","modal-overlay",[],["close","cancelDelete"],0,null,["loc",[null,[1,0],[42,18]]]]
    ],
    locals: [],
    templates: [child0]
  };
}())); });

define('forecast/templates/clients/form', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 6
            },
            "end": {
              "line": 9,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","input",[],["class","name-input","placeholder","Client Name","required","required","value",["subexpr","@mut",[["get","name",["loc",[null,[8,22],[8,26]]]]],[],[]]],["loc",[null,[5,8],[8,28]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 13,
              "column": 6
            },
            "end": {
              "line": 18,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1,"type","submit");
          dom.setAttribute(el1,"class","button button-primary gtm-form-submit");
          var el2 = dom.createTextNode("\n          Update Client\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createElementMorph(element2);
          return morphs;
        },
        statements: [
          ["element","action",["saveClient"],[],["loc",[null,[15,16],[15,39]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 18,
              "column": 6
            },
            "end": {
              "line": 23,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1,"type","submit");
          dom.setAttribute(el1,"class","button button-primary gtm-form-submit");
          var el2 = dom.createTextNode("\n          Save Client\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createElementMorph(element1);
          return morphs;
        },
        statements: [
          ["element","action",["saveClient"],[],["loc",[null,[20,16],[20,39]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child3 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.3.0",
            "loc": {
              "source": null,
              "start": {
                "line": 36,
                "column": 10
              },
              "end": {
                "line": 38,
                "column": 10
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
            return morphs;
          },
          statements: [
            ["content","project.nameWithCode",["loc",[null,[37,16],[37,40]]]]
          ],
          locals: ["project"],
          templates: []
        };
      }());
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 32,
              "column": 4
            },
            "end": {
              "line": 41,
              "column": 4
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("section");
          dom.setAttribute(el1,"class","edit-client-projects-list");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("strong");
          var el3 = dom.createTextNode("Cannot be archived with active projects:");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("ul");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 3]),1,1);
          return morphs;
        },
        statements: [
          ["block","each",[["get","sortedProjects",["loc",[null,[36,18],[36,32]]]]],["key","id"],0,null,["loc",[null,[36,10],[38,19]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    var child4 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.3.0",
            "loc": {
              "source": null,
              "start": {
                "line": 49,
                "column": 6
              },
              "end": {
                "line": 51,
                "column": 6
              }
            }
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        This client is linked to Harvest\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 44,
              "column": 2
            },
            "end": {
              "line": 53,
              "column": 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","modal-addition");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(element0,1,1);
          morphs[1] = dom.createMorphAt(element0,3,3);
          return morphs;
        },
        statements: [
          ["inline","last-updated",[],["updated_at",["subexpr","@mut",[["get","model.updated_at",["loc",[null,[46,32],[46,48]]]]],[],[]],"updated_by",["subexpr","@mut",[["get","model.updated_by",["loc",[null,[47,32],[47,48]]]]],[],[]]],["loc",[null,[46,6],[47,50]]]],
          ["block","harvest-link-message",[],["model",["subexpr","@mut",[["get","model",["loc",[null,[49,36],[49,41]]]]],[],[]]],0,null,["loc",[null,[49,6],[51,31]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": [
            "multiple-nodes",
            "wrong-type"
          ]
        },
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 54,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        dom.setAttribute(el2,"class","form-header");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3,"type","reset");
        dom.setAttribute(el3,"class","button button-cancel gtm-form-cancel");
        var el4 = dom.createTextNode("\n        Cancel\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("  ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [1]);
        var element4 = dom.childAt(element3, [3]);
        var element5 = dom.childAt(element4, [3]);
        var morphs = new Array(6);
        morphs[0] = dom.createMorphAt(dom.childAt(element3, [1]),1,1);
        morphs[1] = dom.createMorphAt(element4,1,1);
        morphs[2] = dom.createElementMorph(element5);
        morphs[3] = dom.createMorphAt(element4,5,5);
        morphs[4] = dom.createMorphAt(element3,5,5);
        morphs[5] = dom.createMorphAt(fragment,3,3,contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","form-field",[],["label","","for","name","of",["subexpr","@mut",[["get","this",["loc",[null,[4,43],[4,47]]]]],[],[]]],0,null,["loc",[null,[4,6],[9,21]]]],
        ["block","unless",[["get","model.isNew",["loc",[null,[13,16],[13,27]]]]],[],1,2,["loc",[null,[13,6],[23,17]]]],
        ["element","action",["cancelClient"],[],["loc",[null,[25,14],[25,39]]]],
        ["inline","partial",["clients/context_menu"],[],["loc",[null,[29,6],[29,40]]]],
        ["block","if",[["get","model.hasActiveProjects",["loc",[null,[32,10],[32,33]]]]],[],3,null,["loc",[null,[32,4],[41,11]]]],
        ["block","unless",[["get","model.isNew",["loc",[null,[44,12],[44,23]]]]],[],4,null,["loc",[null,[44,2],[53,13]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3, child4]
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 55,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      dom.insertBoundary(fragment, null);
      return morphs;
    },
    statements: [
      ["block","modal-overlay",[],["close","cancelClient"],0,null,["loc",[null,[1,0],[54,18]]]]
    ],
    locals: [],
    templates: [child0]
  };
}())); });

define('forecast/templates/clients_page', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 6,
            "column": 4
          },
          "end": {
            "line": 9,
            "column": 4
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("      ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("i");
        dom.setAttribute(el1,"class","icon");
        dom.setAttribute(el1,"data-icon","add-white");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n      New Client\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }());
  var child1 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 12,
              "column": 6
            },
            "end": {
              "line": 14,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Import from Harvest\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 11,
            "column": 4
          },
          "end": {
            "line": 15,
            "column": 4
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","simple-button",[],["action","goToProjectsImport","class","test-import-button"],0,null,["loc",[null,[12,6],[14,24]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }());
  var child2 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 17,
            "column": 4
          },
          "end": {
            "line": 20,
            "column": 4
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("      ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("i");
        dom.setAttribute(el1,"class","icon icon-right");
        dom.setAttribute(el1,"data-icon","arrow-right");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n      View Archived Clients\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }());
  var child3 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 23,
            "column": 2
          },
          "end": {
            "line": 27,
            "column": 2
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("    ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("ol");
        dom.setAttribute(el1,"class","content-list clients-list");
        var el2 = dom.createTextNode("\n      ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
        return morphs;
      },
      statements: [
        ["inline","render",["account.clients_list",["get","model",["loc",[null,[25,38],[25,43]]]]],[],["loc",[null,[25,6],[25,45]]]]
      ],
      locals: [],
      templates: []
    };
  }());
  var child4 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 27,
            "column": 2
          },
          "end": {
            "line": 32,
            "column": 2
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("    ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","empty-content");
        var el2 = dom.createTextNode("\n      You haven’t added any clients yet!\n      Add a new client\n    ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "triple-curlies"
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 35,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createElement("div");
      dom.setAttribute(el1,"class","container");
      var el2 = dom.createTextNode("\n\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createElement("h1");
      var el3 = dom.createTextNode("Clients");
      dom.appendChild(el2, el3);
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createElement("div");
      dom.setAttribute(el2,"class","list-controls");
      var el3 = dom.createTextNode("\n");
      dom.appendChild(el2, el3);
      var el3 = dom.createComment("");
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("\n");
      dom.appendChild(el2, el3);
      var el3 = dom.createComment("");
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("\n");
      dom.appendChild(el2, el3);
      var el3 = dom.createComment("");
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("  ");
      dom.appendChild(el2, el3);
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n\n");
      dom.appendChild(el1, el2);
      var el2 = dom.createComment("");
      dom.appendChild(el1, el2);
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n\n");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var element0 = dom.childAt(fragment, [0]);
      var element1 = dom.childAt(element0, [3]);
      var morphs = new Array(4);
      morphs[0] = dom.createMorphAt(element1,1,1);
      morphs[1] = dom.createMorphAt(element1,3,3);
      morphs[2] = dom.createMorphAt(element1,5,5);
      morphs[3] = dom.createMorphAt(element0,5,5);
      return morphs;
    },
    statements: [
      ["block","simple-button",[],["class","button-primary","action","addClient"],0,null,["loc",[null,[6,4],[9,22]]]],
      ["block","if",[["get","account.isConnectedToHarvest",["loc",[null,[11,10],[11,38]]]]],[],1,null,["loc",[null,[11,4],[15,11]]]],
      ["block","link-to",["account.clients_archived_page"],["tagName","button","class","button button-as-gray-link right"],2,null,["loc",[null,[17,4],[20,16]]]],
      ["block","if",[["get","model.length",["loc",[null,[23,8],[23,20]]]]],[],3,4,["loc",[null,[23,2],[32,9]]]]
    ],
    locals: [],
    templates: [child0, child1, child2, child3, child4]
  };
}())); });

define('forecast/templates/components/allocated-frame', [], function(){ return Ember.HTMLBars.template((function() {
  return {
    meta: {
      "fragmentReason": false,
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 2,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createElement("span");
      var el2 = dom.createComment("");
      dom.appendChild(el1, el2);
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createUnsafeMorphAt(dom.childAt(fragment, [0]),0,0);
      return morphs;
    },
    statements: [
      ["content","label",["loc",[null,[1,6],[1,17]]]]
    ],
    locals: [],
    templates: []
  };
}())); });

define('forecast/templates/components/announcement-button', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 7,
            "column": 0
          },
          "end": {
            "line": 16,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","announcement-message");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","dismiss-announcement");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("a");
        dom.setAttribute(el3,"href","#");
        dom.setAttribute(el3,"class","test-dismiss");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("i");
        dom.setAttribute(el4,"class","icon");
        dom.setAttribute(el4,"data-icon","x");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("Dismiss this announcement\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [1]);
        var element1 = dom.childAt(element0, [3, 1]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(element0,1,1);
        morphs[1] = dom.createElementMorph(element1);
        return morphs;
      },
      statements: [
        ["inline","parse-markdown",[["get","content",["loc",[null,[9,21],[9,28]]]]],[],["loc",[null,[9,4],[9,30]]]],
        ["element","action",["dismiss"],[],["loc",[null,[11,18],[11,38]]]]
      ],
      locals: [],
      templates: []
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "multiple-nodes",
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 17,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createElement("a");
      dom.setAttribute(el1,"href","#");
      var el2 = dom.createTextNode("\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createComment("");
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createElement("i");
      dom.setAttribute(el2,"class","icon");
      dom.setAttribute(el2,"data-icon","arrow-down-white");
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n");
      dom.appendChild(el1, el2);
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var element2 = dom.childAt(fragment, [0]);
      var morphs = new Array(4);
      morphs[0] = dom.createAttrMorph(element2, 'class');
      morphs[1] = dom.createElementMorph(element2);
      morphs[2] = dom.createMorphAt(element2,1,1);
      morphs[3] = dom.createMorphAt(fragment,2,2,contextualElement);
      dom.insertBoundary(fragment, null);
      return morphs;
    },
    statements: [
      ["attribute","class",["concat",[["subexpr","if",[["get","showAnnouncement",["loc",[null,[1,15],[1,31]]]],"is-active"],[],["loc",[null,[1,10],[1,45]]]]," announcement-link test-toggle"]]],
      ["element","action",["toggle"],[],["loc",[null,[2,3],[2,22]]]],
      ["content","label",["loc",[null,[4,2],[4,11]]]],
      ["block","if",[["get","showAnnouncement",["loc",[null,[7,6],[7,22]]]]],[],0,null,["loc",[null,[7,0],[16,7]]]]
    ],
    locals: [],
    templates: [child0]
  };
}())); });

define('forecast/templates/components/assign-ment', [], function(){ return Ember.HTMLBars.template((function() {
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 9,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      return morphs;
    },
    statements: [
      ["inline","assignment-frame",[],["onClick",["subexpr","@mut",[["get","onClick",["loc",[null,[1,27],[1,34]]]]],[],[]],"assignment",["subexpr","@mut",[["get","assignment",["loc",[null,[2,30],[2,40]]]]],[],[]],"dayWidth",["subexpr","@mut",[["get","dayWidth",["loc",[null,[3,28],[3,36]]]]],[],[]],"timelineStartDate",["subexpr","@mut",[["get","timelineStartDate",["loc",[null,[4,37],[4,54]]]]],[],[]],"isActive",["subexpr","@mut",[["get","isActive",["loc",[null,[5,28],[5,36]]]]],[],[]],"onMoved",["subexpr","@mut",[["get","onMoved",["loc",[null,[6,27],[6,34]]]]],[],[]],"onSplit",["subexpr","@mut",[["get","onSplit",["loc",[null,[7,27],[7,34]]]]],[],[]],"editable",["subexpr","@mut",[["get","editable",["loc",[null,[8,28],[8,36]]]]],[],[]]],["loc",[null,[1,0],[8,38]]]]
    ],
    locals: [],
    templates: []
  };
}())); });

define('forecast/templates/components/assignment-frame', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 2,
            "column": 2
          },
          "end": {
            "line": 4,
            "column": 2
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("    ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("span");
        dom.setAttribute(el1,"class","icon");
        dom.setAttribute(el1,"data-icon","loader");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }());
  var child1 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 4
            },
            "end": {
              "line": 9,
              "column": 4
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
          return morphs;
        },
        statements: [
          ["content","totalAllocation",["loc",[null,[8,12],[8,31]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.3.0",
            "loc": {
              "source": null,
              "start": {
                "line": 12,
                "column": 6
              },
              "end": {
                "line": 14,
                "column": 6
              }
            }
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("i");
            dom.setAttribute(el1,"class","icon");
            dom.setAttribute(el1,"data-icon","notes-white");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 11,
              "column": 4
            },
            "end": {
              "line": 15,
              "column": 4
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","tool-tip",[],["text",["subexpr","parse-markdown",[["get","assignment.notes",["loc",[null,[12,39],[12,55]]]]],[],["loc",[null,[12,23],[12,56]]]],"position","top","align","left"],0,null,["loc",[null,[12,6],[14,19]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 4,
            "column": 2
          },
          "end": {
            "line": 16,
            "column": 2
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("    ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
        morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
        morphs[2] = dom.createMorphAt(fragment,5,5,contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["content","label",["loc",[null,[5,4],[5,13]]]],
        ["block","if",[["get","showTotalAllocation",["loc",[null,[7,10],[7,29]]]]],[],0,null,["loc",[null,[7,4],[9,11]]]],
        ["block","if",[["get","assignment.notes",["loc",[null,[11,10],[11,26]]]]],[],1,null,["loc",[null,[11,4],[15,11]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }());
  var child2 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 19,
            "column": 0
          },
          "end": {
            "line": 26,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
        return morphs;
      },
      statements: [
        ["inline","split-overlay",[],["splitDate",["subexpr","@mut",[["get","assignment.splitDate",["loc",[null,[20,28],[20,48]]]]],[],[]],"classNames","split-line gtm-split-assignment","title","Split this assignment","dayWidth",["subexpr","@mut",[["get","dayWidth",["loc",[null,[23,27],[23,35]]]]],[],[]],"timelineStartDate",["subexpr","@mut",[["get","startDate",["loc",[null,[24,36],[24,45]]]]],[],[]],"onClick",["subexpr","action",[["get","onSplit",["loc",[null,[25,34],[25,41]]]],["get","assignment",["loc",[null,[25,42],[25,52]]]]],[],["loc",[null,[25,26],[25,53]]]]],["loc",[null,[20,2],[25,55]]]]
      ],
      locals: [],
      templates: []
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "multiple-nodes",
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 27,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createElement("span");
      dom.setAttribute(el1,"class","assignment-label");
      var el2 = dom.createTextNode("\n");
      dom.appendChild(el1, el2);
      var el2 = dom.createComment("");
      dom.appendChild(el1, el2);
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n\n");
      dom.appendChild(el0, el1);
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(2);
      morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);
      morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
      dom.insertBoundary(fragment, null);
      return morphs;
    },
    statements: [
      ["block","if",[["get","assignment.isNew",["loc",[null,[2,8],[2,24]]]]],[],0,1,["loc",[null,[2,2],[16,9]]]],
      ["block","if",[["get","editable",["loc",[null,[19,6],[19,14]]]]],[],2,null,["loc",[null,[19,0],[26,7]]]]
    ],
    locals: [],
    templates: [child0, child1, child2]
  };
}())); });

define('forecast/templates/components/color-select', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 2
            },
            "end": {
              "line": 4,
              "column": 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("hr");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.3.0",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 2
              },
              "end": {
                "line": 9,
                "column": 2
              }
            }
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(3);
            morphs[0] = dom.createAttrMorph(element1, 'class');
            morphs[1] = dom.createElementMorph(element1);
            morphs[2] = dom.createMorphAt(element1,1,1);
            return morphs;
          },
          statements: [
            ["attribute","class",["concat",["color-option ",["get","color.name",["loc",[null,[5,29],[5,39]]]]]]],
            ["element","action",["clickItem",["get","color",["loc",[null,[6,28],[6,33]]]]],[],["loc",[null,[6,7],[6,35]]]],
            ["content","color.label",["loc",[null,[7,6],[7,21]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.3.0",
            "loc": {
              "source": null,
              "start": {
                "line": 9,
                "column": 2
              },
              "end": {
                "line": 11,
                "column": 2
              }
            }
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n  ");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createMorphAt(element0,0,0);
            return morphs;
          },
          statements: [
            ["element","action",["clickItem",["get","color",["loc",[null,[10,28],[10,33]]]]],[],["loc",[null,[10,7],[10,35]]]],
            ["content","color.label",["loc",[null,[10,36],[10,51]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 2
            },
            "end": {
              "line": 11,
              "column": 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","if",[["get","color.name",["loc",[null,[4,12],[4,22]]]]],[],0,1,["loc",[null,[4,2],[11,2]]]]
        ],
        locals: [],
        templates: [child0, child1]
      };
    }());
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": [
            "wrong-type"
          ]
        },
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 1,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","if",[["get","color.divider",["loc",[null,[2,8],[2,21]]]]],[],0,1,["loc",[null,[2,2],[11,9]]]]
      ],
      locals: ["color"],
      templates: [child0, child1]
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 13,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      dom.insertBoundary(fragment, null);
      return morphs;
    },
    statements: [
      ["block","each",[["get","content",["loc",[null,[1,8],[1,15]]]]],["key","@index"],0,null,["loc",[null,[1,0],[12,9]]]]
    ],
    locals: [],
    templates: [child0]
  };
}())); });

define('forecast/templates/components/control-button', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("i");
        dom.setAttribute(el1,"class","icon");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [1]);
        var morphs = new Array(1);
        morphs[0] = dom.createAttrMorph(element0, 'data-icon');
        return morphs;
      },
      statements: [
        ["attribute","data-icon",["concat",[["get","buttonType",["loc",[null,[2,31],[2,41]]]]]]]
      ],
      locals: [],
      templates: []
    };
  }());
  var child1 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 4,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
        return morphs;
      },
      statements: [
        ["content","yield",["loc",[null,[5,2],[5,11]]]]
      ],
      locals: [],
      templates: []
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type",
          "multiple-nodes"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 7,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(2);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      morphs[1] = dom.createMorphAt(fragment,1,1,contextualElement);
      dom.insertBoundary(fragment, 0);
      dom.insertBoundary(fragment, null);
      return morphs;
    },
    statements: [
      ["block","if",[["get","buttonType",["loc",[null,[1,6],[1,16]]]]],[],0,null,["loc",[null,[1,0],[3,7]]]],
      ["block","if",[["get","hasBlock",["loc",[null,[4,6],[4,14]]]]],[],1,null,["loc",[null,[4,0],[6,7]]]]
    ],
    locals: [],
    templates: [child0, child1]
  };
}())); });

define('forecast/templates/components/date-select', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 14,
            "column": 8
          },
          "end": {
            "line": 16,
            "column": 8
          }
        }
      },
      isEmpty: false,
      arity: 1,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("          ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("th");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
        return morphs;
      },
      statements: [
        ["content","day",["loc",[null,[15,14],[15,21]]]]
      ],
      locals: ["day"],
      templates: []
    };
  }());
  var child1 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 22,
              "column": 12
            },
            "end": {
              "line": 30,
              "column": 12
            }
          }
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("              ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("td");
          var el2 = dom.createTextNode("\n                  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n              ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createElementMorph(element0);
          morphs[2] = dom.createMorphAt(dom.childAt(element0, [1]),0,0);
          return morphs;
        },
        statements: [
          ["attribute","class",["concat",[["subexpr","if",[["get","day.isSelected",["loc",[null,[23,30],[23,44]]]],"is-selected"],[],["loc",[null,[23,25],[23,60]]]],"\n                         ",["subexpr","if",[["get","day.isDisabled",["loc",[null,[24,30],[24,44]]]],"is-disabled"],[],["loc",[null,[24,25],[24,60]]]],"\n                         ",["subexpr","if",[["get","day.isNotInMonth",["loc",[null,[25,30],[25,46]]]],"is-not-in-month"],[],["loc",[null,[25,25],[25,66]]]],"\n                         ",["subexpr","if",[["get","day.isToday",["loc",[null,[26,30],[26,41]]]],"is-today"],[],["loc",[null,[26,25],[26,54]]]]]]],
          ["element","action",["setDate",["get","day",["loc",[null,[27,37],[27,40]]]]],["on","mouseDown"],["loc",[null,[27,18],[27,57]]]],
          ["content","day.date",["loc",[null,[28,24],[28,36]]]]
        ],
        locals: ["day"],
        templates: []
      };
    }());
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 20,
            "column": 8
          },
          "end": {
            "line": 32,
            "column": 8
          }
        }
      },
      isEmpty: false,
      arity: 1,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("          ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("tr");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("          ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
        return morphs;
      },
      statements: [
        ["block","each",[["get","days",["loc",[null,[22,20],[22,24]]]]],["key","@index"],0,null,["loc",[null,[22,12],[30,21]]]]
      ],
      locals: ["days"],
      templates: [child0]
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "triple-curlies"
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 37,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createElement("div");
      dom.setAttribute(el1,"class","date-select");
      var el2 = dom.createTextNode("\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createElement("div");
      dom.setAttribute(el2,"class","date-select-display");
      dom.setAttribute(el2,"tabindex","0");
      var el3 = dom.createTextNode("\n    ");
      dom.appendChild(el2, el3);
      var el3 = dom.createComment("");
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("\n  ");
      dom.appendChild(el2, el3);
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createElement("div");
      var el3 = dom.createTextNode("\n    ");
      dom.appendChild(el2, el3);
      var el3 = dom.createElement("div");
      dom.setAttribute(el3,"class","date-select-month-switcher");
      var el4 = dom.createTextNode("\n      ");
      dom.appendChild(el3, el4);
      var el4 = dom.createElement("div");
      dom.setAttribute(el4,"class","date-select-prev");
      var el5 = dom.createTextNode("←");
      dom.appendChild(el4, el5);
      dom.appendChild(el3, el4);
      var el4 = dom.createTextNode("\n      ");
      dom.appendChild(el3, el4);
      var el4 = dom.createElement("div");
      dom.setAttribute(el4,"class","date-select-next");
      var el5 = dom.createTextNode("→");
      dom.appendChild(el4, el5);
      dom.appendChild(el3, el4);
      var el4 = dom.createTextNode("\n      ");
      dom.appendChild(el3, el4);
      var el4 = dom.createElement("span");
      var el5 = dom.createComment("");
      dom.appendChild(el4, el5);
      dom.appendChild(el3, el4);
      var el4 = dom.createTextNode("\n    ");
      dom.appendChild(el3, el4);
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("\n    ");
      dom.appendChild(el2, el3);
      var el3 = dom.createElement("table");
      var el4 = dom.createTextNode("\n      ");
      dom.appendChild(el3, el4);
      var el4 = dom.createElement("thead");
      var el5 = dom.createTextNode("\n        ");
      dom.appendChild(el4, el5);
      var el5 = dom.createElement("tr");
      var el6 = dom.createTextNode("\n");
      dom.appendChild(el5, el6);
      var el6 = dom.createComment("");
      dom.appendChild(el5, el6);
      var el6 = dom.createTextNode("        ");
      dom.appendChild(el5, el6);
      dom.appendChild(el4, el5);
      var el5 = dom.createTextNode("\n      ");
      dom.appendChild(el4, el5);
      dom.appendChild(el3, el4);
      var el4 = dom.createTextNode("\n      ");
      dom.appendChild(el3, el4);
      var el4 = dom.createElement("tbody");
      var el5 = dom.createTextNode("\n");
      dom.appendChild(el4, el5);
      var el5 = dom.createComment("");
      dom.appendChild(el4, el5);
      var el5 = dom.createTextNode("      ");
      dom.appendChild(el4, el5);
      dom.appendChild(el3, el4);
      var el4 = dom.createTextNode("\n    ");
      dom.appendChild(el3, el4);
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("\n  ");
      dom.appendChild(el2, el3);
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n");
      dom.appendChild(el1, el2);
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var element1 = dom.childAt(fragment, [0]);
      var element2 = dom.childAt(element1, [3]);
      var element3 = dom.childAt(element2, [1]);
      var element4 = dom.childAt(element3, [1]);
      var element5 = dom.childAt(element3, [3]);
      var element6 = dom.childAt(element3, [5]);
      var element7 = dom.childAt(element2, [3]);
      var morphs = new Array(8);
      morphs[0] = dom.createMorphAt(dom.childAt(element1, [1]),1,1);
      morphs[1] = dom.createAttrMorph(element2, 'class');
      morphs[2] = dom.createElementMorph(element4);
      morphs[3] = dom.createElementMorph(element5);
      morphs[4] = dom.createElementMorph(element6);
      morphs[5] = dom.createMorphAt(element6,0,0);
      morphs[6] = dom.createMorphAt(dom.childAt(element7, [1, 1]),1,1);
      morphs[7] = dom.createMorphAt(dom.childAt(element7, [3]),1,1);
      return morphs;
    },
    statements: [
      ["content","dateDisplay",["loc",[null,[3,4],[3,19]]]],
      ["attribute","class",["concat",["date-select-days ",["subexpr","unless",[["get","isOpen",["loc",[null,[5,40],[5,46]]]],"hide"],[],["loc",[null,[5,31],[5,55]]]]]]],
      ["element","action",["prevMonth"],["on","mouseDown","bubbles","false"],["loc",[null,[7,36],[7,89]]]],
      ["element","action",["nextMonth"],["on","mouseDown","bubbles","false"],["loc",[null,[8,36],[8,89]]]],
      ["element","action",["thisMonth"],["on","mouseDown","bubbles",false],["loc",[null,[9,12],[9,63]]]],
      ["content","monthDisplay",["loc",[null,[9,64],[9,80]]]],
      ["block","each",[["get","headerDays",["loc",[null,[14,16],[14,26]]]]],["key","@index"],0,null,["loc",[null,[14,8],[16,17]]]],
      ["block","each",[["get","weeks",["loc",[null,[20,16],[20,21]]]]],["key","@index"],1,null,["loc",[null,[20,8],[32,17]]]]
    ],
    locals: [],
    templates: [child0, child1]
  };
}())); });

define('forecast/templates/components/deferred-row', [], function(){ return Ember.HTMLBars.template((function() {
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 2,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      return morphs;
    },
    statements: [
      ["inline","yield",[["get","isSetup",["loc",[null,[1,8],[1,15]]]]],[],["loc",[null,[1,0],[1,17]]]]
    ],
    locals: [],
    templates: []
  };
}())); });

define('forecast/templates/components/drop-down', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 4,
            "column": 2
          },
          "end": {
            "line": 6,
            "column": 2
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("    ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
        return morphs;
      },
      statements: [
        ["inline","partial",[["get","buttonTemplate",["loc",[null,[5,14],[5,28]]]]],[],["loc",[null,[5,4],[5,30]]]]
      ],
      locals: [],
      templates: []
    };
  }());
  var child1 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 6,
            "column": 2
          },
          "end": {
            "line": 8,
            "column": 2
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("    Actions");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("i");
        dom.setAttribute(el1,"class","icon");
        dom.setAttribute(el1,"data-icon","arrow-down");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "multiple-nodes"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 13,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createElement("a");
      dom.setAttribute(el1,"href","#");
      var el2 = dom.createTextNode("\n");
      dom.appendChild(el1, el2);
      var el2 = dom.createComment("");
      dom.appendChild(el1, el2);
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      var el1 = dom.createElement("div");
      dom.setAttribute(el1,"class","dropdown");
      var el2 = dom.createTextNode("\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createComment("");
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n");
      dom.appendChild(el1, el2);
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var element0 = dom.childAt(fragment, [0]);
      var element1 = dom.childAt(fragment, [2]);
      var morphs = new Array(5);
      morphs[0] = dom.createAttrMorph(element0, 'class');
      morphs[1] = dom.createElementMorph(element0);
      morphs[2] = dom.createMorphAt(element0,1,1);
      morphs[3] = dom.createAttrMorph(element1, 'style');
      morphs[4] = dom.createMorphAt(element1,1,1);
      return morphs;
    },
    statements: [
      ["attribute","class",["concat",["dropdown-link ",["subexpr","if",[["get","isShowing",["loc",[null,[2,29],[2,38]]]],"is-active"],[],["loc",[null,[2,24],[2,52]]]]]]],
      ["element","action",["toggleDropdown"],[],["loc",[null,[3,3],[3,30]]]],
      ["block","if",[["get","buttonTemplate",["loc",[null,[4,8],[4,22]]]]],[],0,1,["loc",[null,[4,2],[8,9]]]],
      ["attribute","style",["get","dropdownStyle",["loc",[null,[10,30],[10,43]]]]],
      ["content","yield",["loc",[null,[11,2],[11,11]]]]
    ],
    locals: [],
    templates: [child0, child1]
  };
}())); });

define('forecast/templates/components/fc-divider', [], function(){ return Ember.HTMLBars.template((function() {
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 2,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      return morphs;
    },
    statements: [
      ["content","label",["loc",[null,[1,0],[1,9]]]]
    ],
    locals: [],
    templates: []
  };
}())); });

define('forecast/templates/components/fc-grouped-select', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.3.0",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 6
              },
              "end": {
                "line": 9,
                "column": 6
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("option");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(3);
            morphs[0] = dom.createAttrMorph(element0, 'value');
            morphs[1] = dom.createAttrMorph(element0, 'selected');
            morphs[2] = dom.createMorphAt(element0,1,1);
            return morphs;
          },
          statements: [
            ["attribute","value",["concat",[["get","option.value",["loc",[null,[6,25],[6,37]]]]]]],
            ["attribute","selected",["get","option.isSelected",["loc",[null,[6,52],[6,69]]]]],
            ["content","option.label",["loc",[null,[7,10],[7,26]]]]
          ],
          locals: ["option"],
          templates: []
        };
      }());
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 2
            },
            "end": {
              "line": 11,
              "column": 2
            }
          }
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("optgroup");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element1, 'label');
          morphs[1] = dom.createMorphAt(element1,1,1);
          return morphs;
        },
        statements: [
          ["attribute","label",["concat",[["get","group.label",["loc",[null,[4,23],[4,34]]]]]]],
          ["block","each",[["get","group.options",["loc",[null,[5,14],[5,27]]]]],[],0,null,["loc",[null,[5,6],[9,15]]]]
        ],
        locals: ["group"],
        templates: [child0]
      };
    }());
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": [
            "wrong-type",
            "multiple-nodes"
          ]
        },
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
        morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["content","yield",["loc",[null,[2,2],[2,11]]]],
        ["block","each",[["get","groups",["loc",[null,[3,10],[3,16]]]]],["key","@index"],0,null,["loc",[null,[3,2],[11,11]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }());
  var child1 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 12,
            "column": 0
          },
          "end": {
            "line": 14,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
        return morphs;
      },
      statements: [
        ["content","yield",["loc",[null,[13,2],[13,11]]]]
      ],
      locals: [],
      templates: []
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 15,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      dom.insertBoundary(fragment, null);
      return morphs;
    },
    statements: [
      ["block","if",[["get","isSetup",["loc",[null,[1,6],[1,13]]]]],[],0,1,["loc",[null,[1,0],[14,7]]]]
    ],
    locals: [],
    templates: [child0, child1]
  };
}())); });

define('forecast/templates/components/fc-option', [], function(){ return Ember.HTMLBars.template((function() {
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 2,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      return morphs;
    },
    statements: [
      ["content","label",["loc",[null,[1,0],[1,9]]]]
    ],
    locals: [],
    templates: []
  };
}())); });

define('forecast/templates/components/fc-prompt', [], function(){ return Ember.HTMLBars.template((function() {
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 2,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      return morphs;
    },
    statements: [
      ["content","label",["loc",[null,[1,0],[1,9]]]]
    ],
    locals: [],
    templates: []
  };
}())); });

define('forecast/templates/components/fc-select', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 2
            },
            "end": {
              "line": 7,
              "column": 2
            }
          }
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("option");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element0, 'value');
          morphs[1] = dom.createAttrMorph(element0, 'selected');
          morphs[2] = dom.createMorphAt(element0,1,1);
          return morphs;
        },
        statements: [
          ["attribute","value",["concat",[["get","option.value",["loc",[null,[4,21],[4,33]]]]]]],
          ["attribute","selected",["get","option.isSelected",["loc",[null,[4,48],[4,65]]]]],
          ["content","option.label",["loc",[null,[5,6],[5,22]]]]
        ],
        locals: ["option"],
        templates: []
      };
    }());
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": [
            "wrong-type",
            "multiple-nodes"
          ]
        },
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
        morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["content","yield",["loc",[null,[2,2],[2,11]]]],
        ["block","each",[["get","options",["loc",[null,[3,10],[3,17]]]]],["key","value"],0,null,["loc",[null,[3,2],[7,11]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }());
  var child1 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 8,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
        return morphs;
      },
      statements: [
        ["content","yield",["loc",[null,[9,2],[9,11]]]]
      ],
      locals: [],
      templates: []
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 11,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      dom.insertBoundary(fragment, null);
      return morphs;
    },
    statements: [
      ["block","if",[["get","isSetup",["loc",[null,[1,6],[1,13]]]]],[],0,1,["loc",[null,[1,0],[10,7]]]]
    ],
    locals: [],
    templates: [child0, child1]
  };
}())); });

define('forecast/templates/components/flash-notification', [], function(){ return Ember.HTMLBars.template((function() {
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 2,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      return morphs;
    },
    statements: [
      ["content","text",["loc",[null,[1,0],[1,8]]]]
    ],
    locals: [],
    templates: []
  };
}())); });

define('forecast/templates/components/form-field', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 3,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("span");
        dom.setAttribute(el1,"class","error-flag");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
        return morphs;
      },
      statements: [
        ["content","errorFlag",["loc",[null,[4,27],[4,40]]]]
      ],
      locals: [],
      templates: []
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "multiple-nodes",
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 6,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createElement("label");
      var el2 = dom.createComment("");
      dom.appendChild(el1, el2);
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(3);
      morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),0,0);
      morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
      morphs[2] = dom.createMorphAt(fragment,4,4,contextualElement);
      dom.insertBoundary(fragment, null);
      return morphs;
    },
    statements: [
      ["content","formattedLabel",["loc",[null,[1,7],[1,25]]]],
      ["content","yield",["loc",[null,[2,0],[2,9]]]],
      ["block","if",[["get","errorFlag",["loc",[null,[3,6],[3,15]]]]],[],0,null,["loc",[null,[3,0],[5,7]]]]
    ],
    locals: [],
    templates: [child0]
  };
}())); });

define('forecast/templates/components/harvest-link-message', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 4
            },
            "end": {
              "line": 6,
              "column": 134
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Learn more");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","linked-to-harvest-message");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("i");
        dom.setAttribute(el2,"class","icon");
        dom.setAttribute(el2,"data-icon","harvest");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    –\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [1]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(element0,3,3);
        morphs[1] = dom.createMorphAt(element0,5,5);
        return morphs;
      },
      statements: [
        ["content","yield",["loc",[null,[4,4],[4,13]]]],
        ["block","external-link",[],["href","http://support.forecastapp.com/article/50-what-is-the-integration-between-forecast-and-harvest"],0,null,["loc",[null,[6,4],[6,152]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 9,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      dom.insertBoundary(fragment, null);
      return morphs;
    },
    statements: [
      ["block","if",[["get","model.isLinkedToHarvest",["loc",[null,[1,6],[1,29]]]]],[],0,null,["loc",[null,[1,0],[8,7]]]]
    ],
    locals: [],
    templates: [child0]
  };
}())); });

define('forecast/templates/components/last-updated', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 3,
            "column": 2
          },
          "end": {
            "line": 5,
            "column": 2
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("    by ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
        return morphs;
      },
      statements: [
        ["content","updated_by.name",["loc",[null,[4,7],[4,26]]]]
      ],
      locals: [],
      templates: []
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "triple-curlies"
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 7,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createElement("div");
      dom.setAttribute(el1,"class","updated-at hide-from-fullstory");
      var el2 = dom.createTextNode("\n  Updated ");
      dom.appendChild(el1, el2);
      var el2 = dom.createComment("");
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode(" ago\n");
      dom.appendChild(el1, el2);
      var el2 = dom.createComment("");
      dom.appendChild(el1, el2);
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var element0 = dom.childAt(fragment, [0]);
      var morphs = new Array(2);
      morphs[0] = dom.createMorphAt(element0,1,1);
      morphs[1] = dom.createMorphAt(element0,3,3);
      return morphs;
    },
    statements: [
      ["inline","time-ago",[["get","updated_at",["loc",[null,[2,21],[2,31]]]]],["format","long"],["loc",[null,[2,10],[2,47]]]],
      ["block","if",[["get","updated_by",["loc",[null,[3,8],[3,18]]]]],[],0,null,["loc",[null,[3,2],[5,9]]]]
    ],
    locals: [],
    templates: [child0]
  };
}())); });

define('forecast/templates/components/list-select', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 2
            },
            "end": {
              "line": 4,
              "column": 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("hr");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 2
            },
            "end": {
              "line": 8,
              "column": 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          dom.setAttribute(el1,"href","javascript:void(0);");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createElementMorph(element0);
          morphs[1] = dom.createMorphAt(element0,1,1);
          return morphs;
        },
        statements: [
          ["element","action",["clickItem",["get","option",["loc",[null,[5,55],[5,61]]]]],[],["loc",[null,[5,34],[5,63]]]],
          ["content","option.name",["loc",[null,[6,6],[6,21]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": [
            "wrong-type"
          ]
        },
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 1,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","if",[["get","option.divider",["loc",[null,[2,8],[2,22]]]]],[],0,1,["loc",[null,[2,2],[8,9]]]]
      ],
      locals: ["option"],
      templates: [child0, child1]
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 10,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      dom.insertBoundary(fragment, null);
      return morphs;
    },
    statements: [
      ["block","each",[["get","content",["loc",[null,[1,8],[1,15]]]]],["key","name"],0,null,["loc",[null,[1,0],[9,9]]]]
    ],
    locals: [],
    templates: [child0]
  };
}())); });

define('forecast/templates/components/mile-stone', [], function(){ return Ember.HTMLBars.template((function() {
  return {
    meta: {
      "fragmentReason": {
        "name": "triple-curlies"
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 2,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createElement("span");
      var el2 = dom.createComment("");
      dom.appendChild(el1, el2);
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var element0 = dom.childAt(fragment, [0]);
      var morphs = new Array(2);
      morphs[0] = dom.createAttrMorph(element0, 'title');
      morphs[1] = dom.createMorphAt(element0,0,0);
      return morphs;
    },
    statements: [
      ["attribute","title",["concat",[["get","milestone.name",["loc",[null,[1,15],[1,29]]]]]]],
      ["content","milestone.name",["loc",[null,[1,33],[1,51]]]]
    ],
    locals: [],
    templates: []
  };
}())); });

define('forecast/templates/components/milestone-overlay', [], function(){ return Ember.HTMLBars.template((function() {
  return {
    meta: {
      "fragmentReason": false,
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 2,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createElement("span");
      var el2 = dom.createTextNode("Add Milestone");
      dom.appendChild(el1, el2);
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes() { return []; },
    statements: [

    ],
    locals: [],
    templates: []
  };
}())); });

define('forecast/templates/components/modal-overlay', [], function(){ return Ember.HTMLBars.template((function() {
  return {
    meta: {
      "fragmentReason": {
        "name": "triple-curlies"
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 4,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createElement("div");
      dom.setAttribute(el1,"tabindex","0");
      var el2 = dom.createTextNode("\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createComment("");
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n");
      dom.appendChild(el1, el2);
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var element0 = dom.childAt(fragment, [0]);
      var morphs = new Array(2);
      morphs[0] = dom.createAttrMorph(element0, 'class');
      morphs[1] = dom.createMorphAt(element0,1,1);
      return morphs;
    },
    statements: [
      ["attribute","class",["concat",["modal ",["get","modalClass",["loc",[null,[1,20],[1,30]]]]]]],
      ["content","yield",["loc",[null,[2,2],[2,11]]]]
    ],
    locals: [],
    templates: []
  };
}())); });

define('forecast/templates/components/person-info', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 3,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("span");
        dom.setAttribute(el1,"class","teams");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
        return morphs;
      },
      statements: [
        ["inline","sorted-list",[["get","person.teams",["loc",[null,[4,36],[4,48]]]]],[],["loc",[null,[4,22],[4,50]]]]
      ],
      locals: [],
      templates: []
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "multiple-nodes",
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 7,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createElement("img");
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      var el1 = dom.createElement("h3");
      var el2 = dom.createComment("");
      dom.appendChild(el1, el2);
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      var el1 = dom.createElement("i");
      dom.setAttribute(el1,"class","icon row-expand-icon");
      dom.setAttribute(el1,"data-icon","arrow-down");
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var element0 = dom.childAt(fragment, [0]);
      var morphs = new Array(4);
      morphs[0] = dom.createAttrMorph(element0, 'src');
      morphs[1] = dom.createAttrMorph(element0, 'alt');
      morphs[2] = dom.createMorphAt(dom.childAt(fragment, [2]),0,0);
      morphs[3] = dom.createMorphAt(fragment,4,4,contextualElement);
      return morphs;
    },
    statements: [
      ["attribute","src",["concat",[["get","person.avatar_url",["loc",[null,[1,12],[1,29]]]]]]],
      ["attribute","alt",["concat",[["get","person.name",["loc",[null,[1,40],[1,51]]]]]]],
      ["content","person.name",["loc",[null,[2,4],[2,19]]]],
      ["block","if",[["get","person.teams.length",["loc",[null,[3,6],[3,25]]]]],[],0,null,["loc",[null,[3,0],[5,7]]]]
    ],
    locals: [],
    templates: [child0]
  };
}())); });

define('forecast/templates/components/person-project-info', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 4
            },
            "end": {
              "line": 10,
              "column": 4
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","client-name");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","project-name");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(fragment, [3]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element0, 'title');
          morphs[1] = dom.createMorphAt(element0,1,1);
          morphs[2] = dom.createAttrMorph(element1, 'title');
          morphs[3] = dom.createMorphAt(element1,1,1);
          return morphs;
        },
        statements: [
          ["attribute","title",["concat",[["get","project.client.name",["loc",[null,[4,41],[4,60]]]]]]],
          ["content","project.client.name",["loc",[null,[5,8],[5,31]]]],
          ["attribute","title",["concat",[["get","project.nameWithCode",["loc",[null,[7,42],[7,62]]]]]]],
          ["content","project.nameWithCode",["loc",[null,[8,8],[8,32]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 10,
              "column": 4
            },
            "end": {
              "line": 14,
              "column": 4
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","project-name time-off-project-name");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
          return morphs;
        },
        statements: [
          ["content","project.nameWithCode",["loc",[null,[12,8],[12,32]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 2,
            "column": 2
          },
          "end": {
            "line": 15,
            "column": 2
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","if",[["get","project.isNotTimeOff",["loc",[null,[3,10],[3,30]]]]],[],0,1,["loc",[null,[3,4],[14,11]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "triple-curlies"
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 19,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createElement("div");
      dom.setAttribute(el1,"class","row-info");
      var el2 = dom.createTextNode("\n");
      dom.appendChild(el1, el2);
      var el2 = dom.createComment("");
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createComment("");
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n");
      dom.appendChild(el1, el2);
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var element2 = dom.childAt(fragment, [0]);
      var morphs = new Array(2);
      morphs[0] = dom.createMorphAt(element2,1,1);
      morphs[1] = dom.createMorphAt(element2,3,3);
      return morphs;
    },
    statements: [
      ["block","link-to",["project",["get","project",["loc",[null,[2,23],[2,30]]]]],["class","child-row-name"],0,null,["loc",[null,[2,2],[15,14]]]],
      ["inline","color-block",[],["color",["subexpr","@mut",[["get","project.color",["loc",[null,[16,22],[16,35]]]]],[],[]],"labels",["subexpr","@mut",[["get","account.colorLabels",["loc",[null,[17,23],[17,42]]]]],[],[]]],["loc",[null,[16,2],[17,44]]]]
    ],
    locals: [],
    templates: [child0]
  };
}())); });

define('forecast/templates/components/person-project-timeline', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 2
            },
            "end": {
              "line": 12,
              "column": 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","stretchable-overlay",[],["classNames","add-assignment","color",["subexpr","@mut",[["get","project.color",["loc",[null,[4,32],[4,45]]]]],[],[]],"blockedTimeframes",["subexpr","@mut",[["get","blockedTimeframes",["loc",[null,[5,44],[5,61]]]]],[],[]],"dayWidth",["subexpr","@mut",[["get","schedProps.dayWidth",["loc",[null,[6,35],[6,54]]]]],[],[]],"timelineStartDate",["subexpr","@mut",[["get","schedProps.startDate",["loc",[null,[7,44],[7,64]]]]],[],[]],"leftOffset",["subexpr","@mut",[["get","schedProps.rowHeaderWidth",["loc",[null,[8,37],[8,62]]]]],[],[]],"onSelect",["subexpr","action",[["get","createAssignmentForProject",["loc",[null,[9,43],[9,69]]]]],[],["loc",[null,[9,35],[9,70]]]],"title","Add Assignment","for",["subexpr","@mut",[["get","project",["loc",[null,[11,30],[11,37]]]]],[],[]]],["loc",[null,[3,4],[11,39]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": [
            "wrong-type"
          ]
        },
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 13,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","unless",[["get","project.archived",["loc",[null,[2,12],[2,28]]]]],[],0,null,["loc",[null,[2,2],[12,13]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }());
  var child1 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 15,
            "column": 0
          },
          "end": {
            "line": 23,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 1,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
        return morphs;
      },
      statements: [
        ["inline","assign-ment",[],["assignment",["subexpr","@mut",[["get","assignment",["loc",[null,[16,27],[16,37]]]]],[],[]],"activeAssignment",["subexpr","@mut",[["get","activeAssignmentController.model",["loc",[null,[17,33],[17,65]]]]],[],[]],"dayWidth",["subexpr","@mut",[["get","schedProps.dayWidth",["loc",[null,[18,25],[18,44]]]]],[],[]],"timelineStartDate",["subexpr","@mut",[["get","schedProps.startDate",["loc",[null,[19,34],[19,54]]]]],[],[]],"onClick",["subexpr","action",[["get","editAssignment",["loc",[null,[20,32],[20,46]]]]],[],["loc",[null,[20,24],[20,47]]]],"onMoved",["subexpr","action",[["get","updateAssignment",["loc",[null,[21,32],[21,48]]]]],[],["loc",[null,[21,24],[21,49]]]],"onSplit",["subexpr","action",[["get","splitAssignment",["loc",[null,[22,32],[22,47]]]]],[],["loc",[null,[22,24],[22,48]]]]],["loc",[null,[16,2],[22,50]]]]
      ],
      locals: ["assignment"],
      templates: []
    };
  }());
  var child2 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 26,
              "column": 2
            },
            "end": {
              "line": 32,
              "column": 2
            }
          }
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","time-off-frame",[],["startDate",["subexpr","@mut",[["get","assignment.start_date",["loc",[null,[27,31],[27,52]]]]],[],[]],"endDate",["subexpr","@mut",[["get","assignment.end_date",["loc",[null,[28,29],[28,48]]]]],[],[]],"notes",["subexpr","@mut",[["get","assignment.notes",["loc",[null,[29,27],[29,43]]]]],[],[]],"dayWidth",["subexpr","@mut",[["get","schedProps.dayWidth",["loc",[null,[30,30],[30,49]]]]],[],[]],"timelineStartDate",["subexpr","@mut",[["get","schedProps.startDate",["loc",[null,[31,39],[31,59]]]]],[],[]]],["loc",[null,[27,4],[31,61]]]]
        ],
        locals: ["assignment"],
        templates: []
      };
    }());
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 25,
            "column": 0
          },
          "end": {
            "line": 33,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","each",[["get","person.cwtoAssignments",["loc",[null,[26,10],[26,32]]]]],["key","cid"],0,null,["loc",[null,[26,2],[32,11]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type",
          "multiple-nodes"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 34,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(3);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
      morphs[2] = dom.createMorphAt(fragment,4,4,contextualElement);
      dom.insertBoundary(fragment, 0);
      dom.insertBoundary(fragment, null);
      return morphs;
    },
    statements: [
      ["block","if",[["get","realtime.isAdmin",["loc",[null,[1,6],[1,22]]]]],[],0,null,["loc",[null,[1,0],[13,7]]]],
      ["block","each",[["get","assignments",["loc",[null,[15,8],[15,19]]]]],["key","cid"],1,null,["loc",[null,[15,0],[23,9]]]],
      ["block","if",[["get","project.isTimeOff",["loc",[null,[25,6],[25,23]]]]],[],2,null,["loc",[null,[25,0],[33,7]]]]
    ],
    locals: [],
    templates: [child0, child1, child2]
  };
}())); });

define('forecast/templates/components/person-project', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 2,
            "column": 0
          },
          "end": {
            "line": 13,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
        return morphs;
      },
      statements: [
        ["inline","person-project-timeline",[],["person",["subexpr","@mut",[["get","person",["loc",[null,[3,35],[3,41]]]]],[],[]],"project",["subexpr","@mut",[["get","project",["loc",[null,[4,36],[4,43]]]]],[],[]],"assignments",["subexpr","@mut",[["get","assignments",["loc",[null,[5,40],[5,51]]]]],[],[]],"blockedTimeframes",["subexpr","@mut",[["get","assignmentsWithCWTO",["loc",[null,[6,46],[6,65]]]]],[],[]],"activeAssignmentController",["subexpr","@mut",[["get","activeAssignmentController",["loc",[null,[7,55],[7,81]]]]],[],[]],"schedProps",["subexpr","@mut",[["get","schedProps",["loc",[null,[8,39],[8,49]]]]],[],[]],"createAssignmentForProject",["subexpr","action",[["get","createAssignmentForProject",["loc",[null,[9,63],[9,89]]]]],[],["loc",[null,[9,55],[9,90]]]],"editAssignment",["subexpr","action",[["get","editAssignment",["loc",[null,[10,51],[10,65]]]]],[],["loc",[null,[10,43],[10,66]]]],"updateAssignment",["subexpr","action",[["get","updateAssignment",["loc",[null,[11,53],[11,69]]]]],[],["loc",[null,[11,45],[11,70]]]],"splitAssignment",["subexpr","action",[["get","splitAssignment",["loc",[null,[12,52],[12,67]]]]],[],["loc",[null,[12,44],[12,68]]]]],["loc",[null,[3,2],[12,70]]]]
      ],
      locals: [],
      templates: []
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type",
          "multiple-nodes"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 14,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(2);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
      dom.insertBoundary(fragment, 0);
      dom.insertBoundary(fragment, null);
      return morphs;
    },
    statements: [
      ["inline","person-project-info",[],["project",["subexpr","@mut",[["get","project",["loc",[null,[1,30],[1,37]]]]],[],[]],"account",["subexpr","@mut",[["get","account",["loc",[null,[1,46],[1,53]]]]],[],[]]],["loc",[null,[1,0],[1,55]]]],
      ["block","if",[["get","isSetup",["loc",[null,[2,6],[2,13]]]]],[],0,null,["loc",[null,[2,0],[13,7]]]]
    ],
    locals: [],
    templates: [child0]
  };
}())); });

define('forecast/templates/components/person-timeline', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 2,
            "column": 2
          },
          "end": {
            "line": 11,
            "column": 2
          }
        }
      },
      isEmpty: false,
      arity: 1,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("    ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
        return morphs;
      },
      statements: [
        ["inline","allocated-frame",[],["classNames","allocation-total","startDate",["subexpr","@mut",[["get","frame.start_date",["loc",[null,[4,32],[4,48]]]]],[],[]],"endDate",["subexpr","@mut",[["get","frame.end_date",["loc",[null,[5,30],[5,44]]]]],[],[]],"allocation",["subexpr","@mut",[["get","frame.allocation",["loc",[null,[6,33],[6,49]]]]],[],[]],"isTimeOff",["subexpr","@mut",[["get","frame.isTimeOff",["loc",[null,[7,32],[7,47]]]]],[],[]],"maxAllocationPerDay",["subexpr","@mut",[["get","person.maxAllocationPerDayOrDefault",["loc",[null,[8,42],[8,77]]]]],[],[]],"dayWidth",["subexpr","@mut",[["get","dayWidth",["loc",[null,[9,31],[9,39]]]]],[],[]],"timelineStartDate",["subexpr","@mut",[["get","startDate",["loc",[null,[10,40],[10,49]]]]],[],[]]],["loc",[null,[3,4],[10,51]]]]
      ],
      locals: ["frame"],
      templates: []
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "triple-curlies"
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 13,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createElement("div");
      dom.setAttribute(el1,"class","allocation-grid");
      var el2 = dom.createTextNode("\n");
      dom.appendChild(el1, el2);
      var el2 = dom.createComment("");
      dom.appendChild(el1, el2);
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);
      return morphs;
    },
    statements: [
      ["block","each",[["get","allocatedFrames",["loc",[null,[2,10],[2,25]]]]],["key","@index"],0,null,["loc",[null,[2,2],[11,11]]]]
    ],
    locals: [],
    templates: [child0]
  };
}())); });

define('forecast/templates/components/pressed-button', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 2
            },
            "end": {
              "line": 4,
              "column": 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","icon");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element0, 'data-icon');
          return morphs;
        },
        statements: [
          ["attribute","data-icon",["concat",[["get","buttonType",["loc",[null,[3,33],[3,43]]]]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": [
            "wrong-type"
          ]
        },
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","tool-tip",[],["text",["subexpr","@mut",[["get","tooltipText",["loc",[null,[2,19],[2,30]]]]],[],[]]],0,null,["loc",[null,[2,2],[4,15]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }());
  var child1 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 6,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
        return morphs;
      },
      statements: [
        ["content","yield",["loc",[null,[7,2],[7,11]]]]
      ],
      locals: [],
      templates: []
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type",
          "multiple-nodes"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 9,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(2);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      morphs[1] = dom.createMorphAt(fragment,1,1,contextualElement);
      dom.insertBoundary(fragment, 0);
      dom.insertBoundary(fragment, null);
      return morphs;
    },
    statements: [
      ["block","if",[["get","buttonType",["loc",[null,[1,6],[1,16]]]]],[],0,null,["loc",[null,[1,0],[5,7]]]],
      ["block","if",[["get","hasBlock",["loc",[null,[6,6],[6,14]]]]],[],1,null,["loc",[null,[6,0],[8,7]]]]
    ],
    locals: [],
    templates: [child0, child1]
  };
}())); });

define('forecast/templates/components/project-drawer', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 2,
            "column": 2
          },
          "end": {
            "line": 6,
            "column": 2
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("    ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("a");
        dom.setAttribute(el1,"class","drawer-harvest-icon");
        dom.setAttribute(el1,"target","_blank");
        var el2 = dom.createTextNode("\n      ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("i");
        dom.setAttribute(el2,"class","icon");
        dom.setAttribute(el2,"data-icon","harvest");
        dom.setAttribute(el2,"title","This project is linked to Harvest");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [1]);
        var morphs = new Array(1);
        morphs[0] = dom.createAttrMorph(element0, 'href');
        return morphs;
      },
      statements: [
        ["attribute","href",["concat",[["get","harvestLink",["loc",[null,[3,43],[3,54]]]]]]]
      ],
      locals: [],
      templates: []
    };
  }());
  var child1 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 7,
            "column": 2
          },
          "end": {
            "line": 11,
            "column": 2
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("    ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("span");
        dom.setAttribute(el1,"class","future-scheduled");
        var el2 = dom.createTextNode("\n      ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
        return morphs;
      },
      statements: [
        ["content","project.futureScheduledHoursTotal",["loc",[null,[9,6],[9,43]]]]
      ],
      locals: [],
      templates: []
    };
  }());
  var child2 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 12,
            "column": 2
          },
          "end": {
            "line": 16,
            "column": 2
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("    ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
        return morphs;
      },
      statements: [
        ["inline","remaining-budget",[],["budget",["subexpr","@mut",[["get","project.remaining_budget",["loc",[null,[13,30],[13,54]]]]],[],[]],"showHarvestLink",["subexpr","@mut",[["get","showHarvestLink",["loc",[null,[14,39],[14,54]]]]],[],[]],"harvestLink",["subexpr","@mut",[["get","harvestLink",["loc",[null,[15,35],[15,46]]]]],[],[]]],["loc",[null,[13,4],[15,48]]]]
      ],
      locals: [],
      templates: []
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "triple-curlies"
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 18,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createElement("div");
      dom.setAttribute(el1,"class","drawer-inner");
      var el2 = dom.createTextNode("\n");
      dom.appendChild(el1, el2);
      var el2 = dom.createComment("");
      dom.appendChild(el1, el2);
      var el2 = dom.createComment("");
      dom.appendChild(el1, el2);
      var el2 = dom.createComment("");
      dom.appendChild(el1, el2);
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var element1 = dom.childAt(fragment, [0]);
      var morphs = new Array(3);
      morphs[0] = dom.createMorphAt(element1,1,1);
      morphs[1] = dom.createMorphAt(element1,2,2);
      morphs[2] = dom.createMorphAt(element1,3,3);
      return morphs;
    },
    statements: [
      ["block","if",[["get","project.isLinkedToHarvest",["loc",[null,[2,8],[2,33]]]]],[],0,null,["loc",[null,[2,2],[6,9]]]],
      ["block","tool-tip",[],["text","Future scheduled hours from today","position","right","align","left"],1,null,["loc",[null,[7,2],[11,15]]]],
      ["block","if",[["get","showRemainingBudget",["loc",[null,[12,8],[12,27]]]]],[],2,null,["loc",[null,[12,2],[16,9]]]]
    ],
    locals: [],
    templates: [child0, child1, child2]
  };
}())); });

define('forecast/templates/components/project-info', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("span");
        dom.setAttribute(el1,"class","client-name test-client-name");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
        return morphs;
      },
      statements: [
        ["content","project.client.name",["loc",[null,[2,45],[2,68]]]]
      ],
      locals: [],
      templates: []
    };
  }());
  var child1 = (function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.3.0",
            "loc": {
              "source": null,
              "start": {
                "line": 9,
                "column": 4
              },
              "end": {
                "line": 13,
                "column": 4
              }
            }
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("i");
            dom.setAttribute(el1,"class","icon");
            dom.setAttribute(el1,"data-icon","notes");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 2
            },
            "end": {
              "line": 14,
              "column": 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","link-to",["project.edit",["get","project",["loc",[null,[9,30],[9,37]]]],["subexpr","query-params",[],["edit_notes",true],["loc",[null,[9,38],[9,68]]]]],["bubbles",["subexpr","@mut",[["get","isCollapsed",["loc",[null,[10,44],[10,55]]]]],[],[]],"class","row-notes-icon"],0,null,["loc",[null,[9,4],[13,16]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 7,
            "column": 0
          },
          "end": {
            "line": 15,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","tool-tip",[],["text",["subexpr","parse-markdown",[["get","project.notes",["loc",[null,[8,35],[8,48]]]]],[],["loc",[null,[8,19],[8,49]]]],"position","right","align","left"],0,null,["loc",[null,[8,2],[14,15]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type",
          "multiple-nodes"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 17,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      var el1 = dom.createElement("h3");
      var el2 = dom.createTextNode("\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createComment("");
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n");
      dom.appendChild(el1, el2);
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      var el1 = dom.createElement("i");
      dom.setAttribute(el1,"class","icon row-expand-icon");
      dom.setAttribute(el1,"data-icon","arrow-down");
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var element0 = dom.childAt(fragment, [1]);
      var morphs = new Array(4);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      morphs[1] = dom.createAttrMorph(element0, 'title');
      morphs[2] = dom.createMorphAt(element0,1,1);
      morphs[3] = dom.createMorphAt(fragment,3,3,contextualElement);
      dom.insertBoundary(fragment, 0);
      return morphs;
    },
    statements: [
      ["block","if",[["get","project.isNotTimeOff",["loc",[null,[1,6],[1,26]]]]],[],0,null,["loc",[null,[1,0],[3,7]]]],
      ["attribute","title",["concat",[["get","project.nameWithCode",["loc",[null,[4,13],[4,33]]]]]]],
      ["content","project.nameWithCode",["loc",[null,[5,2],[5,26]]]],
      ["block","if",[["get","project.notes",["loc",[null,[7,6],[7,19]]]]],[],1,null,["loc",[null,[7,0],[15,7]]]]
    ],
    locals: [],
    templates: [child0, child1]
  };
}())); });

define('forecast/templates/components/project-person-info', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 4
            },
            "end": {
              "line": 5,
              "column": 4
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","person-name");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
          return morphs;
        },
        statements: [
          ["content","person.name",["loc",[null,[4,32],[4,47]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 2,
            "column": 2
          },
          "end": {
            "line": 7,
            "column": 2
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("    ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("img");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        morphs[1] = dom.createAttrMorph(element0, 'src');
        morphs[2] = dom.createAttrMorph(element0, 'alt');
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["block","link-to",["person",["get","person",["loc",[null,[3,24],[3,30]]]]],["class","child-row-name"],0,null,["loc",[null,[3,4],[5,16]]]],
        ["attribute","src",["concat",[["get","person.avatar_url",["loc",[null,[6,16],[6,33]]]]]]],
        ["attribute","alt",["concat",[["get","person.name",["loc",[null,[6,44],[6,55]]]]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }());
  var child1 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 7,
            "column": 2
          },
          "end": {
            "line": 11,
            "column": 2
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("    ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("a");
        dom.setAttribute(el1,"href","");
        dom.setAttribute(el1,"class","child-row-name");
        var el2 = dom.createTextNode("\n      ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","person-name");
        var el3 = dom.createTextNode("Everyone");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }());
  var child2 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 14,
            "column": 0
          },
          "end": {
            "line": 18,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row-drawer");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","drawer-inner");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]),0,0);
        return morphs;
      },
      statements: [
        ["content","future_scheduled_hours",["loc",[null,[16,30],[16,56]]]]
      ],
      locals: [],
      templates: []
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "multiple-nodes",
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 19,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createElement("div");
      dom.setAttribute(el1,"class","row-info hide-from-fullstory");
      var el2 = dom.createTextNode("\n");
      dom.appendChild(el1, el2);
      var el2 = dom.createComment("");
      dom.appendChild(el1, el2);
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n\n");
      dom.appendChild(el0, el1);
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(2);
      morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);
      morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
      dom.insertBoundary(fragment, null);
      return morphs;
    },
    statements: [
      ["block","if",[["get","person",["loc",[null,[2,8],[2,14]]]]],[],0,1,["loc",[null,[2,2],[11,9]]]],
      ["block","if",[["get","showDrawer",["loc",[null,[14,6],[14,16]]]]],[],2,null,["loc",[null,[14,0],[18,7]]]]
    ],
    locals: [],
    templates: [child0, child1, child2]
  };
}())); });

define('forecast/templates/components/project-person-timeline', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 2
            },
            "end": {
              "line": 11,
              "column": 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","stretchable-overlay",[],["classNames","add-assignment","color",["subexpr","@mut",[["get","project.color",["loc",[null,[4,32],[4,45]]]]],[],[]],"blockedTimeframes",["subexpr","@mut",[["get","blockedTimeframes",["loc",[null,[5,44],[5,61]]]]],[],[]],"dayWidth",["subexpr","@mut",[["get","schedProps.dayWidth",["loc",[null,[6,35],[6,54]]]]],[],[]],"timelineStartDate",["subexpr","@mut",[["get","schedProps.startDate",["loc",[null,[7,44],[7,64]]]]],[],[]],"leftOffset",["subexpr","@mut",[["get","schedProps.rowHeaderWidth",["loc",[null,[8,37],[8,62]]]]],[],[]],"onSelect",["subexpr","action",[["get","createAssignmentForPerson",["loc",[null,[9,43],[9,68]]]]],[],["loc",[null,[9,35],[9,69]]]],"for",["subexpr","@mut",[["get","person",["loc",[null,[10,30],[10,36]]]]],[],[]]],["loc",[null,[3,4],[10,38]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": [
            "wrong-type"
          ]
        },
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","unless",[["get","person.archived",["loc",[null,[2,12],[2,27]]]]],[],0,null,["loc",[null,[2,2],[11,13]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }());
  var child1 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 14,
            "column": 0
          },
          "end": {
            "line": 22,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 1,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
        return morphs;
      },
      statements: [
        ["inline","assign-ment",[],["assignment",["subexpr","@mut",[["get","assignment",["loc",[null,[15,27],[15,37]]]]],[],[]],"activeAssignment",["subexpr","@mut",[["get","activeAssignment",["loc",[null,[16,33],[16,49]]]]],[],[]],"dayWidth",["subexpr","@mut",[["get","schedProps.dayWidth",["loc",[null,[17,25],[17,44]]]]],[],[]],"timelineStartDate",["subexpr","@mut",[["get","schedProps.startDate",["loc",[null,[18,34],[18,54]]]]],[],[]],"onClick",["subexpr","action",[["get","editAssignment",["loc",[null,[19,32],[19,46]]]]],[],["loc",[null,[19,24],[19,47]]]],"onMoved",["subexpr","action",[["get","updateAssignment",["loc",[null,[20,32],[20,48]]]]],[],["loc",[null,[20,24],[20,49]]]],"onSplit",["subexpr","action",[["get","splitAssignment",["loc",[null,[21,32],[21,47]]]]],[],["loc",[null,[21,24],[21,48]]]]],["loc",[null,[15,2],[21,50]]]]
      ],
      locals: ["assignment"],
      templates: []
    };
  }());
  var child2 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 25,
              "column": 2
            },
            "end": {
              "line": 31,
              "column": 2
            }
          }
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","time-off-frame",[],["startDate",["subexpr","@mut",[["get","assignment.start_date",["loc",[null,[26,31],[26,52]]]]],[],[]],"endDate",["subexpr","@mut",[["get","assignment.end_date",["loc",[null,[27,29],[27,48]]]]],[],[]],"notes",["subexpr","@mut",[["get","assignment.notes",["loc",[null,[28,27],[28,43]]]]],[],[]],"dayWidth",["subexpr","@mut",[["get","schedProps.dayWidth",["loc",[null,[29,30],[29,49]]]]],[],[]],"timelineStartDate",["subexpr","@mut",[["get","schedProps.startDate",["loc",[null,[30,39],[30,59]]]]],[],[]]],["loc",[null,[26,4],[30,61]]]]
        ],
        locals: ["assignment"],
        templates: []
      };
    }());
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 24,
            "column": 0
          },
          "end": {
            "line": 32,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","each",[["get","person.timeOffAssignments",["loc",[null,[25,10],[25,35]]]]],["key","cid"],0,null,["loc",[null,[25,2],[31,11]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }());
  var child3 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 34,
            "column": 0
          },
          "end": {
            "line": 40,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 1,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
        return morphs;
      },
      statements: [
        ["inline","time-off-frame",[],["startDate",["subexpr","@mut",[["get","assignment.start_date",["loc",[null,[35,29],[35,50]]]]],[],[]],"endDate",["subexpr","@mut",[["get","assignment.end_date",["loc",[null,[36,27],[36,46]]]]],[],[]],"notes",["subexpr","@mut",[["get","assignment.notes",["loc",[null,[37,25],[37,41]]]]],[],[]],"dayWidth",["subexpr","@mut",[["get","schedProps.dayWidth",["loc",[null,[38,28],[38,47]]]]],[],[]],"timelineStartDate",["subexpr","@mut",[["get","schedProps.startDate",["loc",[null,[39,37],[39,57]]]]],[],[]]],["loc",[null,[35,2],[39,59]]]]
      ],
      locals: ["assignment"],
      templates: []
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type",
          "multiple-nodes"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 41,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(4);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
      morphs[2] = dom.createMorphAt(fragment,4,4,contextualElement);
      morphs[3] = dom.createMorphAt(fragment,6,6,contextualElement);
      dom.insertBoundary(fragment, 0);
      dom.insertBoundary(fragment, null);
      return morphs;
    },
    statements: [
      ["block","if",[["get","realtime.isAdmin",["loc",[null,[1,6],[1,22]]]]],[],0,null,["loc",[null,[1,0],[12,7]]]],
      ["block","each",[["get","assignments",["loc",[null,[14,8],[14,19]]]]],["key","cid"],1,null,["loc",[null,[14,0],[22,9]]]],
      ["block","unless",[["get","project.isTimeOff",["loc",[null,[24,10],[24,27]]]]],[],2,null,["loc",[null,[24,0],[32,11]]]],
      ["block","each",[["get","person.cwtoAssignments",["loc",[null,[34,8],[34,30]]]]],["key","cid"],3,null,["loc",[null,[34,0],[40,9]]]]
    ],
    locals: [],
    templates: [child0, child1, child2, child3]
  };
}())); });

define('forecast/templates/components/project-person', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 4,
            "column": 0
          },
          "end": {
            "line": 15,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
        return morphs;
      },
      statements: [
        ["inline","project-person-timeline",[],["project",["subexpr","@mut",[["get","project",["loc",[null,[5,36],[5,43]]]]],[],[]],"person",["subexpr","@mut",[["get","person",["loc",[null,[6,35],[6,41]]]]],[],[]],"assignments",["subexpr","@mut",[["get","assignments",["loc",[null,[7,40],[7,51]]]]],[],[]],"blockedTimeframes",["subexpr","@mut",[["get","assignmentsWithTimeOff",["loc",[null,[8,46],[8,68]]]]],[],[]],"activeAssignment",["subexpr","@mut",[["get","activeAssignment",["loc",[null,[9,45],[9,61]]]]],[],[]],"schedProps",["subexpr","@mut",[["get","schedProps",["loc",[null,[10,39],[10,49]]]]],[],[]],"createAssignmentForPerson",["subexpr","action",[["get","createAssignmentForPerson",["loc",[null,[11,62],[11,87]]]]],[],["loc",[null,[11,54],[11,88]]]],"editAssignment",["subexpr","action",[["get","editAssignment",["loc",[null,[12,51],[12,65]]]]],[],["loc",[null,[12,43],[12,66]]]],"updateAssignment",["subexpr","action",[["get","updateAssignment",["loc",[null,[13,53],[13,69]]]]],[],["loc",[null,[13,45],[13,70]]]],"splitAssignment",["subexpr","action",[["get","splitAssignment",["loc",[null,[14,52],[14,67]]]]],[],["loc",[null,[14,44],[14,68]]]]],["loc",[null,[5,2],[14,70]]]]
      ],
      locals: [],
      templates: []
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type",
          "multiple-nodes"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 17,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(2);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
      dom.insertBoundary(fragment, 0);
      return morphs;
    },
    statements: [
      ["inline","project-person-info",[],["person",["subexpr","@mut",[["get","person",["loc",[null,[1,29],[1,35]]]]],[],[]],"future_scheduled_hours",["subexpr","@mut",[["get","future_scheduled_hours",["loc",[null,[2,45],[2,67]]]]],[],[]],"showDrawer",["subexpr","@mut",[["get","showDrawer",["loc",[null,[3,33],[3,43]]]]],[],[]]],["loc",[null,[1,0],[3,45]]]],
      ["block","if",[["get","isSetup",["loc",[null,[4,6],[4,13]]]]],[],0,null,["loc",[null,[4,0],[15,7]]]]
    ],
    locals: [],
    templates: [child0]
  };
}())); });

define('forecast/templates/components/project-timeline', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": [
            "wrong-type"
          ]
        },
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
        return morphs;
      },
      statements: [
        ["inline","milestone-overlay",[],["classNames","add-milestone","color",["subexpr","@mut",[["get","project.color",["loc",[null,[3,28],[3,41]]]]],[],[]],"blockedTimeframes",["subexpr","@mut",[["get","project.milestones",["loc",[null,[4,40],[4,58]]]]],[],[]],"dayWidth",["subexpr","@mut",[["get","dayWidth",["loc",[null,[5,31],[5,39]]]]],[],[]],"timelineStartDate",["subexpr","@mut",[["get","startDate",["loc",[null,[6,40],[6,49]]]]],[],[]],"leftOffset",["subexpr","@mut",[["get","rowHeaderWidth",["loc",[null,[7,33],[7,47]]]]],[],[]],"clickPress",["subexpr","action",[["get","createMilestoneForProject",["loc",[null,[8,41],[8,66]]]]],[],["loc",[null,[8,33],[8,67]]]]],["loc",[null,[2,2],[8,69]]]]
      ],
      locals: [],
      templates: []
    };
  }());
  var child1 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 11,
            "column": 0
          },
          "end": {
            "line": 18,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 1,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
        return morphs;
      },
      statements: [
        ["inline","mile-stone",[],["milestone",["subexpr","@mut",[["get","milestone",["loc",[null,[12,25],[12,34]]]]],[],[]],"dayWidth",["subexpr","@mut",[["get","dayWidth",["loc",[null,[13,24],[13,32]]]]],[],[]],"timelineStartDate",["subexpr","@mut",[["get","startDate",["loc",[null,[14,33],[14,42]]]]],[],[]],"activeMilestone",["subexpr","@mut",[["get","activeMilestone",["loc",[null,[15,31],[15,46]]]]],[],[]],"clickPress",["subexpr","action",[["get","editMilestone",["loc",[null,[16,34],[16,47]]]]],[],["loc",[null,[16,26],[16,48]]]],"moved",["subexpr","action",[["get","updateMilestone",["loc",[null,[17,29],[17,44]]]]],[],["loc",[null,[17,21],[17,45]]]]],["loc",[null,[12,2],[17,47]]]]
      ],
      locals: ["milestone"],
      templates: []
    };
  }());
  var child2 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 27,
            "column": 2
          },
          "end": {
            "line": 33,
            "column": 2
          }
        }
      },
      isEmpty: false,
      arity: 1,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("    ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
        return morphs;
      },
      statements: [
        ["inline","time-frame",[],["classNames","project-span project-assigned","startDate",["subexpr","@mut",[["get","frame.start_date",["loc",[null,[29,27],[29,43]]]]],[],[]],"endDate",["subexpr","@mut",[["get","frame.end_date",["loc",[null,[30,25],[30,39]]]]],[],[]],"dayWidth",["subexpr","@mut",[["get","dayWidth",["loc",[null,[31,26],[31,34]]]]],[],[]],"timelineStartDate",["subexpr","@mut",[["get","startDate",["loc",[null,[32,35],[32,44]]]]],[],[]]],["loc",[null,[28,4],[32,46]]]]
      ],
      locals: ["frame"],
      templates: []
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type",
          "multiple-nodes"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 35,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      var el1 = dom.createElement("div");
      var el2 = dom.createTextNode("\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createComment("");
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n\n");
      dom.appendChild(el1, el2);
      var el2 = dom.createComment("");
      dom.appendChild(el1, el2);
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var element0 = dom.childAt(fragment, [4]);
      var morphs = new Array(5);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
      morphs[2] = dom.createAttrMorph(element0, 'class');
      morphs[3] = dom.createMorphAt(element0,1,1);
      morphs[4] = dom.createMorphAt(element0,3,3);
      dom.insertBoundary(fragment, 0);
      return morphs;
    },
    statements: [
      ["block","if",[["get","realtime.isAdmin",["loc",[null,[1,6],[1,22]]]]],[],0,null,["loc",[null,[1,0],[9,7]]]],
      ["block","each",[["get","project.milestones",["loc",[null,[11,8],[11,26]]]]],["key","id"],1,null,["loc",[null,[11,0],[18,9]]]],
      ["attribute","class",["concat",["project-grid ",["get","project.color",["loc",[null,[20,27],[20,40]]]]]]],
      ["inline","time-frame",[],["classNames","project-span project-active","startDate",["subexpr","@mut",[["get","project.start_date",["loc",[null,[22,25],[22,43]]]]],[],[]],"endDate",["subexpr","@mut",[["get","project.end_date",["loc",[null,[23,23],[23,39]]]]],[],[]],"dayWidth",["subexpr","@mut",[["get","dayWidth",["loc",[null,[24,24],[24,32]]]]],[],[]],"timelineStartDate",["subexpr","@mut",[["get","startDate",["loc",[null,[25,33],[25,42]]]]],[],[]]],["loc",[null,[21,2],[25,44]]]],
      ["block","each",[["get","assignedDays",["loc",[null,[27,10],[27,22]]]]],["key","@index"],2,null,["loc",[null,[27,2],[33,11]]]]
    ],
    locals: [],
    templates: [child0, child1, child2]
  };
}())); });

define('forecast/templates/components/range-day', [], function(){ return Ember.HTMLBars.template((function() {
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 2,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      return morphs;
    },
    statements: [
      ["content","yield",["loc",[null,[1,0],[1,9]]]]
    ],
    locals: [],
    templates: []
  };
}())); });

define('forecast/templates/components/range-select', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 19,
            "column": 8
          },
          "end": {
            "line": 21,
            "column": 8
          }
        }
      },
      isEmpty: false,
      arity: 1,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("          ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("th");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
        return morphs;
      },
      statements: [
        ["content","day",["loc",[null,[20,14],[20,21]]]]
      ],
      locals: ["day"],
      templates: []
    };
  }());
  var child1 = (function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.3.0",
            "loc": {
              "source": null,
              "start": {
                "line": 28,
                "column": 14
              },
              "end": {
                "line": 33,
                "column": 14
              }
            }
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
            return morphs;
          },
          statements: [
            ["content","day.date",["loc",[null,[32,22],[32,34]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 27,
              "column": 12
            },
            "end": {
              "line": 34,
              "column": 12
            }
          }
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","range-day",[],["day",["subexpr","@mut",[["get","day",["loc",[null,[28,31],[28,34]]]]],[],[]],"setDate","setDate","setMaybeDate","setMaybeDate","resetMaybeDate","resetMaybeDate"],0,null,["loc",[null,[28,14],[33,28]]]]
        ],
        locals: ["day"],
        templates: [child0]
      };
    }());
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 25,
            "column": 8
          },
          "end": {
            "line": 36,
            "column": 8
          }
        }
      },
      isEmpty: false,
      arity: 1,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("          ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("tr");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("          ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
        return morphs;
      },
      statements: [
        ["block","each",[["get","days",["loc",[null,[27,20],[27,24]]]]],["key","@index"],0,null,["loc",[null,[27,12],[34,21]]]]
      ],
      locals: ["days"],
      templates: [child0]
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "triple-curlies"
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 42,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createElement("div");
      dom.setAttribute(el1,"class","range-select");
      var el2 = dom.createTextNode("\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createElement("div");
      dom.setAttribute(el2,"class","range-select-display");
      dom.setAttribute(el2,"tabindex","0");
      var el3 = dom.createTextNode("\n    ");
      dom.appendChild(el2, el3);
      var el3 = dom.createElement("a");
      var el4 = dom.createComment("");
      dom.appendChild(el3, el4);
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("\n    ");
      dom.appendChild(el2, el3);
      var el3 = dom.createElement("span");
      var el4 = dom.createTextNode("to");
      dom.appendChild(el3, el4);
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("\n    ");
      dom.appendChild(el2, el3);
      var el3 = dom.createElement("a");
      var el4 = dom.createComment("");
      dom.appendChild(el3, el4);
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("\n  ");
      dom.appendChild(el2, el3);
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createElement("div");
      var el3 = dom.createTextNode("\n    ");
      dom.appendChild(el2, el3);
      var el3 = dom.createElement("div");
      dom.setAttribute(el3,"class","range-select-meta");
      var el4 = dom.createTextNode("\n      Choose the ");
      dom.appendChild(el3, el4);
      var el4 = dom.createElement("span");
      var el5 = dom.createComment("");
      dom.appendChild(el4, el5);
      var el5 = dom.createTextNode(" date");
      dom.appendChild(el4, el5);
      dom.appendChild(el3, el4);
      var el4 = dom.createTextNode("\n    ");
      dom.appendChild(el3, el4);
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("\n    ");
      dom.appendChild(el2, el3);
      var el3 = dom.createElement("div");
      dom.setAttribute(el3,"class","range-select-month-switcher");
      var el4 = dom.createTextNode("\n      ");
      dom.appendChild(el3, el4);
      var el4 = dom.createElement("div");
      dom.setAttribute(el4,"class","range-select-prev");
      var el5 = dom.createTextNode("←");
      dom.appendChild(el4, el5);
      dom.appendChild(el3, el4);
      var el4 = dom.createTextNode("\n      ");
      dom.appendChild(el3, el4);
      var el4 = dom.createElement("div");
      dom.setAttribute(el4,"class","range-select-next");
      var el5 = dom.createTextNode("→");
      dom.appendChild(el4, el5);
      dom.appendChild(el3, el4);
      var el4 = dom.createTextNode("\n      ");
      dom.appendChild(el3, el4);
      var el4 = dom.createElement("span");
      var el5 = dom.createComment("");
      dom.appendChild(el4, el5);
      dom.appendChild(el3, el4);
      var el4 = dom.createTextNode("\n    ");
      dom.appendChild(el3, el4);
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("\n    ");
      dom.appendChild(el2, el3);
      var el3 = dom.createElement("table");
      var el4 = dom.createTextNode("\n      ");
      dom.appendChild(el3, el4);
      var el4 = dom.createElement("thead");
      var el5 = dom.createTextNode("\n        ");
      dom.appendChild(el4, el5);
      var el5 = dom.createElement("tr");
      var el6 = dom.createTextNode("\n");
      dom.appendChild(el5, el6);
      var el6 = dom.createComment("");
      dom.appendChild(el5, el6);
      var el6 = dom.createTextNode("        ");
      dom.appendChild(el5, el6);
      dom.appendChild(el4, el5);
      var el5 = dom.createTextNode("\n      ");
      dom.appendChild(el4, el5);
      dom.appendChild(el3, el4);
      var el4 = dom.createTextNode("\n      ");
      dom.appendChild(el3, el4);
      var el4 = dom.createElement("tbody");
      var el5 = dom.createTextNode("\n");
      dom.appendChild(el4, el5);
      var el5 = dom.createComment("");
      dom.appendChild(el4, el5);
      var el5 = dom.createTextNode("      ");
      dom.appendChild(el4, el5);
      dom.appendChild(el3, el4);
      var el4 = dom.createTextNode("\n    ");
      dom.appendChild(el3, el4);
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("\n  ");
      dom.appendChild(el2, el3);
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n");
      dom.appendChild(el1, el2);
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n\n");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var element0 = dom.childAt(fragment, [0]);
      var element1 = dom.childAt(element0, [1]);
      var element2 = dom.childAt(element1, [1]);
      var element3 = dom.childAt(element1, [5]);
      var element4 = dom.childAt(element0, [3]);
      var element5 = dom.childAt(element4, [3]);
      var element6 = dom.childAt(element5, [1]);
      var element7 = dom.childAt(element5, [3]);
      var element8 = dom.childAt(element5, [5]);
      var element9 = dom.childAt(element4, [5]);
      var morphs = new Array(16);
      morphs[0] = dom.createElementMorph(element1);
      morphs[1] = dom.createAttrMorph(element2, 'class');
      morphs[2] = dom.createElementMorph(element2);
      morphs[3] = dom.createMorphAt(element2,0,0);
      morphs[4] = dom.createAttrMorph(element3, 'class');
      morphs[5] = dom.createElementMorph(element3);
      morphs[6] = dom.createMorphAt(element3,0,0);
      morphs[7] = dom.createAttrMorph(element4, 'class');
      morphs[8] = dom.createMorphAt(dom.childAt(element4, [1, 1]),0,0);
      morphs[9] = dom.createElementMorph(element6);
      morphs[10] = dom.createElementMorph(element7);
      morphs[11] = dom.createElementMorph(element8);
      morphs[12] = dom.createMorphAt(element8,0,0);
      morphs[13] = dom.createAttrMorph(element9, 'class');
      morphs[14] = dom.createMorphAt(dom.childAt(element9, [1, 1]),1,1);
      morphs[15] = dom.createMorphAt(dom.childAt(element9, [3]),1,1);
      return morphs;
    },
    statements: [
      ["element","action",["openEnd"],["on","mouseDown","preventDefault",false],["loc",[null,[2,49],[2,105]]]],
      ["attribute","class",["concat",["range-start ",["subexpr","if",[["get","isSelectingStart",["loc",[null,[3,31],[3,47]]]],"is-active"],[],["loc",[null,[3,26],[3,61]]]]]]],
      ["element","action",["openStart"],["on","mouseDown","bubbles",false,"preventDefault",false],["loc",[null,[3,63],[3,135]]]],
      ["content","startDisplay",["loc",[null,[3,136],[3,152]]]],
      ["attribute","class",["concat",["range-end ",["subexpr","if",[["get","isSelectingEnd",["loc",[null,[5,29],[5,43]]]],"is-active"],[],["loc",[null,[5,24],[5,57]]]]]]],
      ["element","action",["openEnd"],["on","mouseDown","bubbles",false,"preventDefault",false],["loc",[null,[5,59],[5,129]]]],
      ["content","endDisplay",["loc",[null,[5,130],[5,144]]]],
      ["attribute","class",["concat",["range-select-days ",["subexpr","unless",[["get","isOpen",["loc",[null,[7,41],[7,47]]]],"hide"],[],["loc",[null,[7,32],[7,56]]]]]]],
      ["inline","if",[["get","isSelectingStart",["loc",[null,[9,28],[9,44]]]],"start","end"],[],["loc",[null,[9,23],[9,60]]]],
      ["element","action",["prevMonth"],["on","mouseDown","bubbles",false],["loc",[null,[12,37],[12,88]]]],
      ["element","action",["nextMonth"],["on","mouseDown","bubbles",false],["loc",[null,[13,37],[13,88]]]],
      ["element","action",["thisMonth"],["on","mouseDown","bubbles",false],["loc",[null,[14,12],[14,63]]]],
      ["content","monthDisplay",["loc",[null,[14,64],[14,80]]]],
      ["attribute","class",["concat",[["subexpr","if",[["get","isSelectingStart",["loc",[null,[16,23],[16,39]]]],"is-selecting-start","is-selecting-end"],[],["loc",[null,[16,18],[16,81]]]]]]],
      ["block","each",[["get","headerDays",["loc",[null,[19,16],[19,26]]]]],["key","@index"],0,null,["loc",[null,[19,8],[21,17]]]],
      ["block","each",[["get","weeks",["loc",[null,[25,16],[25,21]]]]],["key","@index"],1,null,["loc",[null,[25,8],[36,17]]]]
    ],
    locals: [],
    templates: [child0, child1]
  };
}())); });

define('forecast/templates/components/remaining-budget', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 2
            },
            "end": {
              "line": 6,
              "column": 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          dom.setAttribute(el1,"target","_blank");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element0, 'href');
          morphs[1] = dom.createMorphAt(element0,1,1);
          return morphs;
        },
        statements: [
          ["attribute","href",["concat",[["get","harvestLink",["loc",[null,[3,15],[3,26]]]]]]],
          ["content","hours",["loc",[null,[4,6],[4,15]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": [
            "wrong-type"
          ]
        },
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","tool-tip",[],["text",["subexpr","@mut",[["get","tooltip",["loc",[null,[2,19],[2,26]]]]],[],[]],"position","right","align","left"],0,null,["loc",[null,[2,2],[6,15]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }());
  var child1 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 2
            },
            "end": {
              "line": 10,
              "column": 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
          return morphs;
        },
        statements: [
          ["content","hours",["loc",[null,[9,10],[9,19]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 7,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","tool-tip",[],["text",["subexpr","@mut",[["get","tooltip",["loc",[null,[8,19],[8,26]]]]],[],[]],"position","right","align","left"],0,null,["loc",[null,[8,2],[10,15]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 12,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      dom.insertBoundary(fragment, null);
      return morphs;
    },
    statements: [
      ["block","if",[["get","showHarvestLink",["loc",[null,[1,6],[1,21]]]]],[],0,1,["loc",[null,[1,0],[11,7]]]]
    ],
    locals: [],
    templates: [child0, child1]
  };
}())); });

define('forecast/templates/components/schedule-container', [], function(){ return Ember.HTMLBars.template((function() {
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 2,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      return morphs;
    },
    statements: [
      ["content","yield",["loc",[null,[1,0],[1,9]]]]
    ],
    locals: [],
    templates: []
  };
}())); });

define('forecast/templates/components/scroll-to-top', [], function(){ return Ember.HTMLBars.template((function() {
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 2,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      return morphs;
    },
    statements: [
      ["content","yield",["loc",[null,[1,0],[1,9]]]]
    ],
    locals: [],
    templates: []
  };
}())); });

define('forecast/templates/components/select-person', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.3.0",
            "loc": {
              "source": null,
              "start": {
                "line": 13,
                "column": 8
              },
              "end": {
                "line": 20,
                "column": 8
              }
            }
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
            return morphs;
          },
          statements: [
            ["inline","fc-prompt",[],["label","Select Person…"],["loc",[null,[18,10],[18,46]]]],
            ["content","fc-divider",["loc",[null,[19,10],[19,24]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 10,
              "column": 6
            },
            "end": {
              "line": 21,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","fc-select",[],["from",["subexpr","@mut",[["get","people",["loc",[null,[13,26],[13,32]]]]],[],[]],"valueKey","id","labelKey","name","onchange",["subexpr","action",[["subexpr","mut",[["get","selectedPerson",["loc",[null,[16,43],[16,57]]]]],[],["loc",[null,[16,38],[16,58]]]]],[],["loc",[null,[16,30],[16,59]]]],"class","input-appearance hide-from-fullstory"],0,null,["loc",[null,[13,8],[20,22]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 33,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h2");
        dom.setAttribute(el3,"class","hide-from-fullstory");
        var el4 = dom.createTextNode("\n        Assign to ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        dom.setAttribute(el2,"class","form-options");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3,"type","submit");
        dom.setAttribute(el3,"class","button button-primary gtm-form-submit test-submit");
        var el4 = dom.createTextNode("\n        Assign\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3,"type","submit");
        dom.setAttribute(el3,"class","button button-cancel gtm-form-cancel test-cancel");
        var el4 = dom.createTextNode("\n        Cancel\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [1]);
        var element1 = dom.childAt(element0, [5]);
        var element2 = dom.childAt(element1, [1]);
        var element3 = dom.childAt(element1, [3]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [1, 1]),1,1);
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [3]),1,1);
        morphs[2] = dom.createElementMorph(element2);
        morphs[3] = dom.createElementMorph(element3);
        return morphs;
      },
      statements: [
        ["content","project.name",["loc",[null,[5,18],[5,34]]]],
        ["block","form-field",[],["label","Assign","for","selectedPerson","of",["subexpr","@mut",[["get","this",["loc",[null,[11,23],[11,27]]]]],[],[]],"validateOnBlur",false],0,null,["loc",[null,[10,6],[21,21]]]],
        ["element","action",["submit"],[],["loc",[null,[25,86],[25,105]]]],
        ["element","action",["cancel"],[],["loc",[null,[28,85],[28,104]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 34,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      dom.insertBoundary(fragment, null);
      return morphs;
    },
    statements: [
      ["block","modal-overlay",[],["close","cancel"],0,null,["loc",[null,[1,0],[33,18]]]]
    ],
    locals: [],
    templates: [child0]
  };
}())); });

define('forecast/templates/components/select-project', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.3.0",
            "loc": {
              "source": null,
              "start": {
                "line": 13,
                "column": 8
              },
              "end": {
                "line": 22,
                "column": 8
              }
            }
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
            return morphs;
          },
          statements: [
            ["inline","fc-prompt",[],["label","Select Project…"],["loc",[null,[20,10],[20,47]]]],
            ["content","fc-divider",["loc",[null,[21,10],[21,24]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 10,
              "column": 6
            },
            "end": {
              "line": 23,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","fc-grouped-select",[],["from",["subexpr","@mut",[["get","availableProjects",["loc",[null,[13,34],[13,51]]]]],[],[]],"sortBy",["subexpr","@mut",[["get","availableProjectsSortProps",["loc",[null,[14,36],[14,62]]]]],[],[]],"groupBy","clientName","valueKey","id","labelKey","nameWithCode","onchange",["subexpr","action",[["subexpr","mut",[["get","selectedProject",["loc",[null,[18,51],[18,66]]]]],[],["loc",[null,[18,46],[18,67]]]]],[],["loc",[null,[18,38],[18,68]]]],"class","input-appearance hide-from-fullstory"],0,null,["loc",[null,[13,8],[22,30]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 35,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h2");
        dom.setAttribute(el3,"class","hide-from-fullstory");
        var el4 = dom.createTextNode("\n        Assign ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        dom.setAttribute(el2,"class","form-options");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3,"type","submit");
        dom.setAttribute(el3,"class","button button-primary gtm-form-submit test-submit");
        var el4 = dom.createTextNode("\n        Assign\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3,"type","submit");
        dom.setAttribute(el3,"class","button button-cancel gtm-form-cancel test-cancel");
        var el4 = dom.createTextNode("\n        Cancel\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [1]);
        var element1 = dom.childAt(element0, [5]);
        var element2 = dom.childAt(element1, [1]);
        var element3 = dom.childAt(element1, [3]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [1, 1]),1,1);
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [3]),1,1);
        morphs[2] = dom.createElementMorph(element2);
        morphs[3] = dom.createElementMorph(element3);
        return morphs;
      },
      statements: [
        ["content","person.name",["loc",[null,[5,15],[5,30]]]],
        ["block","form-field",[],["label","Assign","for","selectedProject","of",["subexpr","@mut",[["get","this",["loc",[null,[11,23],[11,27]]]]],[],[]],"validateOnBlur",false],0,null,["loc",[null,[10,6],[23,21]]]],
        ["element","action",["submit"],[],["loc",[null,[27,86],[27,105]]]],
        ["element","action",["cancel"],[],["loc",[null,[30,85],[30,104]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 36,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      dom.insertBoundary(fragment, null);
      return morphs;
    },
    statements: [
      ["block","modal-overlay",[],["close","cancel"],0,null,["loc",[null,[1,0],[35,18]]]]
    ],
    locals: [],
    templates: [child0]
  };
}())); });

define('forecast/templates/components/simple-button', [], function(){ return Ember.HTMLBars.template((function() {
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 2,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      return morphs;
    },
    statements: [
      ["content","yield",["loc",[null,[1,0],[1,9]]]]
    ],
    locals: [],
    templates: []
  };
}())); });

define('forecast/templates/components/split-overlay', [], function(){ return Ember.HTMLBars.template((function() {
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 2,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      return morphs;
    },
    statements: [
      ["content","yield",["loc",[null,[1,0],[1,9]]]]
    ],
    locals: [],
    templates: []
  };
}())); });

define('forecast/templates/components/time-frame', [], function(){ return Ember.HTMLBars.template((function() {
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 2,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      return morphs;
    },
    statements: [
      ["content","yield",["loc",[null,[1,0],[1,9]]]]
    ],
    locals: [],
    templates: []
  };
}())); });

define('forecast/templates/components/time-off-frame', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 4
            },
            "end": {
              "line": 6,
              "column": 4
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","icon");
          dom.setAttribute(el1,"data-icon","notes-white");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 3,
            "column": 2
          },
          "end": {
            "line": 7,
            "column": 2
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","tool-tip",[],["text",["subexpr","parse-markdown",[["get","notes",["loc",[null,[4,37],[4,42]]]]],[],["loc",[null,[4,21],[4,43]]]],"position","top","align","left"],0,null,["loc",[null,[4,4],[6,17]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }());
  return {
    meta: {
      "fragmentReason": false,
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 9,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createElement("span");
      var el2 = dom.createTextNode("\n  Off\n");
      dom.appendChild(el1, el2);
      var el2 = dom.createComment("");
      dom.appendChild(el1, el2);
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);
      return morphs;
    },
    statements: [
      ["block","if",[["get","notes",["loc",[null,[3,8],[3,13]]]]],[],0,null,["loc",[null,[3,2],[7,9]]]]
    ],
    locals: [],
    templates: [child0]
  };
}())); });

define('forecast/templates/components/toggle-button', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 2
            },
            "end": {
              "line": 4,
              "column": 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","icon");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element0, 'data-icon');
          return morphs;
        },
        statements: [
          ["attribute","data-icon",["concat",[["get","buttonType",["loc",[null,[3,33],[3,43]]]]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": [
            "wrong-type"
          ]
        },
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","tool-tip",[],["text",["subexpr","@mut",[["get","tooltipText",["loc",[null,[2,19],[2,30]]]]],[],[]]],0,null,["loc",[null,[2,2],[4,15]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }());
  var child1 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 6,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
        return morphs;
      },
      statements: [
        ["content","yield",["loc",[null,[7,2],[7,11]]]]
      ],
      locals: [],
      templates: []
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type",
          "multiple-nodes"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 9,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(2);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      morphs[1] = dom.createMorphAt(fragment,1,1,contextualElement);
      dom.insertBoundary(fragment, 0);
      dom.insertBoundary(fragment, null);
      return morphs;
    },
    statements: [
      ["block","if",[["get","buttonType",["loc",[null,[1,6],[1,16]]]]],[],0,null,["loc",[null,[1,0],[5,7]]]],
      ["block","if",[["get","hasBlock",["loc",[null,[6,6],[6,14]]]]],[],1,null,["loc",[null,[6,0],[8,7]]]]
    ],
    locals: [],
    templates: [child0, child1]
  };
}())); });

define('forecast/templates/components/tool-tip-overlay', [], function(){ return Ember.HTMLBars.template((function() {
  return {
    meta: {
      "fragmentReason": false,
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 2,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createElement("div");
      var el2 = dom.createComment("");
      dom.appendChild(el1, el2);
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),0,0);
      return morphs;
    },
    statements: [
      ["content","text",["loc",[null,[1,5],[1,13]]]]
    ],
    locals: [],
    templates: []
  };
}())); });

define('forecast/templates/components/tool-tip', [], function(){ return Ember.HTMLBars.template((function() {
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 2,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      return morphs;
    },
    statements: [
      ["content","yield",["loc",[null,[1,0],[1,9]]]]
    ],
    locals: [],
    templates: []
  };
}())); });

define('forecast/templates/components/updated-stamp', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("span");
        dom.setAttribute(el1,"class","updated-stamp");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
        return morphs;
      },
      statements: [
        ["inline","time-ago",[["get","date",["loc",[null,[2,41],[2,45]]]]],[],["loc",[null,[2,30],[2,47]]]]
      ],
      locals: [],
      templates: []
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 4,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      dom.insertBoundary(fragment, null);
      return morphs;
    },
    statements: [
      ["block","tool-tip",[],["text",["subexpr","@mut",[["get","updatedAtAndBy",["loc",[null,[1,17],[1,31]]]]],[],[]],"position","bottom-right","align","left"],0,null,["loc",[null,[1,0],[3,13]]]]
    ],
    locals: [],
    templates: [child0]
  };
}())); });

define('forecast/templates/export', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 41,
            "column": 6
          },
          "end": {
            "line": 45,
            "column": 6
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("        ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","inline-loader safari-export-helper is-hidden");
        var el2 = dom.createTextNode("\n          Exporting. This may take a second…\n        ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }());
  var child1 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 45,
              "column": 6
            },
            "end": {
              "line": 49,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","block-loader ie-export-helper");
          var el2 = dom.createTextNode("\n          Please only press this button once.\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.3.0",
            "loc": {
              "source": null,
              "start": {
                "line": 49,
                "column": 6
              },
              "end": {
                "line": 54,
                "column": 6
              }
            }
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","inline-loader");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.setAttribute(el2,"class","icon");
            dom.setAttribute(el2,"data-icon","loader");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          Exporting…\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n      ");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 49,
              "column": 6
            },
            "end": {
              "line": 54,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","if",[["get","isDownloading",["loc",[null,[49,16],[49,29]]]]],[],0,null,["loc",[null,[49,6],[54,6]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 45,
            "column": 6
          },
          "end": {
            "line": 54,
            "column": 6
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","if",[["get","isIE",["loc",[null,[45,16],[45,20]]]]],[],0,1,["loc",[null,[45,6],[54,6]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "triple-curlies"
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 58,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createElement("div");
      dom.setAttribute(el1,"class","container export-page");
      var el2 = dom.createTextNode("\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createElement("h1");
      var el3 = dom.createTextNode("Scheduled Time Export");
      dom.appendChild(el2, el3);
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createElement("p");
      var el3 = dom.createTextNode("\n    Export weekly summaries of your project or team schedule to a CSV file.\n    This is useful if you want to import your Forecast data into a spreadsheet for further analysis.\n  ");
      dom.appendChild(el2, el3);
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createElement("form");
      dom.setAttribute(el2,"class","label-left-form");
      var el3 = dom.createTextNode("\n\n    ");
      dom.appendChild(el2, el3);
      var el3 = dom.createElement("div");
      dom.setAttribute(el3,"class","field");
      var el4 = dom.createTextNode("\n      ");
      dom.appendChild(el3, el4);
      var el4 = dom.createElement("label");
      var el5 = dom.createTextNode("Weeks to Export");
      dom.appendChild(el4, el5);
      dom.appendChild(el3, el4);
      var el4 = dom.createTextNode("\n      ");
      dom.appendChild(el3, el4);
      var el4 = dom.createComment("");
      dom.appendChild(el3, el4);
      var el4 = dom.createTextNode("\n      ");
      dom.appendChild(el3, el4);
      var el4 = dom.createElement("div");
      dom.setAttribute(el4,"class","export-range-helper");
      var el5 = dom.createTextNode("\n        ");
      dom.appendChild(el4, el5);
      var el5 = dom.createElement("strong");
      var el6 = dom.createTextNode("Note:");
      dom.appendChild(el5, el6);
      dom.appendChild(el4, el5);
      var el5 = dom.createTextNode(" Exports include the full weeks for the dates you select.\n      ");
      dom.appendChild(el4, el5);
      dom.appendChild(el3, el4);
      var el4 = dom.createTextNode("\n    ");
      dom.appendChild(el3, el4);
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("\n\n    ");
      dom.appendChild(el2, el3);
      var el3 = dom.createElement("div");
      dom.setAttribute(el3,"class","field");
      var el4 = dom.createTextNode("\n      ");
      dom.appendChild(el3, el4);
      var el4 = dom.createElement("label");
      var el5 = dom.createTextNode("Export Format");
      dom.appendChild(el4, el5);
      dom.appendChild(el3, el4);
      var el4 = dom.createTextNode("\n      ");
      dom.appendChild(el3, el4);
      var el4 = dom.createElement("div");
      dom.setAttribute(el4,"class","radio-options");
      var el5 = dom.createTextNode("\n        ");
      dom.appendChild(el4, el5);
      var el5 = dom.createElement("label");
      dom.setAttribute(el5,"class","radio-label");
      var el6 = dom.createTextNode("\n          ");
      dom.appendChild(el5, el6);
      var el6 = dom.createComment("");
      dom.appendChild(el5, el6);
      var el6 = dom.createTextNode("\n          Projects Schedule View\n        ");
      dom.appendChild(el5, el6);
      dom.appendChild(el4, el5);
      var el5 = dom.createTextNode("\n        ");
      dom.appendChild(el4, el5);
      var el5 = dom.createElement("label");
      dom.setAttribute(el5,"class","radio-label");
      var el6 = dom.createTextNode("\n          ");
      dom.appendChild(el5, el6);
      var el6 = dom.createComment("");
      dom.appendChild(el5, el6);
      var el6 = dom.createTextNode("\n          Team Schedule View\n        ");
      dom.appendChild(el5, el6);
      dom.appendChild(el4, el5);
      var el5 = dom.createTextNode("\n      ");
      dom.appendChild(el4, el5);
      dom.appendChild(el3, el4);
      var el4 = dom.createTextNode("\n    ");
      dom.appendChild(el3, el4);
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("\n\n    ");
      dom.appendChild(el2, el3);
      var el3 = dom.createElement("div");
      dom.setAttribute(el3,"class","field submit");
      var el4 = dom.createTextNode("\n      ");
      dom.appendChild(el3, el4);
      var el4 = dom.createElement("button");
      dom.setAttribute(el4,"class","button button-primary button-active-like-disabled");
      var el5 = dom.createTextNode("\n        Export Schedule\n      ");
      dom.appendChild(el4, el5);
      dom.appendChild(el3, el4);
      var el4 = dom.createTextNode("\n\n");
      dom.appendChild(el3, el4);
      var el4 = dom.createComment("");
      dom.appendChild(el3, el4);
      var el4 = dom.createTextNode("    ");
      dom.appendChild(el3, el4);
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("\n  ");
      dom.appendChild(el2, el3);
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n");
      dom.appendChild(el1, el2);
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var element0 = dom.childAt(fragment, [0, 5]);
      var element1 = dom.childAt(element0, [3, 3]);
      var element2 = dom.childAt(element0, [5]);
      var element3 = dom.childAt(element2, [1]);
      var morphs = new Array(6);
      morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]),3,3);
      morphs[1] = dom.createMorphAt(dom.childAt(element1, [1]),1,1);
      morphs[2] = dom.createMorphAt(dom.childAt(element1, [3]),1,1);
      morphs[3] = dom.createAttrMorph(element3, 'disabled');
      morphs[4] = dom.createElementMorph(element3);
      morphs[5] = dom.createMorphAt(element2,3,3);
      return morphs;
    },
    statements: [
      ["inline","range-select",[],["start",["subexpr","@mut",[["get","starting",["loc",[null,[13,27],[13,35]]]]],[],[]],"end",["subexpr","@mut",[["get","ending",["loc",[null,[14,25],[14,31]]]]],[],[]]],["loc",[null,[13,6],[14,33]]]],
      ["inline","radio-button",[],["selection",["subexpr","@mut",[["get","type",["loc",[null,[24,35],[24,39]]]]],[],[]],"value","project"],["loc",[null,[24,10],[24,57]]]],
      ["inline","radio-button",[],["selection",["subexpr","@mut",[["get","type",["loc",[null,[28,35],[28,39]]]]],[],[]],"value","team"],["loc",[null,[28,10],[28,54]]]],
      ["attribute","disabled",["get","isDownloading",["loc",[null,[36,25],[36,38]]]]],
      ["element","action",["export"],[],["loc",[null,[35,14],[35,33]]]],
      ["block","if",[["get","isSafari",["loc",[null,[41,12],[41,20]]]]],[],0,1,["loc",[null,[41,6],[54,13]]]]
    ],
    locals: [],
    templates: [child0, child1]
  };
}())); });

define('forecast/templates/notifications', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 2,
            "column": 2
          },
          "end": {
            "line": 5,
            "column": 2
          }
        }
      },
      isEmpty: false,
      arity: 1,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("    ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
        return morphs;
      },
      statements: [
        ["inline","flash-notification",[],["notification",["subexpr","@mut",[["get","notification",["loc",[null,[3,38],[3,50]]]]],[],[]],"fadedOut","dismissNotification"],["loc",[null,[3,4],[4,57]]]]
      ],
      locals: ["notification"],
      templates: []
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "triple-curlies"
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 7,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createElement("ul");
      dom.setAttribute(el1,"class","flash");
      var el2 = dom.createTextNode("\n");
      dom.appendChild(el1, el2);
      var el2 = dom.createComment("");
      dom.appendChild(el1, el2);
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);
      return morphs;
    },
    statements: [
      ["block","each",[["get","notifications",["loc",[null,[2,10],[2,23]]]]],[],0,null,["loc",[null,[2,2],[5,11]]]]
    ],
    locals: [],
    templates: [child0]
  };
}())); });

define('forecast/templates/offline', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h2");
        var el4 = dom.createTextNode("Connection Offline");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        dom.setAttribute(el3,"class","sub-h2");
        var el4 = dom.createTextNode("Attempting to reconnect in ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("…");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3,"type","submit");
        dom.setAttribute(el3,"class","button");
        var el4 = dom.createTextNode("Try Now");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [1]);
        var element1 = dom.childAt(element0, [3, 1]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [1, 3]),1,1);
        morphs[1] = dom.createElementMorph(element1);
        return morphs;
      },
      statements: [
        ["content","retrySeconds",["loc",[null,[5,51],[5,67]]]],
        ["element","action",["retryNow"],[],["loc",[null,[9,43],[9,64]]]]
      ],
      locals: [],
      templates: []
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 13,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      dom.insertBoundary(fragment, null);
      return morphs;
    },
    statements: [
      ["block","modal-overlay",[],[],0,null,["loc",[null,[1,0],[12,18]]]]
    ],
    locals: [],
    templates: [child0]
  };
}())); });

define('forecast/templates/person/assignments/_add', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 2,
            "column": 2
          },
          "end": {
            "line": 7,
            "column": 2
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("    ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n    ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n    ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n    ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
        morphs[1] = dom.createMorphAt(fragment,5,5,contextualElement);
        morphs[2] = dom.createMorphAt(fragment,7,7,contextualElement);
        return morphs;
      },
      statements: [
        ["inline","link-to",["Edit","person.edit",["get","model",["loc",[null,[3,35],[3,40]]]]],[],["loc",[null,[3,4],[3,42]]]],
        ["inline","link-to",["Archive","person.archive",["get","model",["loc",[null,[5,41],[5,46]]]]],[],["loc",[null,[5,4],[5,48]]]],
        ["inline","link-to",["Delete","person.delete",["get","model",["loc",[null,[6,39],[6,44]]]]],["classNames","delete-action"],["loc",[null,[6,4],[6,73]]]]
      ],
      locals: [],
      templates: []
    };
  }());
  var child1 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 9,
            "column": 2
          },
          "end": {
            "line": 24,
            "column": 2
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("    ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n    ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n    ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
        morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
        morphs[2] = dom.createMorphAt(fragment,5,5,contextualElement);
        return morphs;
      },
      statements: [
        ["inline","fc-prompt",[],["label","Assign to Project…"],["loc",[null,[19,4],[19,44]]]],
        ["inline","fc-option",[],["label","Add New Project…","action","addNewProjectToPerson","value","test-add-new-project"],["loc",[null,[20,4],[22,46]]]],
        ["content","fc-divider",["loc",[null,[23,4],[23,18]]]]
      ],
      locals: [],
      templates: []
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "triple-curlies"
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 26,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createElement("div");
      dom.setAttribute(el1,"class","row-info");
      var el2 = dom.createTextNode("\n");
      dom.appendChild(el1, el2);
      var el2 = dom.createComment("");
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n");
      dom.appendChild(el1, el2);
      var el2 = dom.createComment("");
      dom.appendChild(el1, el2);
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var element0 = dom.childAt(fragment, [0]);
      var morphs = new Array(2);
      morphs[0] = dom.createMorphAt(element0,1,1);
      morphs[1] = dom.createMorphAt(element0,3,3);
      return morphs;
    },
    statements: [
      ["block","drop-down",[],["classNames","content-actions-dropdown","alignment","left"],0,null,["loc",[null,[2,2],[7,16]]]],
      ["block","fc-grouped-select",[],["deferred",true,"from",["subexpr","@mut",[["get","availableProjects",["loc",[null,[10,28],[10,45]]]]],[],[]],"labelKey","nameWithCode","valueKey","id","sortBy",["subexpr","@mut",[["get","availableProjectsSortProps",["loc",[null,[13,30],[13,56]]]]],[],[]],"groupBy","clientName","onchange",["subexpr","action",["createAssignmentForProject"],[],["loc",[null,[15,32],[15,69]]]],"addNewProjectToPerson","addNewProjectToPerson","resetToPrompt",true,"class","input-appearance"],1,null,["loc",[null,[9,2],[24,24]]]]
    ],
    locals: [],
    templates: [child0, child1]
  };
}())); });

define('forecast/templates/person/assignments/_timeline', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 8,
            "column": 2
          },
          "end": {
            "line": 14,
            "column": 2
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("    ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
        return morphs;
      },
      statements: [
        ["inline","time-frame",[],["classNames","assignment gray temp-assignment","dayWidth",["subexpr","@mut",[["get","dayWidth",["loc",[null,[10,26],[10,34]]]]],[],[]],"timelineStartDate",["subexpr","@mut",[["get","startDate",["loc",[null,[11,35],[11,44]]]]],[],[]],"startDate",["subexpr","@mut",[["get","tempAssignment.startDate",["loc",[null,[12,27],[12,51]]]]],[],[]],"endDate",["subexpr","@mut",[["get","tempAssignment.endDate",["loc",[null,[13,25],[13,47]]]]],[],[]]],["loc",[null,[9,4],[13,49]]]]
      ],
      locals: [],
      templates: []
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "triple-curlies"
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 16,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createElement("div");
      dom.setAttribute(el1,"class","row-timeline");
      var el2 = dom.createTextNode("\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createComment("");
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n\n");
      dom.appendChild(el1, el2);
      var el2 = dom.createComment("");
      dom.appendChild(el1, el2);
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var element0 = dom.childAt(fragment, [0]);
      var morphs = new Array(2);
      morphs[0] = dom.createMorphAt(element0,1,1);
      morphs[1] = dom.createMorphAt(element0,3,3);
      return morphs;
    },
    statements: [
      ["inline","stretchable-overlay",[],["classNames","add-assignment","dayWidth",["subexpr","@mut",[["get","dayWidth",["loc",[null,[3,33],[3,41]]]]],[],[]],"timelineStartDate",["subexpr","@mut",[["get","startDate",["loc",[null,[4,42],[4,51]]]]],[],[]],"leftOffset",["subexpr","@mut",[["get","rowHeaderWidth",["loc",[null,[5,35],[5,49]]]]],[],[]],"onSelect","buildAssignment"],["loc",[null,[2,2],[6,53]]]],
      ["block","if",[["get","tempAssignment",["loc",[null,[8,8],[8,22]]]]],[],0,null,["loc",[null,[8,2],[14,9]]]]
    ],
    locals: [],
    templates: [child0]
  };
}())); });

define('forecast/templates/person/delete', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 14,
              "column": 6
            },
            "end": {
              "line": 18,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","input",[],["class","confirm-input","required","required","value",["subexpr","@mut",[["get","confirmText",["loc",[null,[17,22],[17,33]]]]],[],[]]],["loc",[null,[15,8],[17,35]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 32,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h2");
        dom.setAttribute(el3,"class","hide-from-fullstory");
        var el4 = dom.createTextNode("Delete ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("strong");
        var el5 = dom.createTextNode("Caution:");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        This action will remove this person from your account,\n        and permanently delete all of their assignments. There is no undo.\n        Proceed?\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        dom.setAttribute(el2,"class","form-delete-confirm");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3,"class","button button-primary-red gtm-form-submit");
        var el4 = dom.createTextNode("\n        Delete\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3,"class","button button-cancel gtm-form-cancel");
        var el4 = dom.createTextNode("\n        Cancel\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [1]);
        var element1 = dom.childAt(element0, [5]);
        var element2 = dom.childAt(element1, [1]);
        var element3 = dom.childAt(element1, [3]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [1, 1]),1,1);
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [3]),1,1);
        morphs[2] = dom.createElementMorph(element2);
        morphs[3] = dom.createElementMorph(element3);
        return morphs;
      },
      statements: [
        ["content","model.name",["loc",[null,[4,45],[4,59]]]],
        ["block","form-field",[],["label","Type YOLO to confirm","for","confirmText","of",["subexpr","@mut",[["get","this",["loc",[null,[14,70],[14,74]]]]],[],[]],"validateOnBlur",false],0,null,["loc",[null,[14,6],[18,21]]]],
        ["element","action",["doDelete"],[],["loc",[null,[23,14],[23,35]]]],
        ["element","action",["cancelDelete"],[],["loc",[null,[27,14],[27,39]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 33,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      dom.insertBoundary(fragment, null);
      return morphs;
    },
    statements: [
      ["block","modal-overlay",[],["close","cancelDelete"],0,null,["loc",[null,[1,0],[32,18]]]]
    ],
    locals: [],
    templates: [child0]
  };
}())); });

define('forecast/templates/person/show', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.3.0",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 6
              },
              "end": {
                "line": 12,
                "column": 6
              }
            }
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            return morphs;
          },
          statements: [
            ["inline","person-timeline",[],["person",["subexpr","@mut",[["get","model",["loc",[null,[7,33],[7,38]]]]],[],[]],"dayWidth",["subexpr","@mut",[["get","dayWidth",["loc",[null,[8,35],[8,43]]]]],[],[]],"startDate",["subexpr","@mut",[["get","startDate",["loc",[null,[9,36],[9,45]]]]],[],[]],"endDate",["subexpr","@mut",[["get","endDate",["loc",[null,[10,34],[10,41]]]]],[],[]],"timelineStartDate",["subexpr","@mut",[["get","timelineStartDate",["loc",[null,[11,44],[11,61]]]]],[],[]]],["loc",[null,[7,8],[11,63]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 4
            },
            "end": {
              "line": 13,
              "column": 4
            }
          }
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["inline","person-info",[],["person",["subexpr","@mut",[["get","model",["loc",[null,[4,27],[4,32]]]]],[],[]],"onExpand",["subexpr","action",["toggleAssignments"],[],["loc",[null,[5,29],[5,57]]]]],["loc",[null,[4,6],[5,59]]]],
          ["block","if",[["get","isSetup",["loc",[null,[6,12],[6,19]]]]],[],0,null,["loc",[null,[6,6],[12,13]]]]
        ],
        locals: ["isSetup"],
        templates: [child0]
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.3.0",
            "loc": {
              "source": null,
              "start": {
                "line": 16,
                "column": 6
              },
              "end": {
                "line": 28,
                "column": 6
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            return morphs;
          },
          statements: [
            ["inline","person-project",[],["person",["subexpr","@mut",[["get","item.person",["loc",[null,[17,32],[17,43]]]]],[],[]],"project",["subexpr","@mut",[["get","item.project",["loc",[null,[18,33],[18,45]]]]],[],[]],"account",["subexpr","@mut",[["get","account",["loc",[null,[19,33],[19,40]]]]],[],[]],"activeAssignmentController",["subexpr","@mut",[["get","activeAssignmentController",["loc",[null,[20,52],[20,78]]]]],[],[]],"dayWidth",["subexpr","@mut",[["get","dayWidth",["loc",[null,[21,34],[21,42]]]]],[],[]],"startDate",["subexpr","@mut",[["get","startDate",["loc",[null,[22,35],[22,44]]]]],[],[]],"rowHeaderWidth",["subexpr","@mut",[["get","rowHeaderWidth",["loc",[null,[23,40],[23,54]]]]],[],[]],"createAssignmentForProject",["subexpr","action",["createAssignmentForProject"],[],["loc",[null,[24,52],[24,89]]]],"editAssignment",["subexpr","action",["editAssignment"],[],["loc",[null,[25,40],[25,65]]]],"updateAssignment",["subexpr","action",["updateAssignment"],[],["loc",[null,[26,42],[26,69]]]],"splitAssignment",["subexpr","action",["confirmSplitAssignment"],[],["loc",[null,[27,41],[27,74]]]]],["loc",[null,[17,8],[27,76]]]]
          ],
          locals: ["item"],
          templates: []
        };
      }());
      var child1 = (function() {
        var child0 = (function() {
          var child0 = (function() {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.3.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 32,
                    "column": 10
                  },
                  "end": {
                    "line": 35,
                    "column": 10
                  }
                }
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
                morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
                return morphs;
              },
              statements: [
                ["inline","partial",["person/assignments/add"],[],["loc",[null,[33,12],[33,48]]]],
                ["inline","partial",["person/assignments/timeline"],[],["loc",[null,[34,12],[34,53]]]]
              ],
              locals: [],
              templates: []
            };
          }());
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.3.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 31,
                  "column": 8
                },
                "end": {
                  "line": 36,
                  "column": 8
                }
              }
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [
              ["block","if",[["get","isSetup",["loc",[null,[32,16],[32,23]]]]],[],0,null,["loc",[null,[32,10],[35,17]]]]
            ],
            locals: ["isSetup"],
            templates: [child0]
          };
        }());
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.3.0",
            "loc": {
              "source": null,
              "start": {
                "line": 30,
                "column": 6
              },
              "end": {
                "line": 37,
                "column": 6
              }
            }
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","deferred-row",[],["class","content-child-row content-add-row"],0,null,["loc",[null,[31,8],[36,25]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 15,
              "column": 4
            },
            "end": {
              "line": 38,
              "column": 4
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","each",[["get","sortedAssignedProjects",["loc",[null,[16,14],[16,36]]]]],["key","project.id"],0,null,["loc",[null,[16,6],[28,15]]]],
          ["block","if",[["get","realtime.isAdmin",["loc",[null,[30,12],[30,28]]]]],[],1,null,["loc",[null,[30,6],[37,13]]]]
        ],
        locals: [],
        templates: [child0, child1]
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 40,
              "column": 4
            },
            "end": {
              "line": 46,
              "column": 4
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","select-project",[],["person",["subexpr","@mut",[["get","model",["loc",[null,[41,30],[41,35]]]]],[],[]],"availableProjects",["subexpr","@mut",[["get","availableProjects",["loc",[null,[42,41],[42,58]]]]],[],[]],"availableProjectsSortProps",["subexpr","@mut",[["get","availableProjectsSortProps",["loc",[null,[43,50],[43,76]]]]],[],[]],"onProject",["subexpr","action",["assignProject"],[],["loc",[null,[44,33],[44,57]]]],"onCancel",["subexpr","action",["cancelAssignProject"],[],["loc",[null,[45,32],[45,62]]]]],["loc",[null,[41,6],[45,64]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 48,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("  ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [1]);
        var morphs = new Array(4);
        morphs[0] = dom.createAttrMorph(element0, 'class');
        morphs[1] = dom.createMorphAt(element0,1,1);
        morphs[2] = dom.createMorphAt(element0,3,3);
        morphs[3] = dom.createMorphAt(element0,5,5);
        return morphs;
      },
      statements: [
        ["attribute","class",["concat",["row user-row ",["subexpr","if",[["get","isShowingAssignments",["loc",[null,[2,32],[2,52]]]],"expanded-row"],[],["loc",[null,[2,27],[2,69]]]]]]],
        ["block","deferred-row",[],["class","content-parent-row","recheckWhen",["subexpr","@mut",[["get","isFiltered",["loc",[null,[3,59],[3,69]]]]],[],[]]],0,null,["loc",[null,[3,4],[13,21]]]],
        ["block","if",[["get","isShowingAssignments",["loc",[null,[15,10],[15,30]]]]],[],1,null,["loc",[null,[15,4],[38,11]]]],
        ["block","if",[["get","tempAssignment",["loc",[null,[40,10],[40,24]]]]],[],2,null,["loc",[null,[40,4],[46,11]]]]
      ],
      locals: [],
      templates: [child0, child1, child2]
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 49,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      dom.insertBoundary(fragment, null);
      return morphs;
    },
    statements: [
      ["block","scroll-to-top",[],["shouldScroll",["subexpr","@mut",[["get","isActiveRow",["loc",[null,[1,30],[1,41]]]]],[],[]]],0,null,["loc",[null,[1,0],[48,18]]]]
    ],
    locals: [],
    templates: [child0]
  };
}())); });

define('forecast/templates/project/assignments/_add', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 4
            },
            "end": {
              "line": 7,
              "column": 4
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","disabled-time-off-actions");
          var el2 = dom.createTextNode("Actions");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 2,
            "column": 2
          },
          "end": {
            "line": 8,
            "column": 2
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","tool-tip",[],["text","Time Off cannot be edited","position","bottom-right","align","left"],0,null,["loc",[null,[3,4],[7,17]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }());
  var child1 = (function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.3.0",
            "loc": {
              "source": null,
              "start": {
                "line": 17,
                "column": 6
              },
              "end": {
                "line": 22,
                "column": 6
              }
            }
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            dom.setAttribute(el1,"target","_blank");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.setAttribute(el2,"class","icon dropdown-harvest-icon");
            dom.setAttribute(el2,"data-icon","harvest");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          View Report in Harvest\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(1);
            morphs[0] = dom.createAttrMorph(element0, 'href');
            return morphs;
          },
          statements: [
            ["attribute","href",["concat",[["get","harvestLink",["loc",[null,[18,19],[18,30]]]]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 9,
              "column": 4
            },
            "end": {
              "line": 26,
              "column": 4
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          dom.setAttribute(el1,"href","#");
          var el2 = dom.createTextNode("\n        Shift Timeline\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("hr");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [4]);
          var morphs = new Array(6);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          morphs[1] = dom.createAttrMorph(element1, 'class');
          morphs[2] = dom.createElementMorph(element1);
          morphs[3] = dom.createMorphAt(fragment,6,6,contextualElement);
          morphs[4] = dom.createMorphAt(fragment,10,10,contextualElement);
          morphs[5] = dom.createMorphAt(fragment,12,12,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","link-to",["Edit","project.edit",["get","model",["loc",[null,[10,38],[10,43]]]]],[],["loc",[null,[10,6],[10,45]]]],
          ["attribute","class",["subexpr","unless",[["get","model.canBeShifted",["loc",[null,[14,43],[14,61]]]],"is-disabled"],[],["loc",[null,[14,34],[14,77]]]]],
          ["element","action",["goToShiftRoute",["get","model",["loc",[null,[13,44],[13,49]]]]],[],["loc",[null,[13,18],[13,51]]]],
          ["block","if",[["get","model.isLinkedToHarvest",["loc",[null,[17,12],[17,35]]]]],[],0,null,["loc",[null,[17,6],[22,13]]]],
          ["inline","link-to",["Archive","project.archive",["get","model",["loc",[null,[24,44],[24,49]]]]],[],["loc",[null,[24,6],[24,51]]]],
          ["inline","link-to",["Delete","project.delete",["get","model",["loc",[null,[25,42],[25,47]]]]],["classNames","delete-action"],["loc",[null,[25,6],[25,76]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 8,
            "column": 2
          },
          "end": {
            "line": 27,
            "column": 2
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","drop-down",[],["classNames","content-actions-dropdown","alignment","left"],0,null,["loc",[null,[9,4],[26,18]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }());
  var child2 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 43,
              "column": 4
            },
            "end": {
              "line": 46,
              "column": 4
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","fc-option",[],["label","Everyone","action","createEveryoneTimeOffAssignment"],["loc",[null,[44,6],[44,77]]]],
          ["content","fc-divider",["loc",[null,[45,6],[45,20]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 29,
            "column": 2
          },
          "end": {
            "line": 47,
            "column": 2
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("    ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n    ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n    ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
        morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
        morphs[2] = dom.createMorphAt(fragment,5,5,contextualElement);
        morphs[3] = dom.createMorphAt(fragment,7,7,contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","fc-prompt",[],["label","Assign Person…"],["loc",[null,[38,4],[38,40]]]],
        ["inline","fc-option",[],["label","Add New Person…","action","addNewPersonToProject","value","test-add-new-person"],["loc",[null,[39,4],[41,45]]]],
        ["content","fc-divider",["loc",[null,[42,4],[42,18]]]],
        ["block","if",[["get","model.isTimeOff",["loc",[null,[43,10],[43,25]]]]],[],0,null,["loc",[null,[43,4],[46,11]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }());
  var child3 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 53,
            "column": 0
          },
          "end": {
            "line": 55,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row-drawer");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "multiple-nodes",
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 56,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createElement("div");
      dom.setAttribute(el1,"class","row-info");
      var el2 = dom.createTextNode("\n");
      dom.appendChild(el1, el2);
      var el2 = dom.createComment("");
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n");
      dom.appendChild(el1, el2);
      var el2 = dom.createComment("");
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createComment("");
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n");
      dom.appendChild(el1, el2);
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n\n");
      dom.appendChild(el0, el1);
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var element2 = dom.childAt(fragment, [0]);
      var morphs = new Array(4);
      morphs[0] = dom.createMorphAt(element2,1,1);
      morphs[1] = dom.createMorphAt(element2,3,3);
      morphs[2] = dom.createMorphAt(element2,5,5);
      morphs[3] = dom.createMorphAt(fragment,2,2,contextualElement);
      dom.insertBoundary(fragment, null);
      return morphs;
    },
    statements: [
      ["block","if",[["get","model.isTimeOff",["loc",[null,[2,8],[2,23]]]]],[],0,1,["loc",[null,[2,2],[27,9]]]],
      ["block","fc-select",[],["deferred",true,"from",["subexpr","@mut",[["get","sortedAvailablePeople",["loc",[null,[30,20],[30,41]]]]],[],[]],"valueKey","id","labelKey","name","onchange",["subexpr","action",["createAssignmentForPerson"],[],["loc",[null,[33,24],[33,60]]]],"addNewPersonToProject","addNewPersonToProject","createEveryoneTimeOffAssignment","createEveryoneTimeOffAssignment","resetToPrompt",true,"class","input-appearance hide-from-fullstory"],2,null,["loc",[null,[29,2],[47,16]]]],
      ["inline","updated-stamp",[],["date",["subexpr","@mut",[["get","model.updated_at",["loc",[null,[49,23],[49,39]]]]],[],[]],"person",["subexpr","@mut",[["get","model.updated_by",["loc",[null,[50,25],[50,41]]]]],[],[]]],["loc",[null,[49,2],[50,43]]]],
      ["block","if",[["get","showDrawer",["loc",[null,[53,6],[53,16]]]]],[],3,null,["loc",[null,[53,0],[55,7]]]]
    ],
    locals: [],
    templates: [child0, child1, child2, child3]
  };
}())); });

define('forecast/templates/project/assignments/_timeline', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 8,
            "column": 2
          },
          "end": {
            "line": 14,
            "column": 2
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("    ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
        return morphs;
      },
      statements: [
        ["inline","time-frame",[],["classNames","assignment gray temp-assignment","dayWidth",["subexpr","@mut",[["get","dayWidth",["loc",[null,[10,26],[10,34]]]]],[],[]],"timelineStartDate",["subexpr","@mut",[["get","startDate",["loc",[null,[11,35],[11,44]]]]],[],[]],"startDate",["subexpr","@mut",[["get","tempAssignment.startDate",["loc",[null,[12,27],[12,51]]]]],[],[]],"endDate",["subexpr","@mut",[["get","tempAssignment.endDate",["loc",[null,[13,25],[13,47]]]]],[],[]]],["loc",[null,[9,4],[13,49]]]]
      ],
      locals: [],
      templates: []
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "triple-curlies"
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 16,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createElement("div");
      dom.setAttribute(el1,"class","row-timeline");
      var el2 = dom.createTextNode("\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createComment("");
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n\n");
      dom.appendChild(el1, el2);
      var el2 = dom.createComment("");
      dom.appendChild(el1, el2);
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var element0 = dom.childAt(fragment, [0]);
      var morphs = new Array(2);
      morphs[0] = dom.createMorphAt(element0,1,1);
      morphs[1] = dom.createMorphAt(element0,3,3);
      return morphs;
    },
    statements: [
      ["inline","stretchable-overlay",[],["classNames","add-assignment","dayWidth",["subexpr","@mut",[["get","dayWidth",["loc",[null,[3,33],[3,41]]]]],[],[]],"timelineStartDate",["subexpr","@mut",[["get","startDate",["loc",[null,[4,42],[4,51]]]]],[],[]],"leftOffset",["subexpr","@mut",[["get","rowHeaderWidth",["loc",[null,[5,35],[5,49]]]]],[],[]],"onSelect","buildAssignment"],["loc",[null,[2,2],[6,52]]]],
      ["block","if",[["get","tempAssignment",["loc",[null,[8,8],[8,22]]]]],[],0,null,["loc",[null,[8,2],[14,9]]]]
    ],
    locals: [],
    templates: [child0]
  };
}())); });

define('forecast/templates/project/delete', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 13,
              "column": 6
            },
            "end": {
              "line": 17,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","input",[],["class","confirm-input","required","required","value",["subexpr","@mut",[["get","confirmText",["loc",[null,[16,22],[16,33]]]]],[],[]]],["loc",[null,[14,8],[16,35]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 31,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h2");
        var el4 = dom.createTextNode("Delete ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("strong");
        var el5 = dom.createTextNode("Caution:");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        This action will permanently delete this project, including all of its\n        assignments and milestones. There is no undo. Proceed?\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        dom.setAttribute(el2,"class","form-delete-confirm");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3,"class","button button-primary-red gtm-form-submit");
        var el4 = dom.createTextNode("\n        Delete\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3,"class","button button-cancel gtm-form-cancel");
        var el4 = dom.createTextNode("\n        Cancel\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [1]);
        var element1 = dom.childAt(element0, [5]);
        var element2 = dom.childAt(element1, [1]);
        var element3 = dom.childAt(element1, [3]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [1, 1]),1,1);
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [3]),1,1);
        morphs[2] = dom.createElementMorph(element2);
        morphs[3] = dom.createElementMorph(element3);
        return morphs;
      },
      statements: [
        ["content","model.nameWithCode",["loc",[null,[4,17],[4,39]]]],
        ["block","form-field",[],["label","Type YOLO to confirm","for","confirmText","of",["subexpr","@mut",[["get","this",["loc",[null,[13,70],[13,74]]]]],[],[]],"validateOnBlur",false],0,null,["loc",[null,[13,6],[17,21]]]],
        ["element","action",["doDelete"],[],["loc",[null,[22,14],[22,35]]]],
        ["element","action",["cancelDelete"],[],["loc",[null,[26,14],[26,39]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 32,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      dom.insertBoundary(fragment, null);
      return morphs;
    },
    statements: [
      ["block","modal-overlay",[],["close","cancelDelete"],0,null,["loc",[null,[1,0],[31,18]]]]
    ],
    locals: [],
    templates: [child0]
  };
}())); });

define('forecast/templates/project/milestones/form', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 6
            },
            "end": {
              "line": 10,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","input",[],["class","name-input","placeholder","Milestone","required","required","value",["subexpr","@mut",[["get","name",["loc",[null,[8,22],[8,26]]]]],[],[]],"autoselect",true],["loc",[null,[5,8],[9,33]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 14,
              "column": 6
            },
            "end": {
              "line": 16,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","date-select",[],["selected",["subexpr","@mut",[["get","date",["loc",[null,[15,31],[15,35]]]]],[],[]]],["loc",[null,[15,8],[15,37]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": [
            "multiple-nodes"
          ]
        },
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 37,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        dom.setAttribute(el2,"class","form-header");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        dom.setAttribute(el2,"class","form-options");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        dom.setAttribute(el2,"class","form-submit");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3,"type","submit");
        dom.setAttribute(el3,"class","button button-primary gtm-form-submit");
        var el4 = dom.createTextNode("\n        Update\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","form-bottom-right-action");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("a");
        dom.setAttribute(el4,"href","#");
        dom.setAttribute(el4,"class","test-form-delete-button");
        var el5 = dom.createTextNode("\n          ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("i");
        dom.setAttribute(el5,"class","icon");
        dom.setAttribute(el5,"data-icon","trash");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n          Delete\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","modal-addition");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [1]);
        var element1 = dom.childAt(element0, [5]);
        var element2 = dom.childAt(element1, [1]);
        var element3 = dom.childAt(element1, [3, 1]);
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]),1,1);
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [3]),1,1);
        morphs[2] = dom.createElementMorph(element2);
        morphs[3] = dom.createElementMorph(element3);
        morphs[4] = dom.createMorphAt(dom.childAt(fragment, [3]),1,1);
        return morphs;
      },
      statements: [
        ["block","form-field",[],["label","","for","name","of",["subexpr","@mut",[["get","this",["loc",[null,[4,43],[4,47]]]]],[],[]]],0,null,["loc",[null,[4,6],[10,21]]]],
        ["block","form-field",[],["for","date","of",["subexpr","@mut",[["get","this",["loc",[null,[14,34],[14,38]]]]],[],[]]],1,null,["loc",[null,[14,6],[16,21]]]],
        ["element","action",["save"],[],["loc",[null,[20,74],[20,91]]]],
        ["element","action",["deleteMilestone",["get","model",["loc",[null,[25,38],[25,43]]]]],[],["loc",[null,[25,11],[25,45]]]],
        ["inline","last-updated",[],["updated_at",["subexpr","@mut",[["get","model.updated_at",["loc",[null,[34,30],[34,46]]]]],[],[]],"updated_by",["subexpr","@mut",[["get","model.updated_by",["loc",[null,[35,30],[35,46]]]]],[],[]]],["loc",[null,[34,4],[35,48]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 38,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      dom.insertBoundary(fragment, null);
      return morphs;
    },
    statements: [
      ["block","modal-overlay",[],["close","closeForm"],0,null,["loc",[null,[1,0],[37,18]]]]
    ],
    locals: [],
    templates: [child0]
  };
}())); });

define('forecast/templates/project/shift/confirm', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 9,
              "column": 8
            },
            "end": {
              "line": 11,
              "column": 8
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          var el2 = dom.createTextNode("assignments and milestones");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 11,
              "column": 8
            },
            "end": {
              "line": 13,
              "column": 8
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          var el2 = dom.createTextNode("assignments (not including milestones)");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 33,
              "column": 8
            },
            "end": {
              "line": 38,
              "column": 8
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","inline-loader");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("i");
          dom.setAttribute(el2,"class","icon");
          dom.setAttribute(el2,"data-icon","loader");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            Shifting…\n          ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 41,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h2");
        var el4 = dom.createTextNode("Confirm Shift Timeline");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("\n        This will shift ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("’s:\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("ul");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("li");
        var el5 = dom.createTextNode("from ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("strong");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("li");
        var el5 = dom.createTextNode("to ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("strong");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("\n        for a total shift of ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("strong");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(". Proceed?\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3,"type","submit");
        dom.setAttribute(el3,"class","button button-primary");
        var el4 = dom.createTextNode("\n          Yes, Shift Timeline\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3,"type","reset");
        dom.setAttribute(el3,"class","button button-cancel");
        var el4 = dom.createTextNode("\n          Cancel\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [1]);
        var element1 = dom.childAt(element0, [1]);
        var element2 = dom.childAt(element1, [5]);
        var element3 = dom.childAt(element0, [3]);
        var element4 = dom.childAt(element3, [1]);
        var element5 = dom.childAt(element3, [3]);
        var morphs = new Array(10);
        morphs[0] = dom.createMorphAt(dom.childAt(element1, [3]),1,1);
        morphs[1] = dom.createMorphAt(element2,1,1);
        morphs[2] = dom.createMorphAt(dom.childAt(element2, [3, 1]),0,0);
        morphs[3] = dom.createMorphAt(dom.childAt(element2, [5, 1]),0,0);
        morphs[4] = dom.createMorphAt(dom.childAt(element1, [7, 1]),0,0);
        morphs[5] = dom.createAttrMorph(element4, 'disabled');
        morphs[6] = dom.createElementMorph(element4);
        morphs[7] = dom.createAttrMorph(element5, 'disabled');
        morphs[8] = dom.createElementMorph(element5);
        morphs[9] = dom.createMorphAt(element3,5,5);
        return morphs;
      },
      statements: [
        ["content","model.nameWithCode",["loc",[null,[6,24],[6,46]]]],
        ["block","if",[["get","includeMilestones",["loc",[null,[9,14],[9,31]]]]],[],0,1,["loc",[null,[9,8],[13,15]]]],
        ["inline","format-date",[["get","from",["loc",[null,[14,39],[14,43]]]],"ddd, D MMM YYYY"],[],["loc",[null,[14,25],[14,63]]]],
        ["inline","format-date",[["get","to",["loc",[null,[15,37],[15,39]]]],"ddd, D MMM YYYY"],[],["loc",[null,[15,23],[15,59]]]],
        ["content","formattedSpan",["loc",[null,[18,37],[18,54]]]],
        ["attribute","disabled",["get","isShifting",["loc",[null,[25,27],[25,37]]]]],
        ["element","action",["shift",["get","from",["loc",[null,[24,33],[24,37]]]],["get","to",["loc",[null,[24,38],[24,40]]]],["get","includeMilestones",["loc",[null,[24,41],[24,58]]]]],[],["loc",[null,[24,16],[24,60]]]],
        ["attribute","disabled",["get","isShifting",["loc",[null,[30,27],[30,37]]]]],
        ["element","action",["cancelConfirm"],[],["loc",[null,[29,16],[29,42]]]],
        ["block","if",[["get","isShifting",["loc",[null,[33,14],[33,24]]]]],[],2,null,["loc",[null,[33,8],[38,15]]]]
      ],
      locals: [],
      templates: [child0, child1, child2]
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 42,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      dom.insertBoundary(fragment, null);
      return morphs;
    },
    statements: [
      ["block","modal-overlay",[],["close","cancel"],0,null,["loc",[null,[1,0],[41,18]]]]
    ],
    locals: [],
    templates: [child0]
  };
}())); });

define('forecast/templates/project/shift/form', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 41,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1,"autofocus","autofocus");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h2");
        var el4 = dom.createTextNode("Shift Timeline for ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("\n        Project delayed? Shift all future assignments forward (or back)\n        in the timeline.\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        dom.setAttribute(el2,"class","form-options shift-form-options");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","field");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("label");
        var el5 = dom.createTextNode("Shift assignments from");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","field");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("label");
        var el5 = dom.createTextNode("to");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        dom.setAttribute(el2,"class","form-extras");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","field");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("label");
        dom.setAttribute(el4,"class","checkbox-label");
        var el5 = dom.createTextNode("\n          ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n          Include project milestones\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3,"type","submit");
        dom.setAttribute(el3,"class","button button-primary");
        var el4 = dom.createTextNode("\n          Shift Timeline\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3,"type","reset");
        dom.setAttribute(el3,"class","button button-cancel");
        var el4 = dom.createTextNode("\n          Cancel\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [1]);
        var element1 = dom.childAt(element0, [3]);
        var element2 = dom.childAt(element0, [7]);
        var element3 = dom.childAt(element2, [1]);
        var element4 = dom.childAt(element2, [3]);
        var morphs = new Array(6);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [1, 1]),1,1);
        morphs[1] = dom.createMorphAt(dom.childAt(element1, [1]),3,3);
        morphs[2] = dom.createMorphAt(dom.childAt(element1, [3]),3,3);
        morphs[3] = dom.createMorphAt(dom.childAt(element0, [5, 1, 1]),1,1);
        morphs[4] = dom.createElementMorph(element3);
        morphs[5] = dom.createElementMorph(element4);
        return morphs;
      },
      statements: [
        ["content","model.nameWithCode",["loc",[null,[4,29],[4,51]]]],
        ["inline","date-select",[],["selected",["subexpr","@mut",[["get","from",["loc",[null,[14,31],[14,35]]]]],[],[]]],["loc",[null,[14,8],[14,37]]]],
        ["inline","date-select",[],["selected",["subexpr","@mut",[["get","to",["loc",[null,[19,31],[19,33]]]]],[],[]]],["loc",[null,[19,8],[19,35]]]],
        ["inline","input",[],["type","checkbox","checked",["subexpr","@mut",[["get","includeMilestones",["loc",[null,[26,42],[26,59]]]]],[],[]]],["loc",[null,[26,10],[26,61]]]],
        ["element","action",["confirm"],[],["loc",[null,[33,16],[33,36]]]],
        ["element","action",["cancel"],[],["loc",[null,[36,16],[36,35]]]]
      ],
      locals: [],
      templates: []
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 42,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      dom.insertBoundary(fragment, null);
      return morphs;
    },
    statements: [
      ["block","modal-overlay",[],["close","cancel"],0,null,["loc",[null,[1,0],[41,18]]]]
    ],
    locals: [],
    templates: [child0]
  };
}())); });

define('forecast/templates/project/show', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.3.0",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 6
              },
              "end": {
                "line": 14,
                "column": 6
              }
            }
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            return morphs;
          },
          statements: [
            ["inline","project-drawer",[],["project",["subexpr","@mut",[["get","model",["loc",[null,[12,33],[12,38]]]]],[],[]],"harvestLink",["subexpr","@mut",[["get","harvestLink",["loc",[null,[13,37],[13,48]]]]],[],[]]],["loc",[null,[12,8],[13,50]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.3.0",
            "loc": {
              "source": null,
              "start": {
                "line": 16,
                "column": 6
              },
              "end": {
                "line": 27,
                "column": 6
              }
            }
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            return morphs;
          },
          statements: [
            ["inline","project-timeline",[],["project",["subexpr","@mut",[["get","model",["loc",[null,[17,35],[17,40]]]]],[],[]],"dayWidth",["subexpr","@mut",[["get","dayWidth",["loc",[null,[18,36],[18,44]]]]],[],[]],"startDate",["subexpr","@mut",[["get","startDate",["loc",[null,[19,37],[19,46]]]]],[],[]],"endDate",["subexpr","@mut",[["get","endDate",["loc",[null,[20,35],[20,42]]]]],[],[]],"rowHeaderWidth",["subexpr","@mut",[["get","rowHeaderWidth",["loc",[null,[21,42],[21,56]]]]],[],[]],"timelineStartDate",["subexpr","@mut",[["get","timelineStartDate",["loc",[null,[22,45],[22,62]]]]],[],[]],"activeMilestone",["subexpr","@mut",[["get","activeMilestoneController.model",["loc",[null,[23,43],[23,74]]]]],[],[]],"createMilestoneForProject",["subexpr","action",["createMilestoneForProject"],[],["loc",[null,[24,53],[24,89]]]],"editMilestone",["subexpr","action",["editMilestone"],[],["loc",[null,[25,41],[25,65]]]],"updateMilestone",["subexpr","action",["updateMilestone"],[],["loc",[null,[26,43],[26,69]]]]],["loc",[null,[17,8],[26,71]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 4
            },
            "end": {
              "line": 28,
              "column": 4
            }
          }
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
          morphs[2] = dom.createMorphAt(fragment,5,5,contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["inline","project-info",[],["project",["subexpr","@mut",[["get","model",["loc",[null,[6,29],[6,34]]]]],[],[]],"isCollapsed",["subexpr","@mut",[["get","isCollapsed",["loc",[null,[7,33],[7,44]]]]],[],[]],"showDrawer",["subexpr","@mut",[["get","showDrawer",["loc",[null,[8,32],[8,42]]]]],[],[]],"onExpand",["subexpr","action",["toggleAssignments"],[],["loc",[null,[9,30],[9,58]]]]],["loc",[null,[6,6],[9,60]]]],
          ["block","if",[["get","showDrawer",["loc",[null,[11,12],[11,22]]]]],[],0,null,["loc",[null,[11,6],[14,13]]]],
          ["block","if",[["get","isSetup",["loc",[null,[16,12],[16,19]]]]],[],1,null,["loc",[null,[16,6],[27,13]]]]
        ],
        locals: ["isSetup"],
        templates: [child0, child1]
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.3.0",
            "loc": {
              "source": null,
              "start": {
                "line": 31,
                "column": 6
              },
              "end": {
                "line": 43,
                "column": 6
              }
            }
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            return morphs;
          },
          statements: [
            ["inline","project-person",[],["project",["subexpr","@mut",[["get","item.project",["loc",[null,[32,33],[32,45]]]]],[],[]],"person",["subexpr","@mut",[["get","item.person",["loc",[null,[33,32],[33,43]]]]],[],[]],"activeAssignment",["subexpr","@mut",[["get","activeAssignmentController.model",["loc",[null,[34,42],[34,74]]]]],[],[]],"dayWidth",["subexpr","@mut",[["get","dayWidth",["loc",[null,[35,34],[35,42]]]]],[],[]],"startDate",["subexpr","@mut",[["get","startDate",["loc",[null,[36,35],[36,44]]]]],[],[]],"rowHeaderWidth",["subexpr","@mut",[["get","rowHeaderWidth",["loc",[null,[37,40],[37,54]]]]],[],[]],"showDrawer",["subexpr","@mut",[["get","showDrawer",["loc",[null,[38,36],[38,46]]]]],[],[]],"createAssignmentForPerson",["subexpr","action",["createAssignmentForPerson"],[],["loc",[null,[39,51],[39,87]]]],"editAssignment",["subexpr","action",["editAssignment"],[],["loc",[null,[40,40],[40,65]]]],"updateAssignment",["subexpr","action",["updateAssignment"],[],["loc",[null,[41,42],[41,69]]]],"splitAssignment",["subexpr","action",["confirmSplitAssignment"],[],["loc",[null,[42,41],[42,74]]]]],["loc",[null,[32,8],[42,76]]]]
          ],
          locals: ["item"],
          templates: []
        };
      }());
      var child1 = (function() {
        var child0 = (function() {
          var child0 = (function() {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.3.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 47,
                    "column": 10
                  },
                  "end": {
                    "line": 50,
                    "column": 10
                  }
                }
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
                morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
                return morphs;
              },
              statements: [
                ["inline","partial",["project/assignments/add"],[],["loc",[null,[48,12],[48,49]]]],
                ["inline","partial",["project/assignments/timeline"],[],["loc",[null,[49,12],[49,54]]]]
              ],
              locals: [],
              templates: []
            };
          }());
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.3.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 46,
                  "column": 8
                },
                "end": {
                  "line": 51,
                  "column": 8
                }
              }
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [
              ["block","if",[["get","isSetup",["loc",[null,[47,16],[47,23]]]]],[],0,null,["loc",[null,[47,10],[50,17]]]]
            ],
            locals: ["isSetup"],
            templates: [child0]
          };
        }());
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.3.0",
            "loc": {
              "source": null,
              "start": {
                "line": 45,
                "column": 6
              },
              "end": {
                "line": 52,
                "column": 6
              }
            }
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","deferred-row",[],["class","content-child-row content-add-row"],0,null,["loc",[null,[46,8],[51,25]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 53,
              "column": 4
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","each",[["get","sortedAssignedPeople",["loc",[null,[31,14],[31,34]]]]],["key","@index"],0,null,["loc",[null,[31,6],[43,15]]]],
          ["block","if",[["get","realtime.isAdmin",["loc",[null,[45,12],[45,28]]]]],[],1,null,["loc",[null,[45,6],[52,13]]]]
        ],
        locals: [],
        templates: [child0, child1]
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 55,
              "column": 4
            },
            "end": {
              "line": 60,
              "column": 4
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","select-person",[],["project",["subexpr","@mut",[["get","model",["loc",[null,[56,30],[56,35]]]]],[],[]],"sortedAvailablePeople",["subexpr","@mut",[["get","sortedAvailablePeople",["loc",[null,[57,44],[57,65]]]]],[],[]],"onPerson",["subexpr","action",["assignPerson"],[],["loc",[null,[58,31],[58,54]]]],"onCancel",["subexpr","action",["cancelAssignPerson"],[],["loc",[null,[59,31],[59,60]]]]],["loc",[null,[56,6],[59,62]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 62,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","project-color");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("  ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [1]);
        var morphs = new Array(4);
        morphs[0] = dom.createAttrMorph(element0, 'class');
        morphs[1] = dom.createMorphAt(element0,3,3);
        morphs[2] = dom.createMorphAt(element0,5,5);
        morphs[3] = dom.createMorphAt(element0,7,7);
        return morphs;
      },
      statements: [
        ["attribute","class",["concat",["row project-row ",["get","model.color",["loc",[null,[2,32],[2,43]]]]," ",["subexpr","if",[["get","isShowingAssignments",["loc",[null,[2,51],[2,71]]]],"expanded-row"],[],["loc",[null,[2,46],[2,88]]]]," ",["subexpr","if",[["get","model.isTimeOff",["loc",[null,[2,94],[2,109]]]],"time-off-project"],[],["loc",[null,[2,89],[2,130]]]]]]],
        ["block","deferred-row",[],["class","content-parent-row","recheckWhen",["subexpr","@mut",[["get","isFiltered",["loc",[null,[5,59],[5,69]]]]],[],[]]],0,null,["loc",[null,[5,4],[28,21]]]],
        ["block","if",[["get","isShowingAssignments",["loc",[null,[30,10],[30,30]]]]],[],1,null,["loc",[null,[30,4],[53,11]]]],
        ["block","if",[["get","tempAssignment",["loc",[null,[55,10],[55,24]]]]],[],2,null,["loc",[null,[55,4],[60,11]]]]
      ],
      locals: [],
      templates: [child0, child1, child2]
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 63,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      dom.insertBoundary(fragment, null);
      return morphs;
    },
    statements: [
      ["block","scroll-to-top",[],["shouldScroll",["subexpr","@mut",[["get","isActiveRow",["loc",[null,[1,30],[1,41]]]]],[],[]]],0,null,["loc",[null,[1,0],[62,18]]]]
    ],
    locals: [],
    templates: [child0]
  };
}())); });

define('forecast/templates/projects', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 2,
            "column": 2
          },
          "end": {
            "line": 4,
            "column": 2
          }
        }
      },
      isEmpty: false,
      arity: 1,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("    ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
        return morphs;
      },
      statements: [
        ["inline","render",["project.show",["get","project",["loc",[null,[3,28],[3,35]]]]],[],["loc",[null,[3,4],[3,37]]]]
      ],
      locals: ["project"],
      templates: []
    };
  }());
  var child1 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 6
            },
            "end": {
              "line": 11,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","icon");
          dom.setAttribute(el1,"data-icon","add");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        New Project\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 7,
            "column": 4
          },
          "end": {
            "line": 12,
            "column": 4
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","simple-button",[],["action","addProject"],0,null,["loc",[null,[8,6],[11,24]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "triple-curlies"
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 16,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createElement("div");
      dom.setAttribute(el1,"class","project-rows");
      var el2 = dom.createTextNode("\n");
      dom.appendChild(el1, el2);
      var el2 = dom.createComment("");
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createElement("div");
      dom.setAttribute(el2,"class","row add-row");
      var el3 = dom.createTextNode("\n");
      dom.appendChild(el2, el3);
      var el3 = dom.createComment("");
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("    ");
      dom.appendChild(el2, el3);
      var el3 = dom.createComment("");
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("\n  ");
      dom.appendChild(el2, el3);
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n");
      dom.appendChild(el1, el2);
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var element0 = dom.childAt(fragment, [0]);
      var element1 = dom.childAt(element0, [3]);
      var morphs = new Array(3);
      morphs[0] = dom.createMorphAt(element0,1,1);
      morphs[1] = dom.createMorphAt(element1,1,1);
      morphs[2] = dom.createMorphAt(element1,3,3);
      return morphs;
    },
    statements: [
      ["block","each",[["get","sortedFilteredProjects",["loc",[null,[2,10],[2,32]]]]],["key","id"],0,null,["loc",[null,[2,2],[4,11]]]],
      ["block","if",[["get","realtime.isAdmin",["loc",[null,[7,10],[7,26]]]]],[],1,null,["loc",[null,[7,4],[12,11]]]],
      ["inline","partial",["shared/ftux_harvest_link"],[],["loc",[null,[13,4],[13,42]]]]
    ],
    locals: [],
    templates: [child0, child1]
  };
}())); });

define('forecast/templates/projects/_color_picker', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 2
            },
            "end": {
              "line": 12,
              "column": 2
            }
          }
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          dom.setAttribute(el1,"href","#");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createElementMorph(element0);
          morphs[2] = dom.createMorphAt(element0,1,1);
          return morphs;
        },
        statements: [
          ["attribute","class",["concat",["color-option ",["get","color.name",["loc",[null,[8,38],[8,48]]]]," gtm-project-color-option"]]],
          ["element","action",["pickColor",["get","color.name",["loc",[null,[9,37],[9,47]]]]],[],["loc",[null,[9,16],[9,49]]]],
          ["content","color.label",["loc",[null,[10,6],[10,21]]]]
        ],
        locals: ["color"],
        templates: []
      };
    }());
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": [
            "wrong-type"
          ]
        },
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 13,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","each",[["get","colorLabels",["loc",[null,[7,10],[7,21]]]]],["key","name"],0,null,["loc",[null,[7,2],[12,11]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 14,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      dom.insertBoundary(fragment, null);
      return morphs;
    },
    statements: [
      ["block","drop-down",[],["buttonTemplate","projects/color_picker_button","classNames","project-color-dropdown","alignment","left","color",["subexpr","@mut",[["get","color",["loc",[null,[4,19],[4,24]]]]],[],[]],"label",["subexpr","@mut",[["get","colorLabel",["loc",[null,[5,19],[5,29]]]]],[],[]]],0,null,["loc",[null,[1,0],[13,14]]]]
    ],
    locals: [],
    templates: [child0]
  };
}())); });

define('forecast/templates/projects/_color_picker_button', [], function(){ return Ember.HTMLBars.template((function() {
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "multiple-nodes",
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 3,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createElement("i");
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var element0 = dom.childAt(fragment, [0]);
      var morphs = new Array(2);
      morphs[0] = dom.createAttrMorph(element0, 'class');
      morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
      return morphs;
    },
    statements: [
      ["attribute","class",["concat",["color ",["get","color",["loc",[null,[1,18],[1,23]]]]]]],
      ["content","label",["loc",[null,[2,0],[2,9]]]]
    ],
    locals: [],
    templates: []
  };
}())); });

define('forecast/templates/projects/_content_filter_button', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 6,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("span");
        dom.setAttribute(el1,"class","filter-reset");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("i");
        dom.setAttribute(el2,"class","icon");
        dom.setAttribute(el2,"data-icon","x-white");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [1]);
        var morphs = new Array(1);
        morphs[0] = dom.createElementMorph(element0);
        return morphs;
      },
      statements: [
        ["element","action",["clearFilter"],["target",["get","clearFilterTarget",["loc",[null,[7,59],[7,76]]]],"bubbles",false],["loc",[null,[7,29],[8,67]]]]
      ],
      locals: [],
      templates: []
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "multiple-nodes",
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 12,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createElement("span");
      var el2 = dom.createTextNode("\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createComment("");
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n");
      dom.appendChild(el1, el2);
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      var el1 = dom.createElement("i");
      dom.setAttribute(el1,"class","icon row-expand-icon");
      dom.setAttribute(el1,"data-icon","arrow-down");
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n\n");
      dom.appendChild(el0, el1);
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var element1 = dom.childAt(fragment, [0]);
      var morphs = new Array(3);
      morphs[0] = dom.createAttrMorph(element1, 'class');
      morphs[1] = dom.createMorphAt(element1,1,1);
      morphs[2] = dom.createMorphAt(fragment,4,4,contextualElement);
      dom.insertBoundary(fragment, null);
      return morphs;
    },
    statements: [
      ["attribute","class",["concat",[["get","color",["loc",[null,[1,15],[1,20]]]]," ",["subexpr","if",[["get","isFiltered",["loc",[null,[1,28],[1,38]]]],"color-block"],[],["loc",[null,[1,23],[1,54]]]]," selected-filter"]]],
      ["content","label",["loc",[null,[2,2],[2,11]]]],
      ["block","if",[["get","isFiltered",["loc",[null,[6,6],[6,16]]]]],[],0,null,["loc",[null,[6,0],[11,7]]]]
    ],
    locals: [],
    templates: [child0]
  };
}())); });

define('forecast/templates/projects/_context_menu', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.3.0",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 4
              },
              "end": {
                "line": 9,
                "column": 4
              }
            }
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            dom.setAttribute(el1,"target","_blank");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.setAttribute(el2,"class","icon dropdown-harvest-icon");
            dom.setAttribute(el2,"data-icon","harvest");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        View Report in Harvest\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(1);
            morphs[0] = dom.createAttrMorph(element0, 'href');
            return morphs;
          },
          statements: [
            ["attribute","href",["concat",[["get","harvestLink",["loc",[null,[5,17],[5,28]]]]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 2
            },
            "end": {
              "line": 13,
              "column": 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          dom.setAttribute(el1,"href","#");
          var el2 = dom.createTextNode("Shift Timeline");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("hr");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          dom.setAttribute(el1,"href","#");
          dom.setAttribute(el1,"class","test-archive");
          var el2 = dom.createTextNode("Archive");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          dom.setAttribute(el1,"href","#");
          dom.setAttribute(el1,"class","delete-action");
          var el2 = dom.createTextNode("Delete");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var element2 = dom.childAt(fragment, [7]);
          var element3 = dom.childAt(fragment, [9]);
          var morphs = new Array(5);
          morphs[0] = dom.createAttrMorph(element1, 'class');
          morphs[1] = dom.createElementMorph(element1);
          morphs[2] = dom.createMorphAt(fragment,3,3,contextualElement);
          morphs[3] = dom.createElementMorph(element2);
          morphs[4] = dom.createElementMorph(element3);
          return morphs;
        },
        statements: [
          ["attribute","class",["subexpr","unless",[["get","model.canBeShifted",["loc",[null,[3,65],[3,83]]]],"is-disabled"],[],["loc",[null,[3,56],[3,99]]]]],
          ["element","action",["goToShiftRoute",["get","model",["loc",[null,[3,42],[3,47]]]]],[],["loc",[null,[3,16],[3,49]]]],
          ["block","if",[["get","model.isLinkedToHarvest",["loc",[null,[4,10],[4,33]]]]],[],0,null,["loc",[null,[4,4],[9,11]]]],
          ["element","action",["goToArchiveRoute",["get","model",["loc",[null,[11,44],[11,49]]]]],[],["loc",[null,[11,16],[11,51]]]],
          ["element","action",["goToDeleteRoute",["get","model",["loc",[null,[12,43],[12,48]]]]],[],["loc",[null,[12,16],[12,50]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": [
            "wrong-type"
          ]
        },
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 14,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","drop-down",[],["classNames","form-settings-dropdown","alignment","left"],0,null,["loc",[null,[2,2],[13,16]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 15,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      dom.insertBoundary(fragment, null);
      return morphs;
    },
    statements: [
      ["block","unless",[["get","model.isNew",["loc",[null,[1,10],[1,21]]]]],[],0,null,["loc",[null,[1,0],[14,11]]]]
    ],
    locals: [],
    templates: [child0]
  };
}())); });

define('forecast/templates/projects/control-buttons', [], function(){ return Ember.HTMLBars.template((function() {
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type",
          "multiple-nodes"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 8,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n\n");
      dom.appendChild(el0, el1);
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(2);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
      dom.insertBoundary(fragment, 0);
      return morphs;
    },
    statements: [
      ["inline","toggle-button",[],["buttonTypeA","expand-all","actionA","expandAll","buttonTypeB","collapse-all","actionB","collapseAll"],["loc",[null,[1,0],[2,66]]]],
      ["inline","pressed-button",[],["buttonType","show-hours-drawer","tooltipText","Toggle Hours Drawer","action","toggleProjectsDrawer","isPressed",["subexpr","@mut",[["get","showDrawer",["loc",[null,[7,27],[7,37]]]]],[],[]]],["loc",[null,[4,0],[7,39]]]]
    ],
    locals: [],
    templates: []
  };
}())); });

define('forecast/templates/projects/filter', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": [
            "wrong-type"
          ]
        },
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
        return morphs;
      },
      statements: [
        ["inline","color-select",[],["content",["subexpr","@mut",[["get","filterOptions",["loc",[null,[7,25],[7,38]]]]],[],[]],"selection",["subexpr","@mut",[["get","currentFilter",["loc",[null,[8,27],[8,40]]]]],[],[]]],["loc",[null,[7,2],[8,42]]]]
      ],
      locals: [],
      templates: []
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 10,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      dom.insertBoundary(fragment, null);
      return morphs;
    },
    statements: [
      ["block","drop-down",[],["buttonTemplate","projects/content_filter_button","classNames","filter-dropdown","isFiltered",["subexpr","@mut",[["get","isFiltered",["loc",[null,[3,24],[3,34]]]]],[],[]],"label",["subexpr","@mut",[["get","currentFilterText",["loc",[null,[4,19],[4,36]]]]],[],[]],"color",["subexpr","@mut",[["get","currentFilter.name",["loc",[null,[5,19],[5,37]]]]],[],[]],"clearFilterTarget",["subexpr","@mut",[["get","this",["loc",[null,[6,31],[6,35]]]]],[],[]]],0,null,["loc",[null,[1,0],[9,14]]]]
    ],
    locals: [],
    templates: [child0]
  };
}())); });

define('forecast/templates/projects/form', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 6
            },
            "end": {
              "line": 9,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","input",[],["class","name-input","placeholder","Project Name","required","required","value",["subexpr","@mut",[["get","name",["loc",[null,[8,22],[8,26]]]]],[],[]]],["loc",[null,[5,8],[8,28]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.3.0",
            "loc": {
              "source": null,
              "start": {
                "line": 14,
                "column": 8
              },
              "end": {
                "line": 25,
                "column": 8
              }
            }
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
            return morphs;
          },
          statements: [
            ["inline","fc-option",[],["label","Add New Client…","action","addNewClient","value","test-add-new-client"],["loc",[null,[21,10],[23,51]]]],
            ["content","fc-divider",["loc",[null,[24,10],[24,24]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 13,
              "column": 6
            },
            "end": {
              "line": 26,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","fc-select",[],["class","input-appearance test-client-input","from",["subexpr","@mut",[["get","sortedClients",["loc",[null,[15,26],[15,39]]]]],[],[]],"valueKey","id","labelKey","name","addNewClient","addNewClient","selected",["subexpr","@mut",[["get","selectedClient",["loc",[null,[19,30],[19,44]]]]],[],[]],"onchange",["subexpr","action",[["subexpr","mut",[["get","selectedClient",["loc",[null,[20,43],[20,57]]]]],[],["loc",[null,[20,38],[20,58]]]]],[],["loc",[null,[20,30],[20,59]]]]],0,null,["loc",[null,[14,8],[25,22]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    var child2 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.3.0",
            "loc": {
              "source": null,
              "start": {
                "line": 29,
                "column": 8
              },
              "end": {
                "line": 34,
                "column": 8
              }
            }
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            return morphs;
          },
          statements: [
            ["inline","input",[],["class","input-appearance test-new-client-input","placeholder","New Client","value",["subexpr","@mut",[["get","newClientName",["loc",[null,[32,24],[32,37]]]]],[],[]],"autoselect",true],["loc",[null,[30,10],[33,35]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 28,
              "column": 6
            },
            "end": {
              "line": 35,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","form-field",[],["label","","for","newClientName","of",["subexpr","@mut",[["get","this",["loc",[null,[29,54],[29,58]]]]],[],[]]],0,null,["loc",[null,[29,8],[34,23]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    var child3 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 37,
              "column": 6
            },
            "end": {
              "line": 41,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","input",[],["class","code-input","placeholder","Optional","value",["subexpr","@mut",[["get","code",["loc",[null,[40,22],[40,26]]]]],[],[]]],["loc",[null,[38,8],[40,28]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child4 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 43,
              "column": 6
            },
            "end": {
              "line": 45,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","partial",["projects/color_picker"],[],["loc",[null,[44,8],[44,43]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child5 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 47,
              "column": 6
            },
            "end": {
              "line": 54,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","textarea",[],["class","notes-input","placeholder","Optional details or related link","rows","2","maxlength","1000","value",["subexpr","@mut",[["get","notes",["loc",[null,[52,25],[52,30]]]]],[],[]],"autofocus",["subexpr","@mut",[["get","edit_notes",["loc",[null,[53,29],[53,39]]]]],[],[]]],["loc",[null,[48,8],[53,41]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child6 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 58,
              "column": 6
            },
            "end": {
              "line": 63,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1,"type","submit");
          dom.setAttribute(el1,"class","button button-primary gtm-form-submit");
          var el2 = dom.createTextNode("\n          Update Project\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element3 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createElementMorph(element3);
          return morphs;
        },
        statements: [
          ["element","action",["submitProject"],[],["loc",[null,[60,16],[60,42]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child7 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 63,
              "column": 6
            },
            "end": {
              "line": 68,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1,"type","submit");
          dom.setAttribute(el1,"class","button button-primary gtm-form-submit");
          var el2 = dom.createTextNode("\n          Save Project\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createElementMorph(element2);
          return morphs;
        },
        statements: [
          ["element","action",["submitProject"],[],["loc",[null,[65,16],[65,42]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child8 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.3.0",
            "loc": {
              "source": null,
              "start": {
                "line": 83,
                "column": 6
              },
              "end": {
                "line": 86,
                "column": 6
              }
            }
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        This project is\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            dom.setAttribute(el1,"target","_blank");
            var el2 = dom.createTextNode("linked to Harvest");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(1);
            morphs[0] = dom.createAttrMorph(element0, 'href');
            return morphs;
          },
          statements: [
            ["attribute","href",["concat",[["get","harvestLink",["loc",[null,[85,19],[85,30]]]]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 78,
              "column": 2
            },
            "end": {
              "line": 88,
              "column": 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","modal-addition");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(element1,1,1);
          morphs[1] = dom.createMorphAt(element1,3,3);
          return morphs;
        },
        statements: [
          ["inline","last-updated",[],["updated_at",["subexpr","@mut",[["get","model.updated_at",["loc",[null,[80,32],[80,48]]]]],[],[]],"updated_by",["subexpr","@mut",[["get","model.updated_by",["loc",[null,[81,32],[81,48]]]]],[],[]]],["loc",[null,[80,6],[81,50]]]],
          ["block","harvest-link-message",[],["model",["subexpr","@mut",[["get","model",["loc",[null,[83,36],[83,41]]]]],[],[]]],0,null,["loc",[null,[83,6],[86,31]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": [
            "multiple-nodes",
            "wrong-type"
          ]
        },
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 89,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        dom.setAttribute(el2,"class","form-header");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        dom.setAttribute(el2,"class","form-options");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3,"type","reset");
        dom.setAttribute(el3,"class","button button-cancel gtm-form-cancel");
        var el4 = dom.createTextNode("\n        Cancel\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element4 = dom.childAt(fragment, [1]);
        var element5 = dom.childAt(element4, [3]);
        var element6 = dom.childAt(element4, [5]);
        var element7 = dom.childAt(element6, [3]);
        var morphs = new Array(10);
        morphs[0] = dom.createMorphAt(dom.childAt(element4, [1]),1,1);
        morphs[1] = dom.createMorphAt(element5,1,1);
        morphs[2] = dom.createMorphAt(element5,3,3);
        morphs[3] = dom.createMorphAt(element5,5,5);
        morphs[4] = dom.createMorphAt(element5,7,7);
        morphs[5] = dom.createMorphAt(element5,9,9);
        morphs[6] = dom.createMorphAt(element6,1,1);
        morphs[7] = dom.createElementMorph(element7);
        morphs[8] = dom.createMorphAt(element6,5,5);
        morphs[9] = dom.createMorphAt(fragment,3,3,contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","form-field",[],["label","","for","name","of",["subexpr","@mut",[["get","this",["loc",[null,[4,43],[4,47]]]]],[],[]]],0,null,["loc",[null,[4,6],[9,21]]]],
        ["block","form-field",[],["for","client","of",["subexpr","@mut",[["get","this",["loc",[null,[13,36],[13,40]]]]],[],[]]],1,null,["loc",[null,[13,6],[26,21]]]],
        ["block","if",[["get","showNewClientInput",["loc",[null,[28,12],[28,30]]]]],[],2,null,["loc",[null,[28,6],[35,13]]]],
        ["block","form-field",[],["label","Project Code","for","code","of",["subexpr","@mut",[["get","this",["loc",[null,[37,55],[37,59]]]]],[],[]]],3,null,["loc",[null,[37,6],[41,21]]]],
        ["block","form-field",[],["label","Color Label","for","color","of",["subexpr","@mut",[["get","this",["loc",[null,[43,55],[43,59]]]]],[],[]]],4,null,["loc",[null,[43,6],[45,21]]]],
        ["block","form-field",[],["for","notes","of",["subexpr","@mut",[["get","this",["loc",[null,[47,35],[47,39]]]]],[],[]]],5,null,["loc",[null,[47,6],[54,21]]]],
        ["block","unless",[["get","model.isNew",["loc",[null,[58,16],[58,27]]]]],[],6,7,["loc",[null,[58,6],[68,17]]]],
        ["element","action",["cancelProject"],[],["loc",[null,[70,14],[70,40]]]],
        ["inline","partial",["projects/context_menu"],[],["loc",[null,[74,6],[74,41]]]],
        ["block","unless",[["get","model.isNew",["loc",[null,[78,12],[78,23]]]]],[],8,null,["loc",[null,[78,2],[88,13]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6, child7, child8]
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 90,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      dom.insertBoundary(fragment, null);
      return morphs;
    },
    statements: [
      ["block","modal-overlay",[],["close","cancelProject"],0,null,["loc",[null,[1,0],[89,18]]]]
    ],
    locals: [],
    templates: [child0]
  };
}())); });

define('forecast/templates/projects/hours-drawer', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 38,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","row-drawer drawer-label");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","drawer-inner");
        var el3 = dom.createTextNode("\n      Future Scheduled Hours\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","question-bubble");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("i");
        dom.setAttribute(el4,"class","icon");
        dom.setAttribute(el4,"data-icon","question");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","drawer-help");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("p");
        var el5 = dom.createTextNode("\n          ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("strong");
        var el6 = dom.createTextNode("Future Scheduled Hours");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n          are the hours scheduled from today through the end of a project.\n          This includes today’s hours.\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("p");
        var el5 = dom.createTextNode("\n          ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("strong");
        var el6 = dom.createTextNode("Budget Remaining");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n          is also displayed for projects linked to Harvest, if an hours-based\n          budget is set in Harvest.\n          This helps you schedule based on a project’s progress.\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("ul");
        dom.setAttribute(el4,"class","drawer-help-example");
        var el5 = dom.createTextNode("\n          ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("li");
        var el6 = dom.createTextNode("\n            ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("strong");
        var el7 = dom.createTextNode("250");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode(" ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("span");
        var el7 = dom.createTextNode("–");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n            Future Scheduled Hours\n          ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("li");
        var el6 = dom.createTextNode("\n            ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("strong");
        var el7 = dom.createTextNode("275.00");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode(" ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("span");
        var el7 = dom.createTextNode("–");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n            Budget Remaining (if available from Harvest)\n          ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("p");
        var el5 = dom.createTextNode("\n          In this example, Forecast is surfacing that there is an excess of\n          25 hours remaining in the budget that is not scheduled.\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 39,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      dom.insertBoundary(fragment, null);
      return morphs;
    },
    statements: [
      ["block","if",[["get","showDrawer",["loc",[null,[1,6],[1,16]]]]],[],0,null,["loc",[null,[1,0],[38,7]]]]
    ],
    locals: [],
    templates: [child0]
  };
}())); });

define('forecast/templates/projects_page', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 6,
            "column": 4
          },
          "end": {
            "line": 9,
            "column": 4
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("      ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("i");
        dom.setAttribute(el1,"class","icon");
        dom.setAttribute(el1,"data-icon","add-white");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n      New Project\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }());
  var child1 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 12,
              "column": 6
            },
            "end": {
              "line": 14,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Import from Harvest\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 11,
            "column": 4
          },
          "end": {
            "line": 15,
            "column": 4
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","simple-button",[],["action","goToProjectsImport","class","test-import-button"],0,null,["loc",[null,[12,6],[14,24]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }());
  var child2 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 17,
            "column": 4
          },
          "end": {
            "line": 20,
            "column": 4
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("      ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("i");
        dom.setAttribute(el1,"class","icon icon-right");
        dom.setAttribute(el1,"data-icon","arrow-right");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n      View Archived Projects\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }());
  var child3 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 23,
            "column": 2
          },
          "end": {
            "line": 27,
            "column": 2
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("    ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("ol");
        dom.setAttribute(el1,"class","content-list project-list");
        var el2 = dom.createTextNode("\n      ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
        return morphs;
      },
      statements: [
        ["inline","render",["account.grouped_projects_list",["get","model",["loc",[null,[25,47],[25,52]]]]],[],["loc",[null,[25,6],[25,54]]]]
      ],
      locals: [],
      templates: []
    };
  }());
  var child4 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 30,
              "column": 6
            },
            "end": {
              "line": 30,
              "column": 53
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Add New Project");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 27,
            "column": 2
          },
          "end": {
            "line": 32,
            "column": 2
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("    ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","empty-content");
        var el2 = dom.createTextNode("\n      You haven’t added any projects yet!\n      ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
        return morphs;
      },
      statements: [
        ["block","link-to",["projects_page.new"],[],0,null,["loc",[null,[30,6],[30,65]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "triple-curlies"
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 35,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createElement("div");
      dom.setAttribute(el1,"class","container");
      var el2 = dom.createTextNode("\n\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createElement("h1");
      var el3 = dom.createTextNode("Projects");
      dom.appendChild(el2, el3);
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createElement("div");
      dom.setAttribute(el2,"class","list-controls");
      var el3 = dom.createTextNode("\n");
      dom.appendChild(el2, el3);
      var el3 = dom.createComment("");
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("\n");
      dom.appendChild(el2, el3);
      var el3 = dom.createComment("");
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("\n");
      dom.appendChild(el2, el3);
      var el3 = dom.createComment("");
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("  ");
      dom.appendChild(el2, el3);
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n\n");
      dom.appendChild(el1, el2);
      var el2 = dom.createComment("");
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n");
      dom.appendChild(el1, el2);
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var element0 = dom.childAt(fragment, [0]);
      var element1 = dom.childAt(element0, [3]);
      var morphs = new Array(4);
      morphs[0] = dom.createMorphAt(element1,1,1);
      morphs[1] = dom.createMorphAt(element1,3,3);
      morphs[2] = dom.createMorphAt(element1,5,5);
      morphs[3] = dom.createMorphAt(element0,5,5);
      return morphs;
    },
    statements: [
      ["block","simple-button",[],["class","button-primary test-add-project","action","addProject"],0,null,["loc",[null,[6,4],[9,22]]]],
      ["block","if",[["get","account.isConnectedToHarvest",["loc",[null,[11,10],[11,38]]]]],[],1,null,["loc",[null,[11,4],[15,11]]]],
      ["block","link-to",["account.projects_archived_page"],["tagName","button","class","button button-as-gray-link right"],2,null,["loc",[null,[17,4],[20,16]]]],
      ["block","if",[["get","model.length",["loc",[null,[23,8],[23,20]]]]],[],3,4,["loc",[null,[23,2],[32,9]]]]
    ],
    locals: [],
    templates: [child0, child1, child2, child3, child4]
  };
}())); });

define('forecast/templates/schedule', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": [
            "wrong-type",
            "multiple-nodes"
          ]
        },
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 17,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","meta-rows");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","row week-row");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [3]);
        var element1 = dom.childAt(element0, [3]);
        var morphs = new Array(6);
        morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
        morphs[1] = dom.createMorphAt(element0,1,1);
        morphs[2] = dom.createMorphAt(element1,1,1);
        morphs[3] = dom.createMorphAt(element1,3,3);
        morphs[4] = dom.createMorphAt(element1,5,5);
        morphs[5] = dom.createMorphAt(fragment,5,5,contextualElement);
        return morphs;
      },
      statements: [
        ["inline","partial",["schedule/daygrid"],[],["loc",[null,[4,2],[4,32]]]],
        ["inline","partial",["shared/controls_row"],[],["loc",[null,[7,4],[7,37]]]],
        ["inline","outlet",["filter"],[],["loc",[null,[10,6],[10,25]]]],
        ["inline","outlet",["drawer"],[],["loc",[null,[11,6],[11,25]]]],
        ["inline","partial",["schedule/weekgrid"],[],["loc",[null,[12,6],[12,37]]]],
        ["content","outlet",["loc",[null,[16,2],[16,12]]]]
      ],
      locals: [],
      templates: []
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 18,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      dom.insertBoundary(fragment, null);
      return morphs;
    },
    statements: [
      ["block","schedule-container",[],["drawerOpen",["subexpr","@mut",[["get","showDrawer",["loc",[null,[2,33],[2,43]]]]],[],[]],"onWindowResize","setWeeksForWindow","class",["subexpr","concat",[["subexpr","if",[["get","zoom.zoomClass",[]],["subexpr","-normalize-class",["zoom.zoomClass",["get","zoom.zoomClass",[]]],[],[]]],[],[]]," "],[],[]]],0,null,["loc",[null,[1,0],[17,23]]]]
    ],
    locals: [],
    templates: [child0]
  };
}())); });

define('forecast/templates/schedule/_daygrid', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 6
            },
            "end": {
              "line": 6,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          return morphs;
        },
        statements: [
          ["attribute","class",["concat",["timeline-day ",["subexpr","if",[["get","day.isToday",["loc",[null,[5,38],[5,49]]]],"today"],[],["loc",[null,[5,33],[5,59]]]]]]]
        ],
        locals: ["day"],
        templates: []
      };
    }());
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 2,
            "column": 2
          },
          "end": {
            "line": 8,
            "column": 2
          }
        }
      },
      isEmpty: false,
      arity: 1,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("    ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","timeline-week");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("    ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
        return morphs;
      },
      statements: [
        ["block","each",[["get","week.days",["loc",[null,[4,14],[4,23]]]]],["key","@index"],0,null,["loc",[null,[4,6],[6,15]]]]
      ],
      locals: ["week"],
      templates: [child0]
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "triple-curlies"
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 10,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createElement("div");
      dom.setAttribute(el1,"class","day-grid");
      var el2 = dom.createTextNode("\n");
      dom.appendChild(el1, el2);
      var el2 = dom.createComment("");
      dom.appendChild(el1, el2);
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);
      return morphs;
    },
    statements: [
      ["block","each",[["get","workWeekGrid",["loc",[null,[2,10],[2,22]]]]],["key","@index"],0,null,["loc",[null,[2,2],[8,11]]]]
    ],
    locals: [],
    templates: [child0]
  };
}())); });

define('forecast/templates/schedule/_weekgrid', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 8
            },
            "end": {
              "line": 11,
              "column": 8
            }
          }
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createMorphAt(element0,1,1);
          return morphs;
        },
        statements: [
          ["attribute","class",["concat",["timeline-day ",["subexpr","if",[["get","day.weekDay",["loc",[null,[8,37],[8,48]]]],"week-day"],[],["loc",[null,[8,32],[8,61]]]]," ",["subexpr","if",[["get","day.isToday",["loc",[null,[8,67],[8,78]]]],"today"],[],["loc",[null,[8,62],[8,88]]]]]]],
          ["inline","week-day",[["get","day.date",["loc",[null,[9,23],[9,31]]]]],[],["loc",[null,[9,12],[9,33]]]]
        ],
        locals: ["day"],
        templates: []
      };
    }());
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 2,
            "column": 2
          },
          "end": {
            "line": 14,
            "column": 2
          }
        }
      },
      isEmpty: false,
      arity: 1,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("    ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n      ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","timeline-week-number");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n      ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","timeline-week-dates");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n      ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ol");
        dom.setAttribute(el2,"class","timeline-week-days");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("      ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [1]);
        var morphs = new Array(4);
        morphs[0] = dom.createAttrMorph(element1, 'class');
        morphs[1] = dom.createMorphAt(dom.childAt(element1, [1]),0,0);
        morphs[2] = dom.createMorphAt(dom.childAt(element1, [3]),0,0);
        morphs[3] = dom.createMorphAt(dom.childAt(element1, [5]),1,1);
        return morphs;
      },
      statements: [
        ["attribute","class",["concat",["timeline-week ",["subexpr","if",[["get","week.isThisWeek",["loc",[null,[3,35],[3,50]]]],"this-week"],[],["loc",[null,[3,30],[3,64]]]]]]],
        ["inline","week-number",[["get","week.date",["loc",[null,[4,54],[4,63]]]]],[],["loc",[null,[4,40],[4,65]]]],
        ["inline","week-span",[["get","week.date",["loc",[null,[5,51],[5,60]]]],["get","zoom.zoomedOut",["loc",[null,[5,61],[5,75]]]]],[],["loc",[null,[5,39],[5,77]]]],
        ["block","each",[["get","week.days",["loc",[null,[7,16],[7,25]]]]],["key","@index"],0,null,["loc",[null,[7,8],[11,17]]]]
      ],
      locals: ["week"],
      templates: [child0]
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "triple-curlies"
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 16,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createElement("div");
      dom.setAttribute(el1,"class","week-grid");
      var el2 = dom.createTextNode("\n");
      dom.appendChild(el1, el2);
      var el2 = dom.createComment("");
      dom.appendChild(el1, el2);
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);
      return morphs;
    },
    statements: [
      ["block","each",[["get","workWeekGrid",["loc",[null,[2,10],[2,22]]]]],["key","@index"],0,null,["loc",[null,[2,2],[14,11]]]]
    ],
    locals: [],
    templates: [child0]
  };
}())); });

define('forecast/templates/settings', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 5,
            "column": 6
          },
          "end": {
            "line": 10,
            "column": 6
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("        ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
        return morphs;
      },
      statements: [
        ["inline","input",[],["class","name-input","placeholder","Company Name","required","required","value",["subexpr","@mut",[["get","accountName",["loc",[null,[9,22],[9,33]]]]],[],[]]],["loc",[null,[6,8],[9,35]]]]
      ],
      locals: [],
      templates: []
    };
  }());
  var child1 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 12,
            "column": 6
          },
          "end": {
            "line": 20,
            "column": 6
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("        ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n        ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","working-time-helper");
        var el2 = dom.createTextNode("\n          ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("strong");
        var el3 = dom.createTextNode("Note:");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" Max hours/day can also be configured per person.\n        ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
        return morphs;
      },
      statements: [
        ["inline","fc-select",[],["class","input-appearance working-time-input test-working-time-input","from",["subexpr","@mut",[["get","allocationOptions",["loc",[null,[14,25],[14,42]]]]],[],[]],"selected",["subexpr","@mut",[["get","maxAllocationPerDay",["loc",[null,[15,29],[15,48]]]]],[],[]],"onchange",["subexpr","action",[["subexpr","mut",[["get","maxAllocationPerDay",["loc",[null,[16,42],[16,61]]]]],[],["loc",[null,[16,37],[16,62]]]]],[],["loc",[null,[16,29],[16,63]]]]],["loc",[null,[13,8],[16,65]]]]
      ],
      locals: [],
      templates: []
    };
  }());
  var child2 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 23,
            "column": 8
          },
          "end": {
            "line": 31,
            "column": 8
          }
        }
      },
      isEmpty: false,
      arity: 1,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("          ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n            ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("label");
        var el3 = dom.createTextNode("Project Color Labels");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n            ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("i");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n            ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n          ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element12 = dom.childAt(fragment, [1]);
        var morphs = new Array(2);
        morphs[0] = dom.createAttrMorph(element12, 'class');
        morphs[1] = dom.createMorphAt(element12,5,5);
        return morphs;
      },
      statements: [
        ["attribute","class",["concat",["field color-field ",["get","color.name",["loc",[null,[24,42],[24,52]]]]]]],
        ["inline","input",[],["class","color-input","placeholder",["subexpr","@mut",[["get","color.placeholder",["loc",[null,[28,32],[28,49]]]]],[],[]],"value",["subexpr","@mut",[["get","color.label",["loc",[null,[29,26],[29,37]]]]],[],[]]],["loc",[null,[27,12],[29,39]]]]
      ],
      locals: ["color"],
      templates: []
    };
  }());
  var child3 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 53,
              "column": 6
            },
            "end": {
              "line": 55,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Import from Harvest\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 58,
              "column": 8
            },
            "end": {
              "line": 60,
              "column": 8
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          Disconnect\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 50,
            "column": 4
          },
          "end": {
            "line": 62,
            "column": 4
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("      ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h1");
        var el2 = dom.createTextNode("Harvest Integration");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n      ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("p");
        var el2 = dom.createTextNode("Connected to Harvest account: ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("strong");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode(".harvestapp.com");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("      ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("span");
        dom.setAttribute(el1,"class","harvest-connect-helper");
        var el2 = dom.createTextNode("\n        No longer using Harvest?\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("      ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [3, 1]),0,0);
        morphs[1] = dom.createMorphAt(fragment,5,5,contextualElement);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [7]),1,1);
        return morphs;
      },
      statements: [
        ["content","account.harvest_subdomain",["loc",[null,[52,47],[52,76]]]],
        ["block","link-to",["import.step1"],["class","button","tagName","button"],0,null,["loc",[null,[53,6],[55,18]]]],
        ["block","link-to",["settings.harvest_disconnect"],[],1,null,["loc",[null,[58,8],[60,20]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }());
  var child4 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 67,
              "column": 8
            },
            "end": {
              "line": 67,
              "column": 139
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Learn more about the Harvest integration");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 69,
              "column": 6
            },
            "end": {
              "line": 69,
              "column": 93
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Connect to Harvest");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 72,
              "column": 8
            },
            "end": {
              "line": 72,
              "column": 83
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Try Harvest Free");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 62,
            "column": 4
          },
          "end": {
            "line": 74,
            "column": 4
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("      ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h1");
        var el2 = dom.createTextNode("Connect Your Harvest Account");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n      ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("p");
        var el2 = dom.createTextNode("\n        Combine your Forecast account with the power of Harvest.\n        Import your clients, project, and team to see project health and estimates vs. actuals.\n        ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n      ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n      ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n      ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("span");
        dom.setAttribute(el1,"class","harvest-connect-helper");
        var el2 = dom.createTextNode("\n        Don’t have an account?\n        ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n      ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [3]),1,1);
        morphs[1] = dom.createMorphAt(fragment,5,5,contextualElement);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [7]),1,1);
        return morphs;
      },
      statements: [
        ["block","external-link",[],["href","http://getharvest.com/harvest-and-forecast?utm_source=forecastapp"],0,null,["loc",[null,[67,8],[67,157]]]],
        ["block","link-to",["settings.harvest_connect"],["class","button button-primary"],1,null,["loc",[null,[69,6],[69,105]]]],
        ["block","external-link",[],["href","https://www.getharvest.com/signup"],2,null,["loc",[null,[72,8],[72,101]]]]
      ],
      locals: [],
      templates: [child0, child1, child2]
    };
  }());
  var child5 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 85,
              "column": 8
            },
            "end": {
              "line": 85,
              "column": 84
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("get in touch");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 79,
            "column": 2
          },
          "end": {
            "line": 91,
            "column": 2
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("    ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("section");
        var el2 = dom.createTextNode("\n      ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h1");
        var el3 = dom.createTextNode("Upgrade Your Account");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n      ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        var el3 = dom.createTextNode("\n        You currently have ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("strong");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        left in your free trial. If you have any questions,\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode(".\n      ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n      ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("button");
        dom.setAttribute(el2,"type","submit");
        dom.setAttribute(el2,"class","button button-primary");
        var el3 = dom.createTextNode("\n        Upgrade Now\n      ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element9 = dom.childAt(fragment, [1]);
        var element10 = dom.childAt(element9, [3]);
        var element11 = dom.childAt(element9, [5]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(dom.childAt(element10, [1]),0,0);
        morphs[1] = dom.createMorphAt(element10,3,3);
        morphs[2] = dom.createElementMorph(element11);
        return morphs;
      },
      statements: [
        ["inline","plural-ize",[["get","subscription.daysLeft",["loc",[null,[83,48],[83,69]]]],"day"],[],["loc",[null,[83,35],[83,77]]]],
        ["block","external-link",[],["href","http://support.forecastapp.com/contact"],0,null,["loc",[null,[85,8],[85,102]]]],
        ["element","action",["navigateToUpgradePage"],[],["loc",[null,[87,58],[87,92]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }());
  var child6 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 93,
            "column": 2
          },
          "end": {
            "line": 98,
            "column": 2
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("    ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("section");
        var el2 = dom.createTextNode("\n      ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h1");
        var el3 = dom.createTextNode("Billing Information");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n      ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        var el3 = dom.createTextNode("You are on a ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("strong");
        var el4 = dom.createTextNode("Sponsored Account");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode(". Your account is on us – enjoy!");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }());
  var child7 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 117,
              "column": 16
            },
            "end": {
              "line": 117,
              "column": 86
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Update Plan");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 127,
              "column": 16
            },
            "end": {
              "line": 127,
              "column": 86
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Update Card");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 134,
              "column": 14
            },
            "end": {
              "line": 136,
              "column": 14
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("br");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["content","subscription.address.line_2",["loc",[null,[135,16],[135,47]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child3 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 139,
              "column": 16
            },
            "end": {
              "line": 139,
              "column": 95
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Update Address");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child4 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 144,
              "column": 16
            },
            "end": {
              "line": 144,
              "column": 101
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Update Email");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 100,
            "column": 2
          },
          "end": {
            "line": 149,
            "column": 2
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("    ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("section");
        var el2 = dom.createTextNode("\n      ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h1");
        var el3 = dom.createTextNode("Billing Information");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n      ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("table");
        dom.setAttribute(el2,"class","account-three-column-table");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("tbody");
        var el4 = dom.createTextNode("\n          ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("tr");
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("Current Plan");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("\n              ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("strong");
        var el7 = dom.createTextNode("\n                Schedule up to\n                ");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                – ");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("/month\n              ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n              ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("br");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n              Currently scheduling\n              ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n            ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n          ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n          ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("tr");
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("Next Payment Date");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        dom.setAttribute(el5,"class","test-next-billing-date");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n          ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n          ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("tr");
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("Credit Card");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        dom.setAttribute(el5,"class","test-settings-card-info");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode(" ending in ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n          ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n          ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("tr");
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("Billing Address");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("\n              ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("br");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n              ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("br");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("              ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode(", ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode(" ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n            ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n          ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n          ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("tr");
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createTextNode("Receipt Recipient");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("td");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n          ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [1, 3, 1]);
        var element1 = dom.childAt(element0, [1]);
        var element2 = dom.childAt(element1, [3]);
        var element3 = dom.childAt(element2, [1]);
        var element4 = dom.childAt(element0, [5]);
        var element5 = dom.childAt(element4, [3]);
        var element6 = dom.childAt(element0, [7]);
        var element7 = dom.childAt(element6, [3]);
        var element8 = dom.childAt(element0, [9]);
        var morphs = new Array(17);
        morphs[0] = dom.createMorphAt(element3,1,1);
        morphs[1] = dom.createMorphAt(element3,3,3);
        morphs[2] = dom.createMorphAt(element2,5,5);
        morphs[3] = dom.createMorphAt(dom.childAt(element1, [5]),0,0);
        morphs[4] = dom.createMorphAt(dom.childAt(element0, [3, 3]),0,0);
        morphs[5] = dom.createMorphAt(element5,0,0);
        morphs[6] = dom.createMorphAt(element5,2,2);
        morphs[7] = dom.createMorphAt(dom.childAt(element4, [5]),0,0);
        morphs[8] = dom.createMorphAt(element7,1,1);
        morphs[9] = dom.createMorphAt(element7,4,4);
        morphs[10] = dom.createMorphAt(element7,7,7);
        morphs[11] = dom.createMorphAt(element7,9,9);
        morphs[12] = dom.createMorphAt(element7,11,11);
        morphs[13] = dom.createMorphAt(element7,13,13);
        morphs[14] = dom.createMorphAt(dom.childAt(element6, [5]),0,0);
        morphs[15] = dom.createMorphAt(dom.childAt(element8, [3]),0,0);
        morphs[16] = dom.createMorphAt(dom.childAt(element8, [5]),0,0);
        return morphs;
      },
      statements: [
        ["inline","plural-ize",[["get","subscription.purchased_people",["loc",[null,[110,29],[110,58]]]],"person"],[],["loc",[null,[110,16],[110,69]]]],
        ["inline","cents-to-dollars",[["get","subscription.amount",["loc",[null,[111,37],[111,56]]]]],[],["loc",[null,[111,18],[111,58]]]],
        ["inline","plural-ize",[["get","activePeople",["loc",[null,[115,27],[115,39]]]],"person"],[],["loc",[null,[115,14],[115,50]]]],
        ["block","link-to",["billing.update_plan"],["class","test-update-plan"],0,null,["loc",[null,[117,16],[117,98]]]],
        ["inline","format-date",[["get","subscription.next_billing_date",["loc",[null,[121,61],[121,91]]]],"DD MMM YYYY"],[],["loc",[null,[121,47],[121,107]]]],
        ["content","subscription.card.brand",["loc",[null,[126,48],[126,75]]]],
        ["content","subscription.card.last_four",["loc",[null,[126,86],[126,117]]]],
        ["block","link-to",["billing.update_card"],["class","test-update-card"],1,null,["loc",[null,[127,16],[127,98]]]],
        ["content","account.name",["loc",[null,[132,14],[132,30]]]],
        ["content","subscription.address.line_1",["loc",[null,[133,14],[133,45]]]],
        ["block","if",[["get","subscription.address.line_2",["loc",[null,[134,20],[134,47]]]]],[],2,null,["loc",[null,[134,14],[136,21]]]],
        ["content","subscription.address.city",["loc",[null,[137,14],[137,43]]]],
        ["content","subscription.address.state",["loc",[null,[137,45],[137,75]]]],
        ["content","subscription.address.postal_code",["loc",[null,[137,76],[137,112]]]],
        ["block","link-to",["billing.update_address"],["class","test-update-address"],3,null,["loc",[null,[139,16],[139,107]]]],
        ["content","subscription.receipt_recipient",["loc",[null,[143,16],[143,50]]]],
        ["block","link-to",["billing.update_receipt_recipient"],["class","test-update-email"],4,null,["loc",[null,[144,16],[144,113]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3, child4]
    };
  }());
  var child8 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 154,
            "column": 4
          },
          "end": {
            "line": 156,
            "column": 4
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("      Close Account\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "triple-curlies"
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 159,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createElement("div");
      dom.setAttribute(el1,"class","container account-settings hide-from-fullstory");
      var el2 = dom.createTextNode("\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createElement("section");
      var el3 = dom.createTextNode("\n    ");
      dom.appendChild(el2, el3);
      var el3 = dom.createElement("h1");
      var el4 = dom.createTextNode("Account Settings");
      dom.appendChild(el3, el4);
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("\n    ");
      dom.appendChild(el2, el3);
      var el3 = dom.createElement("form");
      dom.setAttribute(el3,"class","label-left-form");
      var el4 = dom.createTextNode("\n");
      dom.appendChild(el3, el4);
      var el4 = dom.createComment("");
      dom.appendChild(el3, el4);
      var el4 = dom.createTextNode("\n");
      dom.appendChild(el3, el4);
      var el4 = dom.createComment("");
      dom.appendChild(el3, el4);
      var el4 = dom.createTextNode("\n      ");
      dom.appendChild(el3, el4);
      var el4 = dom.createElement("div");
      var el5 = dom.createTextNode("\n");
      dom.appendChild(el4, el5);
      var el5 = dom.createComment("");
      dom.appendChild(el4, el5);
      var el5 = dom.createTextNode("      ");
      dom.appendChild(el4, el5);
      dom.appendChild(el3, el4);
      var el4 = dom.createTextNode("\n\n      ");
      dom.appendChild(el3, el4);
      var el4 = dom.createElement("div");
      dom.setAttribute(el4,"class","field submit");
      var el5 = dom.createTextNode("\n        ");
      dom.appendChild(el4, el5);
      var el5 = dom.createElement("button");
      dom.setAttribute(el5,"class","button button-primary gtm-form-submit");
      var el6 = dom.createTextNode("\n          Update\n        ");
      dom.appendChild(el5, el6);
      dom.appendChild(el4, el5);
      var el5 = dom.createTextNode("\n        ");
      dom.appendChild(el4, el5);
      var el5 = dom.createElement("button");
      dom.setAttribute(el5,"class","button button-cancel gtm-form-cancel");
      var el6 = dom.createTextNode("\n          Cancel\n        ");
      dom.appendChild(el5, el6);
      dom.appendChild(el4, el5);
      var el5 = dom.createTextNode("\n      ");
      dom.appendChild(el4, el5);
      dom.appendChild(el3, el4);
      var el4 = dom.createTextNode("\n    ");
      dom.appendChild(el3, el4);
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("\n  ");
      dom.appendChild(el2, el3);
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createElement("hr");
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createElement("div");
      dom.setAttribute(el2,"class","test-harvest-connect");
      var el3 = dom.createTextNode("\n");
      dom.appendChild(el2, el3);
      var el3 = dom.createComment("");
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("  ");
      dom.appendChild(el2, el3);
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createElement("hr");
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n\n");
      dom.appendChild(el1, el2);
      var el2 = dom.createComment("");
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n");
      dom.appendChild(el1, el2);
      var el2 = dom.createComment("");
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n");
      dom.appendChild(el1, el2);
      var el2 = dom.createComment("");
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createElement("hr");
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createElement("div");
      dom.setAttribute(el2,"class","close-account-link");
      var el3 = dom.createTextNode("\n");
      dom.appendChild(el2, el3);
      var el3 = dom.createComment("");
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("  ");
      dom.appendChild(el2, el3);
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n");
      dom.appendChild(el1, el2);
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var element13 = dom.childAt(fragment, [0]);
      var element14 = dom.childAt(element13, [1, 3]);
      var element15 = dom.childAt(element14, [7]);
      var element16 = dom.childAt(element15, [1]);
      var element17 = dom.childAt(element15, [3]);
      var morphs = new Array(10);
      morphs[0] = dom.createMorphAt(element14,1,1);
      morphs[1] = dom.createMorphAt(element14,3,3);
      morphs[2] = dom.createMorphAt(dom.childAt(element14, [5]),1,1);
      morphs[3] = dom.createElementMorph(element16);
      morphs[4] = dom.createElementMorph(element17);
      morphs[5] = dom.createMorphAt(dom.childAt(element13, [5]),1,1);
      morphs[6] = dom.createMorphAt(element13,9,9);
      morphs[7] = dom.createMorphAt(element13,11,11);
      morphs[8] = dom.createMorphAt(element13,13,13);
      morphs[9] = dom.createMorphAt(dom.childAt(element13, [17]),1,1);
      return morphs;
    },
    statements: [
      ["block","form-field",[],["label","Company Name","for","accountName","of",["subexpr","@mut",[["get","this",["loc",[null,[5,62],[5,66]]]]],[],[]]],0,null,["loc",[null,[5,6],[10,21]]]],
      ["block","form-field",[],["label","Default Max Hours/Day","for","maxAllocationPerDay","of",["subexpr","@mut",[["get","this",["loc",[null,[12,79],[12,83]]]]],[],[]]],1,null,["loc",[null,[12,6],[20,21]]]],
      ["block","each",[["get","colorLabelsWithPlaceholders",["loc",[null,[23,16],[23,43]]]]],["key","name"],2,null,["loc",[null,[23,8],[31,17]]]],
      ["element","action",["saveChanges"],[],["loc",[null,[36,16],[36,40]]]],
      ["element","action",["cancelChanges"],[],["loc",[null,[40,16],[40,42]]]],
      ["block","if",[["get","account.isConnectedToHarvest",["loc",[null,[50,10],[50,38]]]]],[],3,4,["loc",[null,[50,4],[74,11]]]],
      ["block","if",[["get","subscription.inTrial",["loc",[null,[79,8],[79,28]]]]],[],5,null,["loc",[null,[79,2],[91,9]]]],
      ["block","if",[["get","subscription.isSponsored",["loc",[null,[93,8],[93,32]]]]],[],6,null,["loc",[null,[93,2],[98,9]]]],
      ["block","if",[["get","subscription.isBilled",["loc",[null,[100,8],[100,29]]]]],[],7,null,["loc",[null,[100,2],[149,9]]]],
      ["block","link-to",["account.close"],[],8,null,["loc",[null,[154,4],[156,16]]]]
    ],
    locals: [],
    templates: [child0, child1, child2, child3, child4, child5, child6, child7, child8]
  };
}())); });

define('forecast/templates/settings/harvest_connect', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 8
            },
            "end": {
              "line": 7,
              "column": 139
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Learn more about the Harvest integration");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 12,
              "column": 6
            },
            "end": {
              "line": 17,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","subdomain-helper");
          var el2 = dom.createTextNode(".harvestapp.com");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","input",[],["class","subdomain-input","required","required","value",["subexpr","@mut",[["get","subdomain",["loc",[null,[15,22],[15,31]]]]],[],[]]],["loc",[null,[13,8],[15,33]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 18,
              "column": 6
            },
            "end": {
              "line": 22,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","input",[],["class","email-input","required","required","value",["subexpr","@mut",[["get","email",["loc",[null,[21,22],[21,27]]]]],[],[]]],["loc",[null,[19,8],[21,29]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child3 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 23,
              "column": 6
            },
            "end": {
              "line": 28,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","input",[],["class","password-input","required","required","type","password","value",["subexpr","@mut",[["get","password",["loc",[null,[27,22],[27,30]]]]],[],[]]],["loc",[null,[24,8],[27,32]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child4 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 47,
              "column": 159
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("we can help");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": [
            "multiple-nodes"
          ]
        },
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 49,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h2");
        var el4 = dom.createTextNode("Connect to Harvest");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        dom.setAttribute(el3,"class","sub-h2");
        var el4 = dom.createTextNode("\n        Import your clients, project, and team to see project health and estimates vs. actuals.");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("br");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        dom.setAttribute(el2,"class","form-options");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3,"type","submit");
        dom.setAttribute(el3,"class","button button-primary gtm-form-submit");
        var el4 = dom.createTextNode("\n        Connect\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3,"type","submit");
        dom.setAttribute(el3,"class","button button-cancel gtm-form-cancel");
        var el4 = dom.createTextNode("\n        Cancel\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","modal-addition");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("strong");
        var el3 = dom.createTextNode("Note:");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" Only a Harvest administrator can connect.\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("br");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    If your Harvest account is already connected,\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(".\n  ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [1]);
        var element1 = dom.childAt(element0, [3]);
        var element2 = dom.childAt(element0, [5]);
        var element3 = dom.childAt(element2, [1]);
        var element4 = dom.childAt(element2, [3]);
        var morphs = new Array(7);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [1, 3]),3,3);
        morphs[1] = dom.createMorphAt(element1,1,1);
        morphs[2] = dom.createMorphAt(element1,2,2);
        morphs[3] = dom.createMorphAt(element1,3,3);
        morphs[4] = dom.createElementMorph(element3);
        morphs[5] = dom.createElementMorph(element4);
        morphs[6] = dom.createMorphAt(dom.childAt(fragment, [3]),5,5);
        return morphs;
      },
      statements: [
        ["block","external-link",[],["href","http://getharvest.com/harvest-and-forecast?utm_source=forecastapp"],0,null,["loc",[null,[7,8],[7,157]]]],
        ["block","form-field",[],["label","Subdomain","class","subdomain-field","for","subdomain","of",["subexpr","@mut",[["get","this",["loc",[null,[12,81],[12,85]]]]],[],[]]],1,null,["loc",[null,[12,6],[17,21]]]],
        ["block","form-field",[],["label","Email","for","email","of",["subexpr","@mut",[["get","this",["loc",[null,[18,49],[18,53]]]]],[],[]]],2,null,["loc",[null,[18,6],[22,21]]]],
        ["block","form-field",[],["label","password","for","password","of",["subexpr","@mut",[["get","this",["loc",[null,[23,55],[23,59]]]]],[],[]]],3,null,["loc",[null,[23,6],[28,21]]]],
        ["element","action",["connectToHarvest"],[],["loc",[null,[33,14],[33,43]]]],
        ["element","action",["closeModal"],[],["loc",[null,[37,14],[37,37]]]],
        ["block","external-link",[],["href","http://support.forecastapp.com/article/63-my-harvest-account-is-connected-to-another-forecast-account-what-should-i-do"],4,null,["loc",[null,[47,4],[47,177]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3, child4]
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 51,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      return morphs;
    },
    statements: [
      ["block","modal-overlay",[],["close","closeModal"],0,null,["loc",[null,[1,0],[49,18]]]]
    ],
    locals: [],
    templates: [child0]
  };
}())); });

define('forecast/templates/settings/harvest_disconnect', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 16,
              "column": 6
            },
            "end": {
              "line": 20,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","input",[],["class","confirm-input","required","required","value",["subexpr","@mut",[["get","confirmText",["loc",[null,[19,22],[19,33]]]]],[],[]]],["loc",[null,[17,8],[19,35]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 34,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h2");
        var el4 = dom.createTextNode("Disconnect from Harvest");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("strong");
        var el5 = dom.createTextNode("Caution:");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        This action will sever all links to Harvest among your clients, projects, and people.\n        You will need to import these clients, projects, and people again if you reconnect.\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        var el4 = dom.createTextNode("\n        There is no undo. Proceed?\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        dom.setAttribute(el2,"class","form-delete-confirm");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3,"class","button button-primary-red gtm-form-submit");
        var el4 = dom.createTextNode("\n        Disconnect\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3,"class","button button-cancel gtm-form-cancel");
        var el4 = dom.createTextNode("\n        Cancel\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [1]);
        var element1 = dom.childAt(element0, [5]);
        var element2 = dom.childAt(element1, [1]);
        var element3 = dom.childAt(element1, [3]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [3]),1,1);
        morphs[1] = dom.createElementMorph(element2);
        morphs[2] = dom.createElementMorph(element3);
        return morphs;
      },
      statements: [
        ["block","form-field",[],["label","Type YOLO to confirm","for","confirmText","of",["subexpr","@mut",[["get","this",["loc",[null,[16,70],[16,74]]]]],[],[]],"validateOnBlur",false],0,null,["loc",[null,[16,6],[20,21]]]],
        ["element","action",["disconnect"],[],["loc",[null,[25,14],[25,37]]]],
        ["element","action",["closeModal"],[],["loc",[null,[29,14],[29,37]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 35,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      dom.insertBoundary(fragment, null);
      return morphs;
    },
    statements: [
      ["block","modal-overlay",[],["close","closeModal"],0,null,["loc",[null,[1,0],[34,18]]]]
    ],
    locals: [],
    templates: [child0]
  };
}())); });

define('forecast/templates/shared/_app_nav', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 2
            },
            "end": {
              "line": 5,
              "column": 33
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Schedule");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 2
            },
            "end": {
              "line": 6,
              "column": 29
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Export");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 2
            },
            "end": {
              "line": 8,
              "column": 38
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Projects");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child3 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 9,
              "column": 2
            },
            "end": {
              "line": 9,
              "column": 36
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Clients");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child4 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 10,
              "column": 2
            },
            "end": {
              "line": 10,
              "column": 30
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Team");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child5 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 12,
              "column": 2
            },
            "end": {
              "line": 12,
              "column": 35
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("About");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": [
            "wrong-type",
            "multiple-nodes"
          ]
        },
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 13,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(6);
        morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
        morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
        morphs[2] = dom.createMorphAt(fragment,7,7,contextualElement);
        morphs[3] = dom.createMorphAt(fragment,9,9,contextualElement);
        morphs[4] = dom.createMorphAt(fragment,11,11,contextualElement);
        morphs[5] = dom.createMorphAt(fragment,15,15,contextualElement);
        return morphs;
      },
      statements: [
        ["block","link-to",["projects"],[],0,null,["loc",[null,[5,2],[5,45]]]],
        ["block","link-to",["export"],[],1,null,["loc",[null,[6,2],[6,41]]]],
        ["block","link-to",["projects_page"],[],2,null,["loc",[null,[8,2],[8,50]]]],
        ["block","link-to",["clients_page"],[],3,null,["loc",[null,[9,2],[9,48]]]],
        ["block","link-to",["team_page"],[],4,null,["loc",[null,[10,2],[10,42]]]],
        ["block","link-to",["account.about"],[],5,null,["loc",[null,[12,2],[12,47]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5]
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 14,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      dom.insertBoundary(fragment, null);
      return morphs;
    },
    statements: [
      ["block","drop-down",[],["buttonTemplate","shared/app_nav_button","pageName",["subexpr","@mut",[["get","pageName",["loc",[null,[2,22],[2,30]]]]],[],[]],"classNames","app-nav-dropdown","alignment","left"],0,null,["loc",[null,[1,0],[13,14]]]]
    ],
    locals: [],
    templates: [child0]
  };
}())); });

define('forecast/templates/shared/_app_nav_button', [], function(){ return Ember.HTMLBars.template((function() {
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type",
          "multiple-nodes"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 3,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      var el1 = dom.createElement("i");
      dom.setAttribute(el1,"class","icon");
      dom.setAttribute(el1,"data-icon","arrow-down-white");
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      return morphs;
    },
    statements: [
      ["content","pageName",["loc",[null,[1,0],[1,12]]]]
    ],
    locals: [],
    templates: []
  };
}())); });

define('forecast/templates/shared/_controls_row', [], function(){ return Ember.HTMLBars.template((function() {
  return {
    meta: {
      "fragmentReason": {
        "name": "triple-curlies"
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 8,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createElement("div");
      dom.setAttribute(el1,"class","row controls-row");
      var el2 = dom.createTextNode("\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createComment("");
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createElement("div");
      dom.setAttribute(el2,"class","viewport-controls");
      var el3 = dom.createTextNode("\n    ");
      dom.appendChild(el2, el3);
      var el3 = dom.createComment("");
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("\n  ");
      dom.appendChild(el2, el3);
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createComment("");
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n");
      dom.appendChild(el1, el2);
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var element0 = dom.childAt(fragment, [0]);
      var morphs = new Array(3);
      morphs[0] = dom.createMorphAt(element0,1,1);
      morphs[1] = dom.createMorphAt(dom.childAt(element0, [3]),1,1);
      morphs[2] = dom.createMorphAt(element0,5,5);
      return morphs;
    },
    statements: [
      ["inline","partial",["shared/viewport_toggle"],[],["loc",[null,[2,2],[2,38]]]],
      ["inline","outlet",["control-buttons"],[],["loc",[null,[4,4],[4,32]]]],
      ["inline","partial",["shared/viewport_navigation"],[],["loc",[null,[6,2],[6,42]]]]
    ],
    locals: [],
    templates: []
  };
}())); });

define('forecast/templates/shared/_ftux_harvest_link', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.3.0",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 6
              },
              "end": {
                "line": 8,
                "column": 6
              }
            }
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        Import your projects and people\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 2
            },
            "end": {
              "line": 10,
              "column": 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","ftux-harvest-link test-ftux-harvest-link");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("i");
          dom.setAttribute(el2,"class","icon");
          dom.setAttribute(el2,"data-icon","harvest");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      Harvest customer?\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),3,3);
          return morphs;
        },
        statements: [
          ["block","link-to",["settings.harvest_connect"],[],0,null,["loc",[null,[6,6],[8,18]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": [
            "wrong-type"
          ]
        },
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","unless",[["get","account.isConnectedToHarvest",["loc",[null,[2,12],[2,40]]]]],[],0,null,["loc",[null,[2,2],[10,13]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 12,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      dom.insertBoundary(fragment, null);
      return morphs;
    },
    statements: [
      ["block","if",[["get","realtime.isAdmin",["loc",[null,[1,6],[1,22]]]]],[],0,null,["loc",[null,[1,0],[11,7]]]]
    ],
    locals: [],
    templates: [child0]
  };
}())); });

define('forecast/templates/shared/_header', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 4,
            "column": 6
          },
          "end": {
            "line": 6,
            "column": 6
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("        ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
        return morphs;
      },
      statements: [
        ["content","accountName",["loc",[null,[5,8],[5,23]]]]
      ],
      locals: [],
      templates: []
    };
  }());
  var child1 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 9,
            "column": 4
          },
          "end": {
            "line": 11,
            "column": 4
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("      ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
        return morphs;
      },
      statements: [
        ["inline","partial",["shared/app_nav"],[],["loc",[null,[10,6],[10,34]]]]
      ],
      locals: [],
      templates: []
    };
  }());
  var child2 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 13,
            "column": 4
          },
          "end": {
            "line": 17,
            "column": 4
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("      ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","header-loader");
        var el2 = dom.createTextNode("\n        ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("i");
        dom.setAttribute(el2,"class","icon");
        dom.setAttribute(el2,"data-icon","loader-white");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n      ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }());
  var child3 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 21,
            "column": 4
          },
          "end": {
            "line": 26,
            "column": 4
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("      ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
        return morphs;
      },
      statements: [
        ["inline","announcement-button",[],["dismiss","dismissAnnouncement","type",["subexpr","@mut",[["get","announcement.type",["loc",[null,[23,33],[23,50]]]]],[],[]],"label",["subexpr","@mut",[["get","announcement.label",["loc",[null,[24,34],[24,52]]]]],[],[]],"content",["subexpr","@mut",[["get","announcement.body",["loc",[null,[25,36],[25,53]]]]],[],[]]],["loc",[null,[22,6],[25,55]]]]
      ],
      locals: [],
      templates: []
    };
  }());
  var child4 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 28,
            "column": 4
          },
          "end": {
            "line": 29,
            "column": 48
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("Help");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }());
  var child5 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 32,
              "column": 6
            },
            "end": {
              "line": 32,
              "column": 59
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Settings");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 31,
            "column": 4
          },
          "end": {
            "line": 33,
            "column": 4
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("      ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
        return morphs;
      },
      statements: [
        ["block","link-to",["settings"],["class","header-button"],0,null,["loc",[null,[32,6],[32,71]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }());
  var child6 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 35,
            "column": 4
          },
          "end": {
            "line": 37,
            "column": 4
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("      ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
        return morphs;
      },
      statements: [
        ["inline","partial",["shared/logged_in_users"],[],["loc",[null,[36,6],[36,42]]]]
      ],
      locals: [],
      templates: []
    };
  }());
  var child7 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 43,
            "column": 0
          },
          "end": {
            "line": 45,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
        return morphs;
      },
      statements: [
        ["inline","partial",["billing/trial_header_message"],[],["loc",[null,[44,2],[44,44]]]]
      ],
      locals: [],
      templates: []
    };
  }());
  var child8 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 47,
            "column": 0
          },
          "end": {
            "line": 49,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
        return morphs;
      },
      statements: [
        ["inline","partial",["billing/delinquent_header_message"],[],["loc",[null,[48,2],[48,49]]]]
      ],
      locals: [],
      templates: []
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "multiple-nodes",
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 50,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createElement("header");
      var el2 = dom.createTextNode("\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createElement("div");
      dom.setAttribute(el2,"class","header-left");
      var el3 = dom.createTextNode("\n    ");
      dom.appendChild(el2, el3);
      var el3 = dom.createElement("h1");
      dom.setAttribute(el3,"class","header-company-name hide-from-fullstory");
      var el4 = dom.createTextNode("\n");
      dom.appendChild(el3, el4);
      var el4 = dom.createComment("");
      dom.appendChild(el3, el4);
      var el4 = dom.createTextNode("    ");
      dom.appendChild(el3, el4);
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("\n\n");
      dom.appendChild(el2, el3);
      var el3 = dom.createComment("");
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("\n");
      dom.appendChild(el2, el3);
      var el3 = dom.createComment("");
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("  ");
      dom.appendChild(el2, el3);
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createElement("div");
      dom.setAttribute(el2,"class","header-right");
      var el3 = dom.createTextNode("\n");
      dom.appendChild(el2, el3);
      var el3 = dom.createComment("");
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("\n    ");
      dom.appendChild(el2, el3);
      var el3 = dom.createComment("");
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("\n\n");
      dom.appendChild(el2, el3);
      var el3 = dom.createComment("");
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("\n");
      dom.appendChild(el2, el3);
      var el3 = dom.createComment("");
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("\n    ");
      dom.appendChild(el2, el3);
      var el3 = dom.createComment("");
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("\n  ");
      dom.appendChild(el2, el3);
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n");
      dom.appendChild(el1, el2);
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n\n");
      dom.appendChild(el0, el1);
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var element0 = dom.childAt(fragment, [0]);
      var element1 = dom.childAt(element0, [1]);
      var element2 = dom.childAt(element0, [3]);
      var morphs = new Array(10);
      morphs[0] = dom.createMorphAt(dom.childAt(element1, [1]),1,1);
      morphs[1] = dom.createMorphAt(element1,3,3);
      morphs[2] = dom.createMorphAt(element1,5,5);
      morphs[3] = dom.createMorphAt(element2,1,1);
      morphs[4] = dom.createMorphAt(element2,3,3);
      morphs[5] = dom.createMorphAt(element2,5,5);
      morphs[6] = dom.createMorphAt(element2,7,7);
      morphs[7] = dom.createMorphAt(element2,9,9);
      morphs[8] = dom.createMorphAt(fragment,2,2,contextualElement);
      morphs[9] = dom.createMorphAt(fragment,4,4,contextualElement);
      dom.insertBoundary(fragment, null);
      return morphs;
    },
    statements: [
      ["block","link-to",["projects"],[],0,null,["loc",[null,[4,6],[6,18]]]],
      ["block","if",[["get","realtime.isAdmin",["loc",[null,[9,10],[9,26]]]]],[],1,null,["loc",[null,[9,4],[11,11]]]],
      ["block","if",[["get","requestStatus.inFlight",["loc",[null,[13,10],[13,32]]]]],[],2,null,["loc",[null,[13,4],[17,11]]]],
      ["block","if",[["get","announcement",["loc",[null,[21,10],[21,22]]]]],[],3,null,["loc",[null,[21,4],[26,11]]]],
      ["block","external-link",[],["href","http://support.forecastapp.com","class","header-button"],4,null,["loc",[null,[28,4],[29,66]]]],
      ["block","if",[["get","realtime.isAdmin",["loc",[null,[31,10],[31,26]]]]],[],5,null,["loc",[null,[31,4],[33,11]]]],
      ["block","if",[["get","moreThanJustOneUser",["loc",[null,[35,10],[35,29]]]]],[],6,null,["loc",[null,[35,4],[37,11]]]],
      ["inline","partial",["shared/user_nav"],[],["loc",[null,[39,4],[39,33]]]],
      ["block","if",[["get","inTrial",["loc",[null,[43,6],[43,13]]]]],[],7,null,["loc",[null,[43,0],[45,7]]]],
      ["block","if",[["get","isDelinquent",["loc",[null,[47,6],[47,18]]]]],[],8,null,["loc",[null,[47,0],[49,7]]]]
    ],
    locals: [],
    templates: [child0, child1, child2, child3, child4, child5, child6, child7, child8]
  };
}())); });

define('forecast/templates/shared/_logged_in_users', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    var child0 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.3.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 13,
                  "column": 12
                },
                "end": {
                  "line": 19,
                  "column": 12
                }
              }
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("              ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("li");
              var el2 = dom.createTextNode("\n                ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("img");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n              ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element1 = dom.childAt(fragment, [1]);
              var element2 = dom.childAt(element1, [1]);
              var morphs = new Array(3);
              morphs[0] = dom.createAttrMorph(element2, 'src');
              morphs[1] = dom.createAttrMorph(element2, 'alt');
              morphs[2] = dom.createMorphAt(element1,3,3);
              return morphs;
            },
            statements: [
              ["attribute","src",["concat",[["get","user.avatar_url",["loc",[null,[15,28],[15,43]]]]]]],
              ["attribute","alt",["concat",[["get","user.name",["loc",[null,[16,28],[16,37]]]]]]],
              ["content","user.name",["loc",[null,[17,16],[17,29]]]]
            ],
            locals: ["user"],
            templates: []
          };
        }());
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.3.0",
            "loc": {
              "source": null,
              "start": {
                "line": 10,
                "column": 8
              },
              "end": {
                "line": 21,
                "column": 8
              }
            }
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("h4");
            var el2 = dom.createTextNode("Currently Online");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("ul");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [3]),1,1);
            return morphs;
          },
          statements: [
            ["block","each",[["get","otherUsersOnline",["loc",[null,[13,20],[13,36]]]]],["key","id"],0,null,["loc",[null,[13,12],[19,21]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.3.0",
            "loc": {
              "source": null,
              "start": {
                "line": 21,
                "column": 8
              },
              "end": {
                "line": 23,
                "column": 8
              }
            }
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            var el2 = dom.createTextNode("No one else online now");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      var child2 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.3.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 30,
                  "column": 12
                },
                "end": {
                  "line": 34,
                  "column": 12
                }
              }
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("              ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("li");
              var el2 = dom.createTextNode("\n                ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode(" ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("span");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode(" ago");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n              ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(element0,1,1);
              morphs[1] = dom.createMorphAt(dom.childAt(element0, [3]),0,0);
              return morphs;
            },
            statements: [
              ["content","connection.person.name",["loc",[null,[32,16],[32,42]]]],
              ["inline","time-ago",[["get","connection.last_active_at",["loc",[null,[32,60],[32,85]]]]],[],["loc",[null,[32,49],[32,87]]]]
            ],
            locals: ["connection"],
            templates: []
          };
        }());
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.3.0",
            "loc": {
              "source": null,
              "start": {
                "line": 26,
                "column": 6
              },
              "end": {
                "line": 37,
                "column": 6
              }
            }
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","recent-users");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("h4");
            var el3 = dom.createTextNode("Recently Online");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("ul");
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("          ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 3]),1,1);
            return morphs;
          },
          statements: [
            ["block","each",[["get","recentConnections",["loc",[null,[30,20],[30,37]]]]],["key","id"],0,null,["loc",[null,[30,12],[34,21]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 2
            },
            "end": {
              "line": 39,
              "column": 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","users-dropdown-inner");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","logged-in-users");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("      ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element3 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(element3, [1]),1,1);
          morphs[1] = dom.createMorphAt(element3,3,3);
          return morphs;
        },
        statements: [
          ["block","if",[["get","otherUsersOnline.length",["loc",[null,[10,14],[10,37]]]]],[],0,1,["loc",[null,[10,8],[23,15]]]],
          ["block","if",[["get","recentConnections.length",["loc",[null,[26,12],[26,36]]]]],[],2,null,["loc",[null,[26,6],[37,13]]]]
        ],
        locals: [],
        templates: [child0, child1, child2]
      };
    }());
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": [
            "wrong-type"
          ]
        },
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 40,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","drop-down",[],["buttonTemplate","shared/logged_in_users_button","pageName",["subexpr","@mut",[["get","pageName",["loc",[null,[3,24],[3,32]]]]],[],[]],"classNames","users-dropdown hide-from-fullstory","alignment","right","otherUsersOnline",["subexpr","@mut",[["get","otherUsersOnline",["loc",[null,[6,32],[6,48]]]]],[],[]]],0,null,["loc",[null,[2,2],[39,16]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }());
  var child1 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 41,
              "column": 2
            },
            "end": {
              "line": 43,
              "column": 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","header-button socket-down");
          var el2 = dom.createTextNode("⌁");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 40,
            "column": 0
          },
          "end": {
            "line": 44,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","tool-tip",[],["text","Lost realtime connection. Reconnecting..."],0,null,["loc",[null,[41,2],[43,15]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 45,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      dom.insertBoundary(fragment, null);
      return morphs;
    },
    statements: [
      ["block","if",[["get","socketIsOpen",["loc",[null,[1,6],[1,18]]]]],[],0,1,["loc",[null,[1,0],[44,7]]]]
    ],
    locals: [],
    templates: [child0, child1]
  };
}())); });

define('forecast/templates/shared/_logged_in_users_button', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": [
            "multiple-nodes",
            "wrong-type"
          ]
        },
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("i");
        dom.setAttribute(el1,"class","icon");
        dom.setAttribute(el1,"data-icon","user-white");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,3,3,contextualElement);
        return morphs;
      },
      statements: [
        ["content","otherUsersOnline.length",["loc",[null,[3,2],[3,29]]]]
      ],
      locals: [],
      templates: []
    };
  }());
  var child1 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 4,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("i");
        dom.setAttribute(el1,"class","icon is-empty");
        dom.setAttribute(el1,"data-icon","user-white");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 7,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      dom.insertBoundary(fragment, null);
      return morphs;
    },
    statements: [
      ["block","if",[["get","otherUsersOnline.length",["loc",[null,[1,6],[1,29]]]]],[],0,1,["loc",[null,[1,0],[6,7]]]]
    ],
    locals: [],
    templates: [child0, child1]
  };
}())); });

define('forecast/templates/shared/_user_nav', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 9,
              "column": 2
            },
            "end": {
              "line": 11,
              "column": 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          var el2 = dom.createTextNode("Switch Accounts");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element0, 'href');
          return morphs;
        },
        statements: [
          ["attribute","href",["concat",[["get","switchAccountUrl",["loc",[null,[10,15],[10,31]]]]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": [
            "multiple-nodes",
            "wrong-type"
          ]
        },
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 13,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","user-information");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h4");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("a");
        var el2 = dom.createTextNode("My Profile");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("a");
        dom.setAttribute(el1,"href","javascript:void(0)");
        var el2 = dom.createTextNode("Sign Out");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [1]);
        var element2 = dom.childAt(fragment, [3]);
        var element3 = dom.childAt(fragment, [7]);
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(dom.childAt(element1, [1]),0,0);
        morphs[1] = dom.createMorphAt(element1,3,3);
        morphs[2] = dom.createAttrMorph(element2, 'href');
        morphs[3] = dom.createMorphAt(fragment,5,5,contextualElement);
        morphs[4] = dom.createElementMorph(element3);
        return morphs;
      },
      statements: [
        ["content","model.currentUser.name",["loc",[null,[5,8],[5,34]]]],
        ["content","accountName",["loc",[null,[6,4],[6,19]]]],
        ["attribute","href",["concat",[["get","editProfileUrl",["loc",[null,[8,13],[8,27]]]]]]],
        ["block","if",[["get","model.currentUser.canSwitchAccounts",["loc",[null,[9,8],[9,43]]]]],[],0,null,["loc",[null,[9,2],[11,9]]]],
        ["element","action",["signout"],[],["loc",[null,[12,31],[12,51]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 14,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      dom.insertBoundary(fragment, null);
      return morphs;
    },
    statements: [
      ["block","drop-down",[],["buttonTemplate","shared/user_nav_button","currentUser",["subexpr","@mut",[["get","model.currentUser",["loc",[null,[2,25],[2,42]]]]],[],[]],"classNames","user-dropdown hide-from-fullstory"],0,null,["loc",[null,[1,0],[13,14]]]]
    ],
    locals: [],
    templates: [child0]
  };
}())); });

define('forecast/templates/shared/_user_nav_button', [], function(){ return Ember.HTMLBars.template((function() {
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "multiple-nodes"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 4,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createElement("img");
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      var el1 = dom.createElement("span");
      var el2 = dom.createComment("");
      dom.appendChild(el1, el2);
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      var el1 = dom.createElement("i");
      dom.setAttribute(el1,"class","icon");
      dom.setAttribute(el1,"data-icon","arrow-down-white");
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var element0 = dom.childAt(fragment, [0]);
      var morphs = new Array(3);
      morphs[0] = dom.createAttrMorph(element0, 'src');
      morphs[1] = dom.createAttrMorph(element0, 'alt');
      morphs[2] = dom.createMorphAt(dom.childAt(fragment, [2]),0,0);
      return morphs;
    },
    statements: [
      ["attribute","src",["concat",[["get","currentUser.avatar_url",["loc",[null,[1,12],[1,34]]]]]]],
      ["attribute","alt",["concat",[["get","currentUser.name",["loc",[null,[1,45],[1,61]]]]]]],
      ["content","currentUser.first_name",["loc",[null,[2,6],[2,32]]]]
    ],
    locals: [],
    templates: []
  };
}())); });

define('forecast/templates/shared/_viewport_navigation', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 6
            },
            "end": {
              "line": 9,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","icon");
          dom.setAttribute(el1,"data-icon","zoom-out");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 4,
            "column": 4
          },
          "end": {
            "line": 10,
            "column": 4
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","tool-tip",[],["text","Zoom Out (-)"],0,null,["loc",[null,[7,6],[9,19]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }());
  var child1 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 14,
              "column": 6
            },
            "end": {
              "line": 16,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","icon");
          dom.setAttribute(el1,"data-icon","zoom-in");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 11,
            "column": 4
          },
          "end": {
            "line": 17,
            "column": 4
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","tool-tip",[],["text","Zoom In (+)"],0,null,["loc",[null,[14,6],[16,19]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }());
  var child2 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 23,
              "column": 6
            },
            "end": {
              "line": 25,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","icon");
          dom.setAttribute(el1,"data-icon","arrow-left");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 21,
            "column": 4
          },
          "end": {
            "line": 26,
            "column": 4
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","tool-tip",[],["text","Previous Week (⟵)"],0,null,["loc",[null,[23,6],[25,19]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }());
  var child3 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 30,
              "column": 6
            },
            "end": {
              "line": 32,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","this-week-text");
          var el2 = dom.createTextNode("This Week");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 27,
            "column": 4
          },
          "end": {
            "line": 33,
            "column": 4
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","tool-tip",[],["text","This Week (t)"],0,null,["loc",[null,[30,6],[32,19]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }());
  var child4 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 36,
              "column": 6
            },
            "end": {
              "line": 40,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","icon");
          dom.setAttribute(el1,"data-icon","arrow-right");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 34,
            "column": 4
          },
          "end": {
            "line": 41,
            "column": 4
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","tool-tip",[],["text","Next Week (⟶)","align","right","position","bottom-left"],0,null,["loc",[null,[36,6],[40,19]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "triple-curlies"
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 45,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createElement("div");
      dom.setAttribute(el1,"class","viewport-navigation");
      var el2 = dom.createTextNode("\n\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createElement("div");
      dom.setAttribute(el2,"class","control-button-toggle");
      var el3 = dom.createTextNode("\n");
      dom.appendChild(el2, el3);
      var el3 = dom.createComment("");
      dom.appendChild(el2, el3);
      var el3 = dom.createComment("");
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("  ");
      dom.appendChild(el2, el3);
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createElement("div");
      dom.setAttribute(el2,"class","control-button-toggle");
      var el3 = dom.createTextNode("\n");
      dom.appendChild(el2, el3);
      var el3 = dom.createComment("");
      dom.appendChild(el2, el3);
      var el3 = dom.createComment("");
      dom.appendChild(el2, el3);
      var el3 = dom.createComment("");
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("  ");
      dom.appendChild(el2, el3);
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n\n");
      dom.appendChild(el1, el2);
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var element0 = dom.childAt(fragment, [0]);
      var element1 = dom.childAt(element0, [1]);
      var element2 = dom.childAt(element0, [3]);
      var morphs = new Array(5);
      morphs[0] = dom.createMorphAt(element1,1,1);
      morphs[1] = dom.createMorphAt(element1,2,2);
      morphs[2] = dom.createMorphAt(element2,1,1);
      morphs[3] = dom.createMorphAt(element2,2,2);
      morphs[4] = dom.createMorphAt(element2,3,3);
      return morphs;
    },
    statements: [
      ["block","control-button",[],["class",["subexpr","concat",["control-icon-button zoom-button"," ",["subexpr","if",[["get","zoom.zoomedOut",[]],"is-active"],[],[]]," "],[],[]],"action",["subexpr","action",["zoomOut"],[],["loc",[null,[6,29],[6,47]]]]],0,null,["loc",[null,[4,4],[10,23]]]],
      ["block","control-button",[],["class",["subexpr","concat",["control-icon-button zoom-button"," ",["subexpr","if",[["get","zoom.zoomedIn",[]],"is-active"],[],[]]," "],[],[]],"action",["subexpr","action",["zoomIn"],[],["loc",[null,[13,29],[13,46]]]]],1,null,["loc",[null,[11,4],[17,23]]]],
      ["block","control-button",[],["class","control-icon-button arrow-button test-previous-week","action","goToPreviousWeek"],2,null,["loc",[null,[21,4],[26,23]]]],
      ["block","control-button",[],["class",["subexpr","concat",["this-week-button test-this-week"," ",["subexpr","if",[["get","isOnThisWeek",[]],"is-active"],[],[]]," "],[],[]],"action","goToThisWeek"],3,null,["loc",[null,[27,4],[33,23]]]],
      ["block","control-button",[],["class","control-icon-button arrow-button test-next-week","action","goToNextWeek"],4,null,["loc",[null,[34,4],[41,23]]]]
    ],
    locals: [],
    templates: [child0, child1, child2, child3, child4]
  };
}())); });

define('forecast/templates/shared/_viewport_toggle', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 3,
            "column": 4
          },
          "end": {
            "line": 3,
            "column": 83
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("Projects");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }());
  var child1 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 4,
            "column": 4
          },
          "end": {
            "line": 4,
            "column": 72
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("Team");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "triple-curlies"
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 7,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createElement("div");
      dom.setAttribute(el1,"class","viewport-toggle");
      var el2 = dom.createTextNode("\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createElement("div");
      dom.setAttribute(el2,"class","control-button-toggle");
      var el3 = dom.createTextNode("\n    ");
      dom.appendChild(el2, el3);
      var el3 = dom.createComment("");
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("\n    ");
      dom.appendChild(el2, el3);
      var el3 = dom.createComment("");
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("\n");
      dom.appendChild(el2, el3);
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n");
      dom.appendChild(el1, el2);
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var element0 = dom.childAt(fragment, [0, 1]);
      var morphs = new Array(2);
      morphs[0] = dom.createMorphAt(element0,1,1);
      morphs[1] = dom.createMorphAt(element0,3,3);
      return morphs;
    },
    statements: [
      ["block","link-to",["projects"],["classNames","control-button test-project-toggle"],0,null,["loc",[null,[3,4],[3,95]]]],
      ["block","link-to",["team"],["classNames","control-button test-team-toggle"],1,null,["loc",[null,[4,4],[4,84]]]]
    ],
    locals: [],
    templates: [child0, child1]
  };
}())); });

define('forecast/templates/shared/model_destroyed', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 8
            },
            "end": {
              "line": 8,
              "column": 8
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          This ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" was just deleted by ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(".\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
          return morphs;
        },
        statements: [
          ["content","model.type",["loc",[null,[7,15],[7,29]]]],
          ["content","model.destroyer",["loc",[null,[7,50],[7,69]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 8
            },
            "end": {
              "line": 10,
              "column": 8
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          This ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" was just deleted.\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["content","model.type",["loc",[null,[9,15],[9,29]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 21,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        dom.setAttribute(el2,"class","test-track-deletion-message");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h2");
        var el4 = dom.createTextNode("Whoops, too slow!");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        dom.setAttribute(el3,"class","sub-h2");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        You can no longer edit it.\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3,"type","submit");
        dom.setAttribute(el3,"class","button test-track-deletion-dismiss");
        var el4 = dom.createTextNode("\n        Close\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [1]);
        var element1 = dom.childAt(element0, [3, 1]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [1, 3]),1,1);
        morphs[1] = dom.createElementMorph(element1);
        return morphs;
      },
      statements: [
        ["block","if",[["get","model.destroyer",["loc",[null,[6,14],[6,29]]]]],[],0,1,["loc",[null,[6,8],[10,15]]]],
        ["element","action",["dismissDestroyModal"],[],["loc",[null,[16,14],[16,46]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 22,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      dom.insertBoundary(fragment, null);
      return morphs;
    },
    statements: [
      ["block","modal-overlay",[],["close","dismissDestroyModal"],0,null,["loc",[null,[1,0],[21,18]]]]
    ],
    locals: [],
    templates: [child0]
  };
}())); });

define('forecast/templates/shared/split_confirm', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 6
            },
            "end": {
              "line": 11,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("\n          This is a repeated assignment. Splitting will remove it from the\n          repeated series.\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 31,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h2");
        var el4 = dom.createTextNode("Split Assignment");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        dom.setAttribute(el3,"class","sub-h2");
        var el4 = dom.createTextNode("Are you sure you want to split this assignment?");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3,"type","submit");
        dom.setAttribute(el3,"class","button button-primary gtm-form-submit");
        var el4 = dom.createTextNode("\n        Yes, Split Assignment\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3,"type","submit");
        dom.setAttribute(el3,"class","button button-cancel gtm-form-cancel");
        var el4 = dom.createTextNode("\n        Cancel\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","modal-addition");
        var el3 = dom.createTextNode("\n      Did you mean to ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("a");
        var el4 = dom.createTextNode("edit this assignment");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("?\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [1]);
        var element1 = dom.childAt(element0, [3]);
        var element2 = dom.childAt(element1, [1]);
        var element3 = dom.childAt(element1, [3]);
        var element4 = dom.childAt(element0, [5, 1]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]),3,3);
        morphs[1] = dom.createElementMorph(element2);
        morphs[2] = dom.createElementMorph(element3);
        morphs[3] = dom.createElementMorph(element4);
        return morphs;
      },
      statements: [
        ["block","if",[["get","assignment.repeated_assignment_set",["loc",[null,[6,12],[6,46]]]]],[],0,null,["loc",[null,[6,6],[11,13]]]],
        ["element","action",["splitAssignment",["get","assignment",["loc",[null,[18,41],[18,51]]]],["get","model",["loc",[null,[18,52],[18,57]]]]],[],["loc",[null,[18,14],[18,59]]]],
        ["element","action",["cancelSplitAssignment"],[],["loc",[null,[22,14],[22,48]]]],
        ["element","action",["editAssignment",["get","assignment",["loc",[null,[28,51],[28,61]]]]],[],["loc",[null,[28,25],[28,63]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 32,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      dom.insertBoundary(fragment, null);
      return morphs;
    },
    statements: [
      ["block","modal-overlay",[],["close","closeSplitAssignment"],0,null,["loc",[null,[1,0],[31,18]]]]
    ],
    locals: [],
    templates: [child0]
  };
}())); });

define('forecast/templates/team', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 2,
            "column": 2
          },
          "end": {
            "line": 4,
            "column": 2
          }
        }
      },
      isEmpty: false,
      arity: 1,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("    ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
        return morphs;
      },
      statements: [
        ["inline","render",["person.show",["get","person",["loc",[null,[3,27],[3,33]]]]],[],["loc",[null,[3,4],[3,35]]]]
      ],
      locals: ["person"],
      templates: []
    };
  }());
  var child1 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 6
            },
            "end": {
              "line": 11,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","icon");
          dom.setAttribute(el1,"data-icon","add");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        Add or Invite Person\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 7,
            "column": 4
          },
          "end": {
            "line": 12,
            "column": 4
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","simple-button",[],["action","addPerson"],0,null,["loc",[null,[8,6],[11,24]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "triple-curlies"
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 16,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createElement("div");
      dom.setAttribute(el1,"class","team-rows");
      var el2 = dom.createTextNode("\n");
      dom.appendChild(el1, el2);
      var el2 = dom.createComment("");
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createElement("div");
      dom.setAttribute(el2,"class","row add-row");
      var el3 = dom.createTextNode("\n");
      dom.appendChild(el2, el3);
      var el3 = dom.createComment("");
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("    ");
      dom.appendChild(el2, el3);
      var el3 = dom.createComment("");
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("\n  ");
      dom.appendChild(el2, el3);
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n");
      dom.appendChild(el1, el2);
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var element0 = dom.childAt(fragment, [0]);
      var element1 = dom.childAt(element0, [3]);
      var morphs = new Array(3);
      morphs[0] = dom.createMorphAt(element0,1,1);
      morphs[1] = dom.createMorphAt(element1,1,1);
      morphs[2] = dom.createMorphAt(element1,3,3);
      return morphs;
    },
    statements: [
      ["block","each",[["get","sortedFilteredPeople",["loc",[null,[2,10],[2,30]]]]],["key","id"],0,null,["loc",[null,[2,2],[4,11]]]],
      ["block","if",[["get","realtime.isAdmin",["loc",[null,[7,10],[7,26]]]]],[],1,null,["loc",[null,[7,4],[12,11]]]],
      ["inline","partial",["shared/ftux_harvest_link"],[],["loc",[null,[13,4],[13,42]]]]
    ],
    locals: [],
    templates: [child0, child1]
  };
}())); });

define('forecast/templates/team/_content_filter_button', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 6,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("span");
        dom.setAttribute(el1,"class","filter-reset");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("i");
        dom.setAttribute(el2,"class","icon");
        dom.setAttribute(el2,"data-icon","x-white");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [1]);
        var morphs = new Array(1);
        morphs[0] = dom.createElementMorph(element0);
        return morphs;
      },
      statements: [
        ["element","action",["clearFilter"],["target",["get","clearFilterTarget",["loc",[null,[7,59],[7,76]]]],"bubbles",false],["loc",[null,[7,29],[8,67]]]]
      ],
      locals: [],
      templates: []
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "multiple-nodes",
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 12,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createElement("span");
      dom.setAttribute(el1,"class","selected-filter");
      var el2 = dom.createTextNode("\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createComment("");
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n");
      dom.appendChild(el1, el2);
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      var el1 = dom.createElement("i");
      dom.setAttribute(el1,"class","icon row-expand-icon");
      dom.setAttribute(el1,"data-icon","arrow-down");
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n\n");
      dom.appendChild(el0, el1);
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(2);
      morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);
      morphs[1] = dom.createMorphAt(fragment,4,4,contextualElement);
      dom.insertBoundary(fragment, null);
      return morphs;
    },
    statements: [
      ["content","label",["loc",[null,[2,2],[2,11]]]],
      ["block","if",[["get","isFiltered",["loc",[null,[6,6],[6,16]]]]],[],0,null,["loc",[null,[6,0],[11,7]]]]
    ],
    locals: [],
    templates: [child0]
  };
}())); });

define('forecast/templates/team/_context_menu', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.3.0",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 3
              },
              "end": {
                "line": 5,
                "column": 3
              }
            }
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("     ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            var el2 = dom.createTextNode("Edit Profile");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(1);
            morphs[0] = dom.createAttrMorph(element1, 'href');
            return morphs;
          },
          statements: [
            ["attribute","href",["concat",[["get","authenticated.editProfileUrl",["loc",[null,[4,16],[4,44]]]]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.3.0",
            "loc": {
              "source": null,
              "start": {
                "line": 7,
                "column": 3
              },
              "end": {
                "line": 9,
                "column": 3
              }
            }
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("     ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            dom.setAttribute(el1,"href","#");
            dom.setAttribute(el1,"class","delete-action");
            var el2 = dom.createTextNode("Delete");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(1);
            morphs[0] = dom.createElementMorph(element0);
            return morphs;
          },
          statements: [
            ["element","action",["goToDeleteRoute",["get","model",["loc",[null,[8,44],[8,49]]]]],[],["loc",[null,[8,17],[8,51]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 2
            },
            "end": {
              "line": 10,
              "column": 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("   ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          dom.setAttribute(el1,"href","#");
          dom.setAttribute(el1,"class","test-archive");
          var el2 = dom.createTextNode("Archive");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [2]);
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          morphs[1] = dom.createElementMorph(element2);
          morphs[2] = dom.createMorphAt(fragment,4,4,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","if",[["get","isCurrentUser",["loc",[null,[3,9],[3,22]]]]],[],0,null,["loc",[null,[3,3],[5,10]]]],
          ["element","action",["goToArchiveRoute",["get","model",["loc",[null,[6,43],[6,48]]]]],[],["loc",[null,[6,15],[6,50]]]],
          ["block","unless",[["get","isCurrentUser",["loc",[null,[7,13],[7,26]]]]],[],1,null,["loc",[null,[7,3],[9,14]]]]
        ],
        locals: [],
        templates: [child0, child1]
      };
    }());
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": [
            "wrong-type"
          ]
        },
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","drop-down",[],["classNames","form-settings-dropdown","alignment","left"],0,null,["loc",[null,[2,2],[10,16]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 12,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      dom.insertBoundary(fragment, null);
      return morphs;
    },
    statements: [
      ["block","unless",[["get","model.isNew",["loc",[null,[1,10],[1,21]]]]],[],0,null,["loc",[null,[1,0],[11,11]]]]
    ],
    locals: [],
    templates: [child0]
  };
}())); });

define('forecast/templates/team/control-buttons', [], function(){ return Ember.HTMLBars.template((function() {
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 4,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n\n");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      return morphs;
    },
    statements: [
      ["inline","toggle-button",[],["buttonTypeA","expand-all","actionA","expandAll","buttonTypeB","collapse-all","actionB","collapseAll"],["loc",[null,[1,0],[2,66]]]]
    ],
    locals: [],
    templates: []
  };
}())); });

define('forecast/templates/team/filter', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.3.0",
            "loc": {
              "source": null,
              "start": {
                "line": 12,
                "column": 6
              },
              "end": {
                "line": 14,
                "column": 6
              }
            }
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        Learn how to use Team Tags\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 2
            },
            "end": {
              "line": 16,
              "column": 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","filter-tag-cta");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("h4");
          var el3 = dom.createTextNode("Filter your Team view with Tags");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("p");
          var el3 = dom.createTextNode("Assign tags to people on your team, and find them listed here.");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),5,5);
          return morphs;
        },
        statements: [
          ["block","external-link",[],["href","http://support.forecastapp.com/article/23-creating-and-editing-team-tags"],0,null,["loc",[null,[12,6],[14,24]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": [
            "wrong-type",
            "multiple-nodes"
          ]
        },
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 17,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
        morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","list-select",[],["content",["subexpr","@mut",[["get","filterOptions",["loc",[null,[6,24],[6,37]]]]],[],[]],"selection",["subexpr","@mut",[["get","currentFilter",["loc",[null,[7,26],[7,39]]]]],[],[]]],["loc",[null,[6,2],[7,41]]]],
        ["block","unless",[["get","hasTeamOptions",["loc",[null,[8,12],[8,26]]]]],[],0,null,["loc",[null,[8,2],[16,13]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 18,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      dom.insertBoundary(fragment, null);
      return morphs;
    },
    statements: [
      ["block","drop-down",[],["buttonTemplate","team/content_filter_button","classNames","filter-dropdown","isFiltered",["subexpr","@mut",[["get","isFiltered",["loc",[null,[3,24],[3,34]]]]],[],[]],"label",["subexpr","@mut",[["get","currentFilterText",["loc",[null,[4,19],[4,36]]]]],[],[]],"clearFilterTarget",["subexpr","@mut",[["get","this",["loc",[null,[5,31],[5,35]]]]],[],[]]],0,null,["loc",[null,[1,0],[17,14]]]]
    ],
    locals: [],
    templates: [child0]
  };
}())); });

define('forecast/templates/team/form', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.3.0",
            "loc": {
              "source": null,
              "start": {
                "line": 7,
                "column": 10
              },
              "end": {
                "line": 12,
                "column": 10
              }
            }
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            dom.setAttribute(el1,"class","id-link hide-from-fullstory");
            var el2 = dom.createTextNode("\n              Edit\n            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element7 = dom.childAt(fragment, [1]);
            var morphs = new Array(1);
            morphs[0] = dom.createAttrMorph(element7, 'href');
            return morphs;
          },
          statements: [
            ["attribute","href",["concat",[["get","authenticated.editProfileUrl",["loc",[null,[9,23],[9,51]]]]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 6
            },
            "end": {
              "line": 15,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("h2");
          dom.setAttribute(el1,"class","hide-from-fullstory");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","email hide-from-fullstory");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element8 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(element8,1,1);
          morphs[1] = dom.createMorphAt(element8,3,3);
          morphs[2] = dom.createMorphAt(dom.childAt(fragment, [3]),0,0);
          return morphs;
        },
        statements: [
          ["content","model.name",["loc",[null,[6,10],[6,24]]]],
          ["block","if",[["get","isCurrentUser",["loc",[null,[7,16],[7,29]]]]],[],0,null,["loc",[null,[7,10],[12,17]]]],
          ["content","model.email",["loc",[null,[14,48],[14,63]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.3.0",
            "loc": {
              "source": null,
              "start": {
                "line": 17,
                "column": 10
              },
              "end": {
                "line": 22,
                "column": 10
              }
            }
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            return morphs;
          },
          statements: [
            ["inline","input",[],["class","name-input test-first-name-input hide-from-fullstory","placeholder","First Name","required","required","value",["subexpr","@mut",[["get","first_name",["loc",[null,[21,26],[21,36]]]]],[],[]]],["loc",[null,[18,12],[21,38]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.3.0",
            "loc": {
              "source": null,
              "start": {
                "line": 23,
                "column": 10
              },
              "end": {
                "line": 28,
                "column": 10
              }
            }
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            return morphs;
          },
          statements: [
            ["inline","input",[],["class","name-input test-last-name-input hide-from-fullstory","placeholder","Last Name","required","required","value",["subexpr","@mut",[["get","last_name",["loc",[null,[27,26],[27,35]]]]],[],[]]],["loc",[null,[24,12],[27,37]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 15,
              "column": 6
            },
            "end": {
              "line": 30,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","people-form-name");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element6 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(element6,1,1);
          morphs[1] = dom.createMorphAt(element6,2,2);
          return morphs;
        },
        statements: [
          ["block","form-field",[],["label","","for","first_name","of",["subexpr","@mut",[["get","this",["loc",[null,[17,53],[17,57]]]]],[],[]]],0,null,["loc",[null,[17,10],[22,25]]]],
          ["block","form-field",[],["label","","for","last_name","of",["subexpr","@mut",[["get","this",["loc",[null,[23,52],[23,56]]]]],[],[]]],1,null,["loc",[null,[23,10],[28,25]]]]
        ],
        locals: [],
        templates: [child0, child1]
      };
    }());
    var child2 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.3.0",
            "loc": {
              "source": null,
              "start": {
                "line": 35,
                "column": 8
              },
              "end": {
                "line": 41,
                "column": 8
              }
            }
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("           ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            return morphs;
          },
          statements: [
            ["inline","input",[],["class","test-email-input hide-from-fullstory","type","email","placeholder",["subexpr","@mut",[["get","emailPlaceholderText",["loc",[null,[38,31],[38,51]]]]],[],[]],"value",["subexpr","@mut",[["get","email",["loc",[null,[39,25],[39,30]]]]],[],[]],"disabled",["subexpr","@mut",[["get","model.loginEnabled",["loc",[null,[40,28],[40,46]]]]],[],[]]],["loc",[null,[36,11],[40,48]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 34,
              "column": 6
            },
            "end": {
              "line": 42,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","form-field",[],["for","email","of",["subexpr","@mut",[["get","this",["loc",[null,[35,37],[35,41]]]]],[],[]]],0,null,["loc",[null,[35,8],[41,23]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    var child3 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 43,
              "column": 6
            },
            "end": {
              "line": 47,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","tags-input",[],["emptyPlaceholder","e.g. Design, Dev, Team A","items",["subexpr","@mut",[["get","updatedTeams",["loc",[null,[45,27],[45,39]]]]],[],[]],"autocomplete",["subexpr","@mut",[["get","allTeams",["loc",[null,[46,34],[46,42]]]]],[],[]]],["loc",[null,[44,8],[46,44]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child4 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.3.0",
            "loc": {
              "source": null,
              "start": {
                "line": 55,
                "column": 8
              },
              "end": {
                "line": 57,
                "column": 8
              }
            }
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("small");
            dom.setAttribute(el1,"class","form-helper");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
            return morphs;
          },
          statements: [
            ["content","allocationHelpText",["loc",[null,[56,37],[56,59]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 48,
              "column": 6
            },
            "end": {
              "line": 58,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["inline","fc-select",[],["class","input-appearance test-hours-per-day","from",["subexpr","@mut",[["get","allocationOptions",["loc",[null,[50,25],[50,42]]]]],[],[]],"valueKey","value","labelKey","label","selectedValue",["subexpr","@mut",[["get","maxAllocationPerDay",["loc",[null,[53,34],[53,53]]]]],[],[]],"onchange",["subexpr","action",[["subexpr","mut",[["get","maxAllocationPerDay",["loc",[null,[54,42],[54,61]]]]],[],["loc",[null,[54,37],[54,62]]]]],["value","value"],["loc",[null,[54,29],[54,77]]]]],["loc",[null,[49,8],[54,79]]]],
          ["block","if",[["get","showAllocationHelp",["loc",[null,[55,14],[55,32]]]]],[],0,null,["loc",[null,[55,8],[57,15]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    var child5 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 62,
              "column": 6
            },
            "end": {
              "line": 69,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","field");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          dom.setAttribute(el2,"class","checkbox-label");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            Email me a weekly digest of the schedule\n          ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]),1,1);
          return morphs;
        },
        statements: [
          ["inline","input",[],["type","checkbox","checked",["subexpr","@mut",[["get","subscribed",["loc",[null,[65,44],[65,54]]]]],[],[]]],["loc",[null,[65,12],[65,56]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child6 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.3.0",
            "loc": {
              "source": null,
              "start": {
                "line": 75,
                "column": 12
              },
              "end": {
                "line": 77,
                "column": 12
              }
            }
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("              This person can sign in and\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.3.0",
            "loc": {
              "source": null,
              "start": {
                "line": 77,
                "column": 12
              },
              "end": {
                "line": 79,
                "column": 12
              }
            }
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("              Invite this person to sign in and\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      var child2 = (function() {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.3.0",
            "loc": {
              "source": null,
              "start": {
                "line": 86,
                "column": 10
              },
              "end": {
                "line": 91,
                "column": 10
              }
            }
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("small");
            dom.setAttribute(el1,"class","form-resend-invitation");
            var el2 = dom.createTextNode("\n              This person has not yet accepted.\n              ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("a");
            var el3 = dom.createTextNode("Resend invitation");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element3 = dom.childAt(fragment, [1, 1]);
            var morphs = new Array(1);
            morphs[0] = dom.createElementMorph(element3);
            return morphs;
          },
          statements: [
            ["element","action",["resendInvitation",["get","model",["loc",[null,[89,45],[89,50]]]]],[],["loc",[null,[89,17],[89,52]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      var child3 = (function() {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.3.0",
            "loc": {
              "source": null,
              "start": {
                "line": 93,
                "column": 8
              },
              "end": {
                "line": 95,
                "column": 8
              }
            }
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("small");
            dom.setAttribute(el1,"class","form-helper hide-from-fullstory");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
            return morphs;
          },
          statements: [
            ["content","userHelpText",["loc",[null,[94,57],[94,73]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      var child4 = (function() {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.3.0",
            "loc": {
              "source": null,
              "start": {
                "line": 96,
                "column": 8
              },
              "end": {
                "line": 98,
                "column": 8
              }
            }
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("small");
            dom.setAttribute(el1,"class","form-helper hide-from-fullstory");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
            return morphs;
          },
          statements: [
            ["content","adminHelpText",["loc",[null,[97,57],[97,74]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 71,
              "column": 6
            },
            "end": {
              "line": 99,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","field");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          dom.setAttribute(el2,"class","checkbox-label");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("          ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element4 = dom.childAt(fragment, [1]);
          var element5 = dom.childAt(element4, [1]);
          var morphs = new Array(6);
          morphs[0] = dom.createMorphAt(element5,1,1);
          morphs[1] = dom.createMorphAt(element5,3,3);
          morphs[2] = dom.createMorphAt(element4,3,3);
          morphs[3] = dom.createMorphAt(element4,5,5);
          morphs[4] = dom.createMorphAt(fragment,3,3,contextualElement);
          morphs[5] = dom.createMorphAt(fragment,4,4,contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["inline","input",[],["type","checkbox","checked",["subexpr","@mut",[["get","isOnAccount",["loc",[null,[74,44],[74,55]]]]],[],[]]],["loc",[null,[74,12],[74,57]]]],
          ["block","if",[["get","model.loginEnabled",["loc",[null,[75,18],[75,36]]]]],[],0,1,["loc",[null,[75,12],[79,19]]]],
          ["inline","fc-select",[],["from",["subexpr","@mut",[["get","adminOptions",["loc",[null,[81,27],[81,39]]]]],[],[]],"valueKey","value","labelKey","label","selectedValue",["subexpr","@mut",[["get","admin",["loc",[null,[84,36],[84,41]]]]],[],[]],"onchange",["subexpr","action",[["subexpr","mut",[["get","admin",["loc",[null,[85,44],[85,49]]]]],[],["loc",[null,[85,39],[85,50]]]]],["value","value"],["loc",[null,[85,31],[85,65]]]]],["loc",[null,[81,10],[85,67]]]],
          ["block","if",[["get","model.isInvited",["loc",[null,[86,16],[86,31]]]]],[],2,null,["loc",[null,[86,10],[91,17]]]],
          ["block","if",[["get","showUserHelp",["loc",[null,[93,14],[93,26]]]]],[],3,null,["loc",[null,[93,8],[95,15]]]],
          ["block","if",[["get","showAdminHelp",["loc",[null,[96,14],[96,27]]]]],[],4,null,["loc",[null,[96,8],[98,15]]]]
        ],
        locals: [],
        templates: [child0, child1, child2, child3, child4]
      };
    }());
    var child7 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 103,
              "column": 6
            },
            "end": {
              "line": 108,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1,"type","submit");
          dom.setAttribute(el1,"class","button button-primary gtm-form-submit");
          var el2 = dom.createTextNode("\n          Update Person\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createElementMorph(element2);
          return morphs;
        },
        statements: [
          ["element","action",["savePerson"],[],["loc",[null,[105,16],[105,39]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child8 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 108,
              "column": 6
            },
            "end": {
              "line": 113,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1,"type","submit");
          dom.setAttribute(el1,"class","button button-primary gtm-form-submit");
          var el2 = dom.createTextNode("\n          Save Person\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createElementMorph(element1);
          return morphs;
        },
        statements: [
          ["element","action",["savePerson"],[],["loc",[null,[110,16],[110,39]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child9 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.3.0",
            "loc": {
              "source": null,
              "start": {
                "line": 128,
                "column": 6
              },
              "end": {
                "line": 130,
                "column": 6
              }
            }
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        This person is linked to Harvest\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 123,
              "column": 2
            },
            "end": {
              "line": 132,
              "column": 2
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","modal-addition");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(element0,1,1);
          morphs[1] = dom.createMorphAt(element0,3,3);
          return morphs;
        },
        statements: [
          ["inline","last-updated",[],["updated_at",["subexpr","@mut",[["get","model.updated_at",["loc",[null,[125,32],[125,48]]]]],[],[]],"updated_by",["subexpr","@mut",[["get","model.updated_by",["loc",[null,[126,32],[126,48]]]]],[],[]]],["loc",[null,[125,6],[126,50]]]],
          ["block","harvest-link-message",[],["model",["subexpr","@mut",[["get","model",["loc",[null,[128,36],[128,41]]]]],[],[]]],0,null,["loc",[null,[128,6],[130,31]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": [
            "multiple-nodes",
            "wrong-type"
          ]
        },
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 133,
            "column": 0
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        dom.setAttribute(el2,"class","form-header");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        dom.setAttribute(el2,"class","form-options");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        dom.setAttribute(el2,"class","form-extras");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3,"type","reset");
        dom.setAttribute(el3,"class","button button-cancel gtm-form-cancel");
        var el4 = dom.createTextNode("\n        Cancel\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element9 = dom.childAt(fragment, [1]);
        var element10 = dom.childAt(element9, [3]);
        var element11 = dom.childAt(element9, [5]);
        var element12 = dom.childAt(element9, [7]);
        var element13 = dom.childAt(element12, [3]);
        var morphs = new Array(10);
        morphs[0] = dom.createMorphAt(dom.childAt(element9, [1]),1,1);
        morphs[1] = dom.createMorphAt(element10,1,1);
        morphs[2] = dom.createMorphAt(element10,2,2);
        morphs[3] = dom.createMorphAt(element10,3,3);
        morphs[4] = dom.createMorphAt(element11,1,1);
        morphs[5] = dom.createMorphAt(element11,3,3);
        morphs[6] = dom.createMorphAt(element12,1,1);
        morphs[7] = dom.createElementMorph(element13);
        morphs[8] = dom.createMorphAt(element12,5,5);
        morphs[9] = dom.createMorphAt(fragment,3,3,contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","if",[["get","model.loginEnabled",["loc",[null,[4,12],[4,30]]]]],[],0,1,["loc",[null,[4,6],[30,13]]]],
        ["block","unless",[["get","model.loginEnabled",["loc",[null,[34,16],[34,34]]]]],[],2,null,["loc",[null,[34,6],[42,17]]]],
        ["block","form-field",[],["for","teams","of",["subexpr","@mut",[["get","this",["loc",[null,[43,35],[43,39]]]]],[],[]],"label","Tags"],3,null,["loc",[null,[43,6],[47,21]]]],
        ["block","form-field",[],["label","Hours/Day","for","maxAllocationPerDay","of",["subexpr","@mut",[["get","this",["loc",[null,[48,67],[48,71]]]]],[],[]]],4,null,["loc",[null,[48,6],[58,21]]]],
        ["block","if",[["get","showSubscribedCheckbox",["loc",[null,[62,12],[62,34]]]]],[],5,null,["loc",[null,[62,6],[69,13]]]],
        ["block","unless",[["get","isCurrentUser",["loc",[null,[71,16],[71,29]]]]],[],6,null,["loc",[null,[71,6],[99,17]]]],
        ["block","unless",[["get","model.isNew",["loc",[null,[103,16],[103,27]]]]],[],7,8,["loc",[null,[103,6],[113,17]]]],
        ["element","action",["cancelPerson"],[],["loc",[null,[115,14],[115,39]]]],
        ["inline","partial",["team/context_menu"],[],["loc",[null,[119,6],[119,37]]]],
        ["block","unless",[["get","model.isNew",["loc",[null,[123,12],[123,23]]]]],[],9,null,["loc",[null,[123,2],[132,13]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6, child7, child8, child9]
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "missing-wrapper",
        "problems": [
          "wrong-type"
        ]
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 134,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createComment("");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var morphs = new Array(1);
      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
      dom.insertBoundary(fragment, 0);
      dom.insertBoundary(fragment, null);
      return morphs;
    },
    statements: [
      ["block","modal-overlay",[],["close","cancelPerson"],0,null,["loc",[null,[1,0],[133,18]]]]
    ],
    locals: [],
    templates: [child0]
  };
}())); });

define('forecast/templates/team_page', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 6,
            "column": 4
          },
          "end": {
            "line": 9,
            "column": 4
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("      ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("i");
        dom.setAttribute(el1,"class","icon");
        dom.setAttribute(el1,"data-icon","add-white");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n      Add or Invite Person\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }());
  var child1 = (function() {
    var child0 = (function() {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.3.0",
          "loc": {
            "source": null,
            "start": {
              "line": 12,
              "column": 6
            },
            "end": {
              "line": 14,
              "column": 6
            }
          }
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Import from Harvest\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 11,
            "column": 4
          },
          "end": {
            "line": 15,
            "column": 4
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","link-to",["account.team_import_page"],["tagName","button","class","button test-import-button"],0,null,["loc",[null,[12,6],[14,18]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }());
  var child2 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 17,
            "column": 4
          },
          "end": {
            "line": 20,
            "column": 4
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("      ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("i");
        dom.setAttribute(el1,"class","icon icon-right");
        dom.setAttribute(el1,"data-icon","arrow-right");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n      View Archived People\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "triple-curlies"
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 29,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createElement("div");
      dom.setAttribute(el1,"class","container");
      var el2 = dom.createTextNode("\n\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createElement("h1");
      var el3 = dom.createTextNode("Team");
      dom.appendChild(el2, el3);
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createElement("div");
      dom.setAttribute(el2,"class","list-controls");
      var el3 = dom.createTextNode("\n");
      dom.appendChild(el2, el3);
      var el3 = dom.createComment("");
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("\n");
      dom.appendChild(el2, el3);
      var el3 = dom.createComment("");
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("\n");
      dom.appendChild(el2, el3);
      var el3 = dom.createComment("");
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("  ");
      dom.appendChild(el2, el3);
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createElement("ol");
      dom.setAttribute(el2,"class","content-list team-list");
      var el3 = dom.createTextNode("\n    ");
      dom.appendChild(el2, el3);
      var el3 = dom.createComment("");
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("\n  ");
      dom.appendChild(el2, el3);
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n\n");
      dom.appendChild(el1, el2);
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n\n");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var element0 = dom.childAt(fragment, [0]);
      var element1 = dom.childAt(element0, [3]);
      var morphs = new Array(4);
      morphs[0] = dom.createMorphAt(element1,1,1);
      morphs[1] = dom.createMorphAt(element1,3,3);
      morphs[2] = dom.createMorphAt(element1,5,5);
      morphs[3] = dom.createMorphAt(dom.childAt(element0, [5]),1,1);
      return morphs;
    },
    statements: [
      ["block","simple-button",[],["class","button-primary test-add-person","action","addPerson"],0,null,["loc",[null,[6,4],[9,22]]]],
      ["block","if",[["get","account.isConnectedToHarvest",["loc",[null,[11,10],[11,38]]]]],[],1,null,["loc",[null,[11,4],[15,11]]]],
      ["block","link-to",["account.team_archived_page"],["tagName","button","class","button button-as-gray-link right"],2,null,["loc",[null,[17,4],[20,16]]]],
      ["inline","render",["account.people_list",["get","model",["loc",[null,[24,35],[24,40]]]]],[],["loc",[null,[24,4],[24,42]]]]
    ],
    locals: [],
    templates: [child0, child1, child2]
  };
}())); });

define('forecast/templates/welcome', [], function(){ return Ember.HTMLBars.template((function() {
  var child0 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 4,
            "column": 6
          },
          "end": {
            "line": 12,
            "column": 6
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("        ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("section");
        dom.setAttribute(el1,"class","test-is-admin");
        var el2 = dom.createTextNode("\n          ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h1");
        var el3 = dom.createTextNode("Welcome to Forecast");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n            ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        var el3 = dom.createTextNode("\n              Learn the basics of Forecast in less than two and a half minutes, and become an expert in no time. To access this video in the future, just click “Help”.\n            ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n            ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("iframe");
        dom.setAttribute(el2,"src","//fast.wistia.net/embed/iframe/eujh3x0rad");
        dom.setAttribute(el2,"allowtransparency","true");
        dom.setAttribute(el2,"frameborder","0");
        dom.setAttribute(el2,"scrolling","no");
        dom.setAttribute(el2,"class","wistia_embed");
        dom.setAttribute(el2,"name","wistia_embed");
        dom.setAttribute(el2,"allowfullscreen","");
        dom.setAttribute(el2,"mozallowfullscreen","");
        dom.setAttribute(el2,"webkitallowfullscreen","");
        dom.setAttribute(el2,"oallowfullscreen","");
        dom.setAttribute(el2,"msallowfullscreen","");
        dom.setAttribute(el2,"width","600");
        dom.setAttribute(el2,"height","310");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n        ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }());
  var child1 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 12,
            "column": 6
          },
          "end": {
            "line": 24,
            "column": 6
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("        ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("section");
        dom.setAttribute(el1,"class","test-view-only");
        var el2 = dom.createTextNode("\n          ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h1");
        var el3 = dom.createTextNode("Welcome to Forecast");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n          ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        var el3 = dom.createTextNode("\n            Forecast is a new way for you to see your team’s project schedules.\n            You’ll be able to see which projects to spend your time on each week,\n            as well what others are working on.\n          ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n          ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        var el3 = dom.createTextNode("\n            Forecast keeps everyone on the same page.\n          ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n        ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }());
  var child2 = (function() {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.3.0",
        "loc": {
          "source": null,
          "start": {
            "line": 27,
            "column": 8
          },
          "end": {
            "line": 29,
            "column": 8
          }
        }
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("          ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("span");
        var el2 = dom.createTextNode("Ready to go?");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }());
  return {
    meta: {
      "fragmentReason": {
        "name": "triple-curlies"
      },
      "revision": "Ember@2.3.0",
      "loc": {
        "source": null,
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 39,
          "column": 0
        }
      }
    },
    isEmpty: false,
    arity: 0,
    cachedFragment: null,
    hasRendered: false,
    buildFragment: function buildFragment(dom) {
      var el0 = dom.createDocumentFragment();
      var el1 = dom.createElement("div");
      dom.setAttribute(el1,"class","modal-overlay");
      var el2 = dom.createTextNode("\n  ");
      dom.appendChild(el1, el2);
      var el2 = dom.createElement("div");
      dom.setAttribute(el2,"class","modal wide-modal text-center welcome-to-forecast");
      var el3 = dom.createTextNode("\n    ");
      dom.appendChild(el2, el3);
      var el3 = dom.createElement("form");
      var el4 = dom.createTextNode("\n");
      dom.appendChild(el3, el4);
      var el4 = dom.createComment("");
      dom.appendChild(el3, el4);
      var el4 = dom.createTextNode("\n      ");
      dom.appendChild(el3, el4);
      var el4 = dom.createElement("section");
      dom.setAttribute(el4,"class","modal-cta");
      var el5 = dom.createTextNode("\n");
      dom.appendChild(el4, el5);
      var el5 = dom.createComment("");
      dom.appendChild(el4, el5);
      var el5 = dom.createTextNode("        ");
      dom.appendChild(el4, el5);
      var el5 = dom.createElement("button");
      dom.setAttribute(el5,"type","submit");
      dom.setAttribute(el5,"class","button button-big button-primary test-dismiss-ftux");
      var el6 = dom.createTextNode("\n          ");
      dom.appendChild(el5, el6);
      var el6 = dom.createComment("");
      dom.appendChild(el5, el6);
      var el6 = dom.createTextNode("\n        ");
      dom.appendChild(el5, el6);
      dom.appendChild(el4, el5);
      var el5 = dom.createTextNode("\n      ");
      dom.appendChild(el4, el5);
      dom.appendChild(el3, el4);
      var el4 = dom.createTextNode("\n    ");
      dom.appendChild(el3, el4);
      dom.appendChild(el2, el3);
      var el3 = dom.createTextNode("\n  ");
      dom.appendChild(el2, el3);
      dom.appendChild(el1, el2);
      var el2 = dom.createTextNode("\n");
      dom.appendChild(el1, el2);
      dom.appendChild(el0, el1);
      var el1 = dom.createTextNode("\n");
      dom.appendChild(el0, el1);
      return el0;
    },
    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
      var element0 = dom.childAt(fragment, [0, 1, 1]);
      var element1 = dom.childAt(element0, [3]);
      var element2 = dom.childAt(element1, [3]);
      var morphs = new Array(4);
      morphs[0] = dom.createMorphAt(element0,1,1);
      morphs[1] = dom.createMorphAt(element1,1,1);
      morphs[2] = dom.createElementMorph(element2);
      morphs[3] = dom.createMorphAt(element2,1,1);
      return morphs;
    },
    statements: [
      ["block","if",[["get","isAdmin",["loc",[null,[4,12],[4,19]]]]],[],0,1,["loc",[null,[4,6],[24,13]]]],
      ["block","if",[["get","isAdmin",["loc",[null,[27,14],[27,21]]]]],[],2,null,["loc",[null,[27,8],[29,15]]]],
      ["element","action",["dismissFTUX",["get","next",["loc",[null,[32,39],[32,43]]]]],[],["loc",[null,[32,16],[32,45]]]],
      ["content","buttonText",["loc",[null,[33,10],[33,24]]]]
    ],
    locals: [],
    templates: [child0, child1, child2]
  };
}())); });